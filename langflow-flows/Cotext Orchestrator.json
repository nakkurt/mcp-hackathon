{"name": "Cotext Orchestrator", "description": "Orchestrator", "icon": null, "icon_bg_color": null, "gradient": null, "data": {"nodes": [{"data": {"description": "Get chat inputs from the Playground.", "display_name": "Chat Input", "id": "ChatInput-KOfOG", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Get chat inputs from the Playground.", "display_name": "Chat Input", "documentation": "", "edited": false, "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "files", "background_color", "chat_icon", "text_color"], "frozen": false, "icon": "MessagesSquare", "legacy": false, "lf_version": "1.4.1", "metadata": {}, "minimized": true, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Message", "method": "message_response", "name": "message", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__", "hidden": false}], "pinned": false, "template": {"_type": "Component", "background_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Background Color", "dynamic": false, "info": "The background color of the icon.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "background_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "chat_icon": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Icon", "dynamic": false, "info": "The icon of the message.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "chat_icon", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"}, "files": {"_input_type": "FileInput", "advanced": true, "display_name": "Files", "dynamic": false, "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "file_path": "", "info": "Files to be sent with the message.", "list": true, "list_add_label": "Add More", "name": "files", "placeholder": "", "required": false, "show": true, "temp_file": true, "title_case": false, "trace_as_metadata": true, "type": "file", "value": ""}, "input_value": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Text", "dynamic": false, "info": "Message to be passed as input.", "input_types": [], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{\n\"user\": \"self\",\n\"group\": \"wifey\",\n\"message\": \"can you get the weather information from the notion doc\",\n\"config\": {\n  \"wifey\": {\n    \"id\": \"wifey\",\n    \"name\": \"Wifey\",\n    \"emoji\": \"\ud83e\udde1\",\n    \"systemPrompt\": \"You are a warm, supportive personal agent for my wife. You help manage our family calendar, keep track of important events, and provide thoughtful reminders. Your tone is caring and considerate. You know our family routines, and you're always looking out for ways to make life easier and more organized for us.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Our son Tommy's health insurance number: ABC55443322\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Health Tracker\"\n      },\n      {\n        \"content\": \"Alaska Airlines Mileage Plan #: 11223344\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Chore List\"\n      },\n      {\n        \"content\": \"Safe word: \\\"Marzipan\\\"\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Family Contacts\"\n      },\n      {\n        \"content\": \"Emergency chocolate stash: Bottom-left drawer, behind the quinoa\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Meal Planner\"\n      },\n      {\n        \"content\": \"Spotify playlist: \\\"Drive Home Vibes\\\"\",\n        \"mcp\": \"Gmail MCP\",\n        \"tool\": \"list_emails\",\n        \"resource\": \"Personal Inbox\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Health Tracker\",\n          \"Chore List\",\n          \"Meal Planner\"\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Family Calendar\",\n          \"Date Nights\"\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Personal Inbox\"\n        ]\n      },\n      {\n        \"name\": \"Google Contacts\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Contacts\"\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Server\"\n        ]\n      }\n    ]\n  },\n  \"friends\": {\n    \"id\": \"friends\",\n    \"name\": \"Friends\",\n    \"emoji\": \"\u2728\",\n    \"systemPrompt\": \"You are a casual, funny, and highly relatable agent for my friend group. You help coordinate hangouts, remember inside jokes, and keep track of our shared interests. Your tone is playful and informal. You're great at suggesting activities based on our past preferences and making sure everyone feels included.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Group vacation: July 18\u201324, Lake Tahoe\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Trip Planning\"\n      },\n      {\n        \"content\": \"Inside joke: 'James keeps forgetting the forks'\",\n        \"mcp\": \"Discord MCP\",\n        \"tool\": \"list_channels\",\n        \"resource\": \"Gaming Server\"\n      },\n      {\n        \"content\": \"Safe cocktail code: \\\"Grapefruit mode = send help\\\"\",\n        \"mcp\": \"Gmail MCP\",\n        \"tool\": \"list_emails\",\n        \"resource\": \"Friend Group\"\n      },\n      {\n        \"content\": \"Mario Kart night: Every other Friday\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Game Night Schedule\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"access\": \"write\",\n        \"resources\": [\n          \"Trip Planning\",\n          \"Game Night Schedule\"\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Friend Events\"\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Friend Group\"\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Gaming Server\",\n          \"Movie Club\"\n        ]\n      }\n    ]\n  },\n  \"colleagues\": {\n    \"id\": \"colleagues\",\n    \"name\": \"Colleagues\",\n    \"emoji\": \"\ud83d\udcbc\",\n    \"systemPrompt\": \"You are a professional, efficient personal agent for work-related matters. You help manage my professional calendar, keep track of important deadlines, and maintain a professional tone in all communications. You're knowledgeable about my work projects and can help me prepare for meetings and follow up on action items.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Office door code: 5523#\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Work Contacts\"\n      },\n      {\n        \"content\": \"IT support direct line: 555-123-4567\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Work Contacts\"\n      },\n      {\n        \"content\": \"Conference room booking system password: MeetingPro2025\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Meeting Notes\"\n      },\n      {\n        \"content\": \"Team lunch preferences document: shared/docs/team-preferences.xlsx\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Project Tracker\"\n      },\n      {\n        \"content\": \"Quarterly OKR dashboard link: notion.so/work-okr\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Project Tracker\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"resources\": [\n          \"Project Tracker\",\n          \"Meeting Notes\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_notion_pages\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"create_notion_page\",\n            \"access\": \"write\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"resources\": [\n          \"Work Calendar\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_calendar_events\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"create_calendar_event\",\n            \"access\": \"write\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"resources\": [\n          \"Work Inbox\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_emails\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"send_email\",\n            \"access\": \"write\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Google Contacts\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"resources\": [\n          \"Work Contacts\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_contacts\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"add_contact\",\n            \"access\": \"write\"\n          }\n        ]\n      }\n    ]\n  },\n  \"public\": {\n    \"id\": \"public\",\n    \"name\": \"Public\",\n    \"emoji\": \"\ud83c\udf10\",\n    \"systemPrompt\": \"You are a helpful, informative personal agent for public-facing interactions. You provide general information and assistance while maintaining a friendly, professional tone. You're careful not to share any private information and focus on being helpful with publicly available resources and knowledge.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Public website admin login: admin@example.com (password in password manager)\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Public Notes\"\n      },\n      {\n        \"content\": \"Community event calendar access: https://example.com/calendar\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Public Notes\"\n      },\n      {\n        \"content\": \"Social media posting schedule: Tuesdays and Thursdays at 10am\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Public Notes\"\n      },\n      {\n        \"content\": \"Preferred talking points: AI literacy, open-source collaboration, productivity tips\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Public Notes\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"resources\": [\n          \"Public Notes\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_notion_pages\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"create_notion_page\",\n            \"access\": \"write\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"resources\": [\n          \"Community Server\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_channels\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"send_message\",\n            \"access\": \"write\"\n          }\n        ]\n      }\n    ]\n  }\n}\n}"}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Type of sender.", "name": "sender", "options": ["Machine", "User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "User"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Name of the sender.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "User"}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "should_store_message": {"_input_type": "BoolInput", "advanced": true, "display_name": "Store Messages", "dynamic": false, "info": "Store the message in the history.", "list": false, "list_add_label": "Add More", "name": "should_store_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "text_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Text Color", "dynamic": false, "info": "The text color of the name", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "text_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "type": "ChatInput"}, "dragging": false, "id": "ChatInput-KOfOG", "measured": {"height": 230, "width": 320}, "position": {"x": -3363.6871018319184, "y": 1204.2827464030433}, "selected": false, "type": "genericNode"}, {"data": {"description": "Use Composio toolset to run actions with your agent", "display_name": "Composio Tools", "id": "ComposioAPI-OWyfp", "node": {"base_classes": ["Tool"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Use Composio toolset to run actions with your agent", "display_name": "Composio Tools", "documentation": "https://docs.composio.dev", "edited": false, "field_order": ["entity_id", "api_key", "tool_name", "actions"], "frozen": false, "icon": "Composio", "legacy": false, "lf_version": "1.4.1", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "tools", "hidden": null, "display_name": "Tools", "method": "build_tool", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "actions": {"_input_type": "SortableListInput", "advanced": false, "display_name": "Actions", "dynamic": false, "helper_text": "", "helper_text_metadata": {"icon": "Check", "variant": "success"}, "info": "The actions to use", "limit": 1, "name": "actions", "options": [{"name": "GMAIL_ADD_LABEL_TO_EMAIL"}, {"name": "GMAIL_CREATE_EMAIL_DRAFT"}, {"name": "GMAIL_CREATE_LABEL"}, {"name": "GMAIL_DELETE_DRAFT"}, {"name": "GMAIL_DELETE_MESSAGE"}, {"name": "GMAIL_FETCH_EMAILS"}, {"name": "GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID"}, {"name": "GMAIL_FETCH_MESSAGE_BY_THREAD_ID"}, {"name": "GMAIL_GET_ATTACHMENT"}, {"name": "GMAIL_GET_CONTACTS"}, {"name": "GMAIL_GET_PEOPLE"}, {"name": "GMAIL_GET_PROFILE"}, {"name": "GMAIL_LIST_DRAFTS"}, {"name": "GMAIL_LIST_LABELS"}, {"name": "GMAIL_LIST_THREADS"}, {"name": "GMAIL_MODIFY_THREAD_LABELS"}, {"name": "GMAIL_MOVE_TO_TRASH"}, {"name": "GMAIL_REMOVE_LABEL"}, {"name": "GMAIL_REPLY_TO_THREAD"}, {"name": "GMAIL_SEARCH_PEOPLE"}, {"name": "GMAIL_SEND_EMAIL"}], "placeholder": "Select action", "required": false, "search_category": [], "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "sortableList", "value": [{"name": "GMAIL_FETCH_EMAILS", "chosen": false, "selected": false}]}, "api_key": {"_input_type": "SecretStrInput", "advanced": false, "display_name": "Composio API Key", "dynamic": false, "info": "Refer to https://docs.composio.dev/faq/api_key/api_key", "input_types": ["Message"], "load_from_db": true, "name": "api_key", "password": true, "placeholder": "", "real_time_refresh": true, "required": true, "show": true, "title_case": false, "type": "str", "value": null}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"gmail\", \"linkedin\", \"notion\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=1,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n"}, "entity_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Entity ID", "dynamic": false, "info": "", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "entity_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "default"}, "tool_name": {"_input_type": "ConnectionInput", "advanced": false, "button_metadata": {"icon": "unplug", "variant": "destructive"}, "connection_link": "", "display_name": "Tool Name", "dynamic": false, "info": "The name of the tool to use", "name": "tool_name", "options": [{"name": "Confluence", "icon": "confluence", "link": ""}, {"name": "Discord", "icon": "discord", "link": ""}, {"name": "Dropbox", "icon": "dropbox", "link": ""}, {"name": "Github", "icon": "github", "link": ""}, {"name": "Gmail", "icon": "gmail", "link": "validated"}, {"name": "Linkedin", "icon": "linkedin", "link": ""}, {"name": "Notion", "icon": "notion", "link": ""}, {"name": "Slack", "icon": "slack", "link": ""}, {"name": "Youtube", "icon": "youtube", "link": ""}], "placeholder": "Select a tool...", "real_time_refresh": true, "required": false, "search_category": [], "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "connect", "value": "Gmail", "helper_text": "", "helper_text_metadata": {}}}, "tool_mode": false}, "showNode": true, "type": "ComposioAPI"}, "dragging": false, "id": "ComposioAPI-OWyfp", "measured": {"height": 401, "width": 320}, "position": {"x": -2312.2316292653913, "y": -292.59708569807395}, "selected": false, "type": "genericNode"}, {"data": {"description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "id": "Agent-393q0", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": null, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "OpenAI"}, "api_key": {"_input_type": "SecretStrInput", "advanced": false, "display_name": "OpenAI API Key", "dynamic": false, "info": "The OpenAI API Key to use for the OpenAI model.", "input_types": ["Message"], "load_from_db": true, "name": "api_key", "password": true, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "str", "value": null}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "json_mode": {"_input_type": "BoolInput", "advanced": true, "display_name": "JSON Mode", "dynamic": false, "info": "If True, it will output JSON regardless of passing a schema.", "list": false, "list_add_label": "Add More", "name": "json_mode", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": false}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15}, "max_retries": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Retries", "dynamic": false, "info": "The maximum number of retries to make when generating.", "list": false, "list_add_label": "Add More", "name": "max_retries", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 5}, "max_tokens": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Tokens", "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "list": false, "list_add_label": "Add More", "name": "max_tokens", "placeholder": "", "range_spec": {"max": 128000, "min": 0, "step": 0.1, "step_type": "float"}, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": ""}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "model_kwargs": {"_input_type": "DictInput", "advanced": true, "display_name": "Model Kwargs", "dynamic": false, "info": "Additional keyword arguments to pass to the model.", "list": false, "list_add_label": "Add More", "name": "model_kwargs", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "dict", "value": {}}, "model_name": {"_input_type": "DropdownInput", "advanced": false, "combobox": true, "dialog_inputs": {}, "display_name": "Model Name", "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "load_from_db": false, "name": "model_name", "options": ["gpt-4o-mini", "gpt-4o", "gpt-4.5-preview", "gpt-4-turbo", "gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo"], "options_metadata": [], "placeholder": "", "real_time_refresh": false, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "gpt-4o-mini"}, "n_messages": {"_input_type": "IntInput", "advanced": false, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100}, "openai_api_base": {"_input_type": "StrInput", "advanced": true, "display_name": "OpenAI API Base", "dynamic": false, "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "openai_api_base", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending"}, "seed": {"_input_type": "IntInput", "advanced": true, "display_name": "Seed", "dynamic": false, "info": "The seed controls the reproducibility of the job.", "list": false, "list_add_label": "Add More", "name": "seed", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 1}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "You are an intelligent email assistant with the following capabilities:\n\nSend Emails: Dispatch emails to specified recipients.\nCreate Email Drafts: Generate draft emails based on given content.\nCreate Labels: Organize emails by creating and applying labels.\nReply to Email Threads: Respond to ongoing email conversations.\nYour task is to efficiently manage email communication while maintaining a clear, professional tone and ensuring all actions align with the provided instructions."}, "temperature": {"_input_type": "SliderInput", "advanced": true, "display_name": "Temperature", "dynamic": false, "info": "", "max_label": "", "max_label_icon": "", "min_label": "", "min_label_icon": "", "name": "temperature", "placeholder": "", "range_spec": {"max": 1, "min": 0, "step": 0.01, "step_type": "float"}, "required": false, "show": true, "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "title_case": false, "tool_mode": false, "type": "slider", "value": 0.1}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "timeout": {"_input_type": "IntInput", "advanced": true, "display_name": "Timeout", "dynamic": false, "info": "The timeout for requests to OpenAI completion API.", "list": false, "list_add_label": "Add More", "name": "timeout", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 700}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools_metadata", "value": [{"name": "gmail_agent", "description": "You are a GMAIL agent with the ability to read and create emails", "tags": ["Agent"], "status": true, "display_name": "message_response", "display_description": "Agent. message_response - Define the agent's instructions, then enter a task to complete using tools.", "readonly": false, "args": {"input_value": {"default": "", "description": "The input provided by the user for the agent to process.", "title": "Input Value", "type": "string"}, "order": {"default": "Ascending", "description": "Order of the messages.", "enum": ["Ascending", "Descending"], "title": "Order", "type": "string"}}}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}}, "tool_mode": true, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "dragging": false, "id": "Agent-393q0", "measured": {"height": 705, "width": 320}, "position": {"x": -1928.648066816728, "y": -91.91059122571784}, "selected": false, "type": "genericNode"}, {"data": {"id": "note-SODjt", "node": {"description": "# Email Agents", "display_name": "", "documentation": "", "template": {"backgroundColor": "lime"}}, "type": "note"}, "dragging": false, "id": "note-SODjt", "measured": {"height": 324, "width": 325}, "position": {"x": -2370.557130493821, "y": -379.8499362724823}, "selected": false, "type": "noteNode"}, {"data": {"description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "id": "Agent-iCl6s", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Message"], "selected": "Message", "name": "response", "hidden": null, "display_name": "Response", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Anthropic"}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n", "input_types": []}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15, "input_types": []}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "n_messages": {"_input_type": "IntInput", "advanced": true, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100, "input_types": []}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending", "input_types": []}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User", "input_types": []}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "max_tokens": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_tokens", "value": 4096, "display_name": "Max Tokens", "advanced": true, "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "title_case": false, "type": "int", "_input_type": "IntInput", "input_types": []}, "model_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["claude-3-7-sonnet-latest", "claude-3-5-sonnet-latest", "claude-3-5-haiku-latest", "claude-3-opus-latest", "claude-3-sonnet-20240229", "claude-3-haiku-20240307", "claude-3-7-sonnet-20250219", "claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022", "claude-3-5-sonnet-20240620", "claude-3-haiku-20240307", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-2.1", "claude-2.0"], "options_metadata": [], "combobox": true, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "model_name", "value": "claude-3-7-sonnet-latest", "display_name": "Model Name", "advanced": false, "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "real_time_refresh": false, "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput", "input_types": []}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Anthropic API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Your Anthropic API key.", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "temperature": {"tool_mode": false, "min_label": "", "max_label": "", "min_label_icon": "", "max_label_icon": "", "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "range_spec": {"step_type": "float", "min": 0, "max": 1, "step": 0.01}, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.1, "display_name": "Temperature", "advanced": true, "dynamic": false, "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].", "title_case": false, "type": "slider", "_input_type": "SliderInput", "input_types": []}, "base_url": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "base_url", "value": "https://api.anthropic.com", "display_name": "Anthropic API URL", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_model_enabled": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tool_model_enabled", "value": false, "display_name": "Enable Tool Models", "advanced": true, "dynamic": false, "info": "Select if you want to use models that can work with tools. If yes, only those models will be shown.", "real_time_refresh": true, "title_case": false, "type": "bool", "_input_type": "BoolInput", "input_types": []}, "prefill": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "prefill", "value": "", "display_name": "Prefill", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Prefill text to guide the model's response.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "dragging": false, "id": "Agent-iCl6s", "measured": {"height": 624, "width": 320}, "position": {"x": 2155.5532530494793, "y": 859.585919195406}, "selected": false, "type": "genericNode"}, {"data": {"description": "Display a chat message in the Playground.", "display_name": "Chat Output", "id": "ChatOutput-CJqT6", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Display a chat message in the Playground.", "display_name": "Chat Output", "documentation": "", "edited": false, "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "data_template", "background_color", "chat_icon", "text_color", "clean_data"], "frozen": false, "icon": "MessagesSquare", "legacy": false, "metadata": {}, "minimized": true, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Message", "hidden": null, "method": "message_response", "name": "message", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "background_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Background Color", "dynamic": false, "info": "The background color of the icon.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "background_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "chat_icon": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Icon", "dynamic": false, "info": "The icon of the message.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "chat_icon", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "clean_data": {"_input_type": "BoolInput", "advanced": true, "display_name": "Basic Clean Data", "dynamic": false, "info": "Whether to clean the data", "list": false, "list_add_label": "Add More", "name": "clean_data", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"}, "data_template": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Data Template", "dynamic": false, "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "data_template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{text}"}, "input_value": {"_input_type": "HandleInput", "advanced": false, "display_name": "Text", "dynamic": false, "info": "Message to be passed as output.", "input_types": ["Data", "DataFrame", "Message"], "list": false, "list_add_label": "Add More", "name": "input_value", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Type of sender.", "name": "sender", "options": ["Machine", "User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Name of the sender.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "AI"}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "should_store_message": {"_input_type": "BoolInput", "advanced": true, "display_name": "Store Messages", "dynamic": false, "info": "Store the message in the history.", "list": false, "list_add_label": "Add More", "name": "should_store_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "text_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Text Color", "dynamic": false, "info": "The text color of the name", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "text_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "ChatOutput"}, "dragging": false, "id": "ChatOutput-CJqT6", "measured": {"height": 192, "width": 320}, "position": {"x": 2719.1171535394865, "y": 1041.7759729797258}, "selected": false, "type": "genericNode"}, {"data": {"id": "Prompt-S888r", "node": {"template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"}, "template": {"_input_type": "PromptInput", "advanced": false, "display_name": "Template", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "prompt", "value": "You are a helpful, friendly, and respectful AI assistant for Quinn and their trusted circle (friends and family). You have access to a range of Quinn\u2019s personal services, which may include calendars, contacts, delivery status, financial tools, travel info, and more.\n\nYou can respond to requests from Quinn, as well as their approved friends or family, but always ensure your tone is warm, clear, and slightly more casual when talking to Quinn\u2019s inner circle.\n\nYour job is to:\n\u2013 Answer questions accurately using the available services and data\n\u2013 Offer helpful suggestions when asked\n\u2013 Be proactive in spotting helpful patterns or reminders\n\u2013 Always prioritize clarity, privacy, and utility\n\nRules:\n\u2013 If a question is vague, ask for clarification before acting.\n\u2013 If the request involves something sensitive (e.g. money, account access, or location sharing), confirm the request is from Quinn unless noted otherwise.\n\u2013 You can reference Quinn in third person when talking to friends/family (e.g., \u201cQuinn\u2019s flight lands at 4:30 PM\u201d), and in first person when responding to Quinn directly.\n\u2013 If unsure or lacking access, gracefully say so and offer alternatives.\n\n{user_specific_rules}\n\nHere are the acceptable and allowed Tools for this user:\n\n{mcp_integrations}\n\n\n\nAlways be helpful, friendly, and privacy-aware.\n\n\nOutput Format: Provide your results in a structured, readable format. Ask for clarification if any details are missing or unclear.\nYour output should align closely with the defined action item, ensuring accuracy and efficiency based on the context provided.\n\nDon't use markdown format\n"}, "tool_placeholder": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Tool Placeholder", "dynamic": false, "info": "A placeholder input for tool mode.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "tool_placeholder", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "user_specific_rules": {"field_type": "str", "required": false, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "", "fileTypes": [], "file_path": "", "name": "user_specific_rules", "display_name": "user_specific_rules", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "load_from_db": false, "title_case": false, "type": "str"}, "mcp_integrations": {"field_type": "str", "required": false, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "", "fileTypes": [], "file_path": "", "name": "mcp_integrations", "display_name": "mcp_integrations", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "load_from_db": false, "title_case": false, "type": "str"}}, "description": "Create a prompt template with dynamic variables.", "icon": "prompts", "is_input": null, "is_output": null, "is_composition": null, "base_classes": ["Message"], "name": "", "display_name": "Prompt", "priority": null, "documentation": "", "minimized": false, "custom_fields": {"template": ["user_specific_rules", "mcp_integrations"]}, "output_types": [], "full_path": null, "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "prompt", "hidden": false, "display_name": "Prompt Message", "method": "build_prompt", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["template", "tool_placeholder"], "beta": false, "legacy": false, "error": null, "edited": false, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "Prompt"}, "dragging": false, "id": "Prompt-S888r", "measured": {"height": 495, "width": 320}, "position": {"x": 1874.647318684731, "y": 9.179088206989064}, "selected": false, "type": "genericNode"}, {"data": {"id": "note-yic9i", "node": {"description": "# Google Docs Agent\n", "display_name": "", "documentation": "", "template": {"backgroundColor": "lime"}}, "type": "note"}, "dragging": false, "id": "note-yic9i", "measured": {"height": 324, "width": 325}, "position": {"x": 28.619266721536377, "y": -1279.4380656992673}, "selected": false, "type": "noteNode"}, {"data": {"id": "note-BXF2p", "node": {"description": "# Ouput -- Action Items, Meeting Takeaways, Email Draft\n\n", "display_name": "", "documentation": "", "template": {"backgroundColor": "blue"}}, "type": "note"}, "dragging": false, "id": "note-BXF2p", "measured": {"height": 324, "width": 325}, "position": {"x": 2822.030581240084, "y": 766.919494532426}, "selected": false, "type": "noteNode"}, {"data": {"id": "note-U4P8J", "node": {"description": "# INPUT \n\n## Context \n\n## Action Item / Request\n\n\n", "display_name": "", "documentation": "", "template": {}}, "type": "note"}, "dragging": false, "id": "note-U4P8J", "measured": {"height": 324, "width": 325}, "position": {"x": -3266.3870320218975, "y": 312.3725407924011}, "selected": false, "type": "noteNode"}, {"data": {"id": "note-errOl", "node": {"description": "# Orchestrator  Agent\n\n", "display_name": "", "documentation": "", "template": {"backgroundColor": "transparent"}}, "type": "note"}, "dragging": false, "id": "note-errOl", "measured": {"height": 324, "width": 324}, "position": {"x": 2186.7389526278084, "y": 766.6875922355921}, "selected": false, "type": "noteNode"}, {"data": {"description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "id": "Agent-MUIYx", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": null, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "OpenAI"}, "api_key": {"_input_type": "SecretStrInput", "advanced": false, "display_name": "OpenAI API Key", "dynamic": false, "info": "The OpenAI API Key to use for the OpenAI model.", "input_types": ["Message"], "load_from_db": true, "name": "api_key", "password": true, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "str", "value": null}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "json_mode": {"_input_type": "BoolInput", "advanced": true, "display_name": "JSON Mode", "dynamic": false, "info": "If True, it will output JSON regardless of passing a schema.", "list": false, "list_add_label": "Add More", "name": "json_mode", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": false}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15}, "max_retries": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Retries", "dynamic": false, "info": "The maximum number of retries to make when generating.", "list": false, "list_add_label": "Add More", "name": "max_retries", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 5}, "max_tokens": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Tokens", "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "list": false, "list_add_label": "Add More", "name": "max_tokens", "placeholder": "", "range_spec": {"max": 128000, "min": 0, "step": 0.1, "step_type": "float"}, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": ""}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "model_kwargs": {"_input_type": "DictInput", "advanced": true, "display_name": "Model Kwargs", "dynamic": false, "info": "Additional keyword arguments to pass to the model.", "list": false, "list_add_label": "Add More", "name": "model_kwargs", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "dict", "value": {}}, "model_name": {"_input_type": "DropdownInput", "advanced": false, "combobox": true, "dialog_inputs": {}, "display_name": "Model Name", "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "load_from_db": false, "name": "model_name", "options": ["gpt-4o-mini", "gpt-4o", "gpt-4.5-preview", "gpt-4-turbo", "gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo"], "options_metadata": [], "placeholder": "", "real_time_refresh": false, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "gpt-4o-mini"}, "n_messages": {"_input_type": "IntInput", "advanced": true, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100}, "openai_api_base": {"_input_type": "StrInput", "advanced": true, "display_name": "OpenAI API Base", "dynamic": false, "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "openai_api_base", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending"}, "seed": {"_input_type": "IntInput", "advanced": true, "display_name": "Seed", "dynamic": false, "info": "The seed controls the reproducibility of the job.", "list": false, "list_add_label": "Add More", "name": "seed", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 1}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "You are a document assistant that has access to a vector database, can perform a vector search, and create a Google document when needed. "}, "temperature": {"_input_type": "SliderInput", "advanced": true, "display_name": "Temperature", "dynamic": false, "info": "", "max_label": "", "max_label_icon": "", "min_label": "", "min_label_icon": "", "name": "temperature", "placeholder": "", "range_spec": {"max": 1, "min": 0, "step": 0.01, "step_type": "float"}, "required": false, "show": true, "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "title_case": false, "tool_mode": false, "type": "slider", "value": 0.1}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "timeout": {"_input_type": "IntInput", "advanced": true, "display_name": "Timeout", "dynamic": false, "info": "The timeout for requests to OpenAI completion API.", "list": false, "list_add_label": "Add More", "name": "timeout", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 700}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools_metadata", "value": [{"description": "A helpful assistant with access to the following tools:", "name": "Agent", "status": true, "tags": ["Agent"]}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}}, "tool_mode": true, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "dragging": false, "id": "Agent-MUIYx", "measured": {"height": 622, "width": 320}, "position": {"x": -1592.1405697826347, "y": 2825.8778156101025}, "selected": false, "type": "genericNode"}, {"data": {"description": "Convert Data objects into Messages using any {field_name} from input data.", "display_name": "Data to Message", "id": "ParseData-nBP1u", "node": {"base_classes": ["Data", "Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Convert Data objects into Messages using any {field_name} from input data.", "display_name": "Data to Message", "documentation": "", "edited": false, "field_order": ["data", "template", "sep"], "frozen": false, "icon": "message-square", "legacy": true, "metadata": {"legacy_name": "Parse Data"}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Message", "hidden": false, "method": "parse_data", "name": "text", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}, {"allows_loop": false, "cache": true, "display_name": "Data List", "hidden": null, "method": "parse_data_as_list", "name": "data_list", "options": null, "required_inputs": null, "selected": "Data", "tool_mode": true, "types": ["Data"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    legacy = True\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"}, "data": {"_input_type": "DataInput", "advanced": false, "display_name": "Data", "dynamic": false, "info": "The data to convert to text.", "input_types": ["Data"], "list": true, "list_add_label": "Add More", "name": "data", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "other", "value": ""}, "sep": {"_input_type": "StrInput", "advanced": true, "display_name": "Separator", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sep", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "\n"}, "template": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{text}"}}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "ParseData"}, "dragging": false, "id": "ParseData-nBP1u", "measured": {"height": 342, "width": 320}, "position": {"x": -2523.6369419859648, "y": 2850.1268297389925}, "selected": false, "type": "genericNode"}, {"data": {"id": "Prompt-X7BRY", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {"template": ["relevant_context"]}, "description": "Create a prompt template with dynamic variables.", "display_name": "Prompt", "documentation": "", "edited": false, "error": null, "field_order": ["template", "tool_placeholder"], "frozen": false, "full_path": null, "icon": "prompts", "is_composition": null, "is_input": null, "is_output": null, "legacy": false, "lf_version": "1.4.1", "metadata": {}, "minimized": false, "name": "", "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Prompt Message", "hidden": false, "method": "build_prompt", "name": "prompt", "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"}, "relevant_context": {"advanced": false, "display_name": "relevant_context", "dynamic": false, "field_type": "str", "fileTypes": [], "file_path": "", "info": "", "input_types": ["Message"], "list": false, "load_from_db": false, "multiline": true, "name": "relevant_context", "placeholder": "", "required": false, "show": true, "title_case": false, "type": "str", "value": ""}, "template": {"_input_type": "PromptInput", "advanced": false, "display_name": "Template", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "prompt", "value": "You are an operations lead responsible for drafting the agenda of an executive leadership weekly meeting named \"Weekly Meeting\". Your tasks and responsibilities include but are not limited to:\n\nTasks\nPut together Meeting Agendas, Synthesize data for insights, present key takeaways, \n- Your job is to put together an agenda with major sections. Those sections are: Strategy, Escalations, Open Discussion, Metrics, FYIs\n\n- Use the information from the database, including the BOLT document, and other relevant content to extract information with keywords such as: Flag, Top Priority, Urgent, Incident, etc.\n- Use this information to synthesize then categorize it under the major sections.\n\nImportant\n- Each item should have a summary that's actionable.\n- Under Metrics, for each metric, we always want to have: Our current target, Last week's metric, and Primary Driver for growth or decline this week.\n- Do not hallucinate results. If there are no matching results for a query, respond that you cannot find results.\n\nFor each item you should include open questions and if necessary\n\nUse the below example when generating the agenda.\n<example>\nStrategy\n- Topics around how we should do business, how we should reach a new market, how we can break into a new customer \n- Topics that are centered around ideation / the need for ideas on how to solve a problem\n- Topics shared via email from chet /mala \u201cplease add to WM\u201d\n\nEscalations\n- Anything listed under \u201cRisks + Asks\u201d that does not have a clear next step or planned resolution\n- Anything that implies a customer is unhappy, or implies that we are stalled / waiting for a response from someone\n- Anything that implies we are \u201cblocked\u201d to move forward\n\nOpen Discussion\n- Anything that feels like an open question for the group (ex: \u201cwe have line of sight into a lot of OEM deals but no one to own - who should own these and what should the framework be for them?\u201d\n- Things that are in \u201cRisks + Asks\u201d that are more asks / questions for the group\n- Recurring topic week over week that doesn\u2019t have a clear resolution or progress\n- Topics that mention \u201clooking for feedback on XYZ\u201d\n\nMetrics - share target, last week, this week, and relevant commentary\n- Metrics that are flat week over week\n- Metrics that have a steep decline from last week to this week\n- Metrics that have a steep increase from last week to this week\n- Metrics that are flagged as \u201coff track\u201d or \u201cwill miss\u201d in target column\n\nFYIs\n- Launches listed in SHIP sections that are marked \u201cat risk\u201d or \u201cdeserves attention\u201d or \u201cblocked; When we include launches - we should include: \n- -  Launch date\n- - Launch status\n- - Description of why at risk\n- - Mitigation \n- - Next steps\n- Escalations that have a clear path to resolution or clear next step\n</example>\n\nRelevant Context (from vector search)\n{relevant_context}"}, "tool_placeholder": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Tool Placeholder", "dynamic": false, "info": "A placeholder input for tool mode.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "tool_placeholder", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "Prompt"}, "dragging": false, "id": "Prompt-X7BRY", "measured": {"height": 413, "width": 320}, "position": {"x": -2134.445998457919, "y": 2853.5021986666275}, "selected": false, "type": "genericNode"}, {"data": {"id": "note-Mil8i", "node": {"description": "# Start of Assistant Flow\n\n", "display_name": "", "documentation": "", "template": {"backgroundColor": "neutral"}}, "type": "note"}, "dragging": false, "id": "note-Mil8i", "measured": {"height": 324, "width": 325}, "position": {"x": -3419.707178353879, "y": 1080.5198775565088}, "selected": false, "type": "noteNode"}, {"data": {"id": "note-2PaKP", "node": {"description": "# RAG Agent\n", "display_name": "", "documentation": "", "template": {"backgroundColor": "lime"}}, "type": "note"}, "id": "note-2PaKP", "measured": {"height": 324, "width": 325}, "position": {"x": -2158.6705769305263, "y": 2570.296401401148}, "selected": false, "type": "noteNode", "dragging": false}, {"id": "OpenAIEmbeddings-xjkDU", "type": "genericNode", "position": {"x": -3312.989226241791, "y": 2404.5380011362736}, "data": {"node": {"template": {"_type": "Component", "chunk_size": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "chunk_size", "value": 1000, "display_name": "Chunk Size", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "client": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "client", "value": "", "display_name": "Client", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langchain_openai import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\", required=True),\n        MessageTextInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        MessageTextInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            client=self.client or None,\n            model=self.model,\n            dimensions=self.dimensions or None,\n            deployment=self.deployment or None,\n            api_version=self.openai_api_version or None,\n            base_url=self.openai_api_base or None,\n            openai_api_type=self.openai_api_type or None,\n            openai_proxy=self.openai_proxy or None,\n            embedding_ctx_length=self.embedding_ctx_length,\n            api_key=self.openai_api_key or None,\n            organization=self.openai_organization or None,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            max_retries=self.max_retries,\n            timeout=self.request_timeout or None,\n            tiktoken_enabled=self.tiktoken_enable,\n            tiktoken_model_name=self.tiktoken_model_name or None,\n            show_progress_bar=self.show_progress_bar,\n            model_kwargs=self.model_kwargs,\n            skip_empty=self.skip_empty,\n            default_headers=self.default_headers or None,\n            default_query=self.default_query or None,\n        )\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "default_headers": {"tool_mode": false, "trace_as_input": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "default_headers", "value": {}, "display_name": "Default Headers", "advanced": true, "dynamic": false, "info": "Default headers to use for the API request.", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "default_query": {"tool_mode": false, "trace_as_input": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "default_query", "value": {}, "display_name": "Default Query", "advanced": true, "dynamic": false, "info": "Default query parameters to use for the API request.", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "deployment": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "deployment", "value": "", "display_name": "Deployment", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "dimensions": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "dimensions", "value": "", "display_name": "Dimensions", "advanced": true, "dynamic": false, "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "embedding_ctx_length": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "embedding_ctx_length", "value": 1536, "display_name": "Embedding Context Length", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "max_retries": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_retries", "value": 3, "display_name": "Max Retries", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "model": {"tool_mode": false, "trace_as_metadata": true, "options": ["text-embedding-3-small", "text-embedding-3-large", "text-embedding-ada-002"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "model", "value": "text-embedding-3-small", "display_name": "Model", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "model_kwargs": {"tool_mode": false, "trace_as_input": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "model_kwargs", "value": {}, "display_name": "Model Kwargs", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "openai_api_base": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "openai_api_base", "value": "", "display_name": "OpenAI API Base", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "openai_api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "openai_api_key", "value": null, "display_name": "OpenAI API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "", "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "openai_api_type": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "openai_api_type", "value": "", "display_name": "OpenAI API Type", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "openai_api_version": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "openai_api_version", "value": "", "display_name": "OpenAI API Version", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "openai_organization": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "openai_organization", "value": "", "display_name": "OpenAI Organization", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "openai_proxy": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "openai_proxy", "value": "", "display_name": "OpenAI Proxy", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "request_timeout": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "request_timeout", "value": "", "display_name": "Request Timeout", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "show_progress_bar": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "show_progress_bar", "value": false, "display_name": "Show Progress Bar", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "skip_empty": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "skip_empty", "value": false, "display_name": "Skip Empty", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "tiktoken_enable": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tiktoken_enable", "value": true, "display_name": "TikToken Enable", "advanced": true, "dynamic": false, "info": "If False, you must have transformers installed.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "tiktoken_model_name": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tiktoken_model_name", "value": "", "display_name": "TikToken Model Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Generate embeddings using OpenAI models.", "icon": "OpenAI", "base_classes": ["Embeddings"], "display_name": "OpenAI Embeddings", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Embeddings"], "selected": "Embeddings", "name": "embeddings", "display_name": "Embeddings", "method": "build_embeddings", "value": "__UNDEFINED__", "cache": true, "required_inputs": ["openai_api_key"], "allows_loop": false, "tool_mode": true, "hidden": false}], "field_order": ["default_headers", "default_query", "chunk_size", "client", "deployment", "embedding_ctx_length", "max_retries", "model", "model_kwargs", "openai_api_key", "openai_api_base", "openai_api_type", "openai_api_version", "openai_organization", "openai_proxy", "request_timeout", "show_progress_bar", "skip_empty", "tiktoken_model_name", "tiktoken_enable", "dimensions"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false, "category": "embeddings", "key": "OpenAIEmbeddings", "score": 5.2003277518821525e-05, "lf_version": "1.4.1"}, "showNode": true, "type": "OpenAIEmbeddings", "id": "OpenAIEmbeddings-xjkDU"}, "selected": false, "measured": {"width": 320, "height": 312}, "dragging": false}, {"id": "AstraDB-s7MsN", "type": "genericNode", "position": {"x": -2907.6899180457, "y": 2498.7501588641035}, "data": {"node": {"template": {"_type": "Component", "embedding_model": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "embedding_model", "value": "", "display_name": "Embedding Model", "advanced": false, "input_types": ["Embeddings"], "dynamic": false, "info": "Specify the Embedding Model. Not required for Astra Vectorize collections.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "ingest_data": {"trace_as_metadata": true, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "ingest_data", "value": "", "display_name": "Ingest Data", "advanced": false, "input_types": ["Data", "DataFrame"], "dynamic": false, "info": "", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "advanced_search_filter": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "advanced_search_filter", "value": {}, "display_name": "Search Metadata Filter", "advanced": true, "dynamic": false, "info": "Optional dictionary of filters to apply to the search query.", "title_case": false, "type": "NestedDict", "_input_type": "NestedDictInput"}, "api_endpoint": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "api_endpoint", "value": "https://0cc30786-d1e6-41ae-a91e-a36d31e64920-us-east-2.apps.astra.datastax.com", "display_name": "Astra DB API Endpoint", "advanced": false, "dynamic": false, "info": "The API Endpoint for the Astra DB instance. Supercedes database selection.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "astradb_vectorstore_kwargs": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "astradb_vectorstore_kwargs", "value": {}, "display_name": "AstraDBVectorStore Parameters", "advanced": true, "dynamic": false, "info": "Optional dictionary of additional parameters for the AstraDBVectorStore.", "title_case": false, "type": "NestedDict", "_input_type": "NestedDictInput"}, "autodetect_collection": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "autodetect_collection", "value": true, "display_name": "Autodetect Collection", "advanced": true, "dynamic": false, "info": "Boolean flag to determine whether to autodetect the collection.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "import re\nfrom collections import defaultdict\nfrom dataclasses import asdict, dataclass, field\n\nfrom astrapy import DataAPIClient, Database\nfrom astrapy.data.info.reranking import RerankServiceOptions\nfrom astrapy.info import CollectionDescriptor, CollectionLexicalOptions, CollectionRerankOptions\nfrom langchain_astradb import AstraDBVectorStore, VectorServiceOptions\nfrom langchain_astradb.utils.astradb import HybridSearchMode, _AstraDBCollectionEnvironment\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.base.vectorstores.vector_store_connection_decorator import vector_store_connection\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import FloatInput, NestedDictInput\nfrom langflow.io import (\n    BoolInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    QueryInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\nfrom langflow.utils.version import get_version_info\n\n\n@vector_store_connection\nclass AstraDBVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Ingest and search documents in Astra DB\"\n    documentation: str = \"https://docs.datastax.com/en/langflow/astra-components.html\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vector_store: AstraDBVectorStore | None = None\n\n    @dataclass\n    class NewDatabaseInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"name\": \"create_database\",\n                        \"description\": \"Please allow several minutes for creation to complete.\",\n                        \"display_name\": \"Create new database\",\n                        \"field_order\": [\"01_new_database_name\", \"02_cloud_provider\", \"03_region\"],\n                        \"template\": {\n                            \"01_new_database_name\": StrInput(\n                                name=\"new_database_name\",\n                                display_name=\"Name\",\n                                info=\"Name of the new database to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"02_cloud_provider\": DropdownInput(\n                                name=\"cloud_provider\",\n                                display_name=\"Cloud provider\",\n                                info=\"Cloud provider for the new database.\",\n                                options=[],\n                                required=True,\n                                real_time_refresh=True,\n                            ),\n                            \"03_region\": DropdownInput(\n                                name=\"region\",\n                                display_name=\"Region\",\n                                info=\"Region for the new database.\",\n                                options=[],\n                                required=True,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    @dataclass\n    class NewCollectionInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"name\": \"create_collection\",\n                        \"description\": \"Please allow several seconds for creation to complete.\",\n                        \"display_name\": \"Create new collection\",\n                        \"field_order\": [\n                            \"01_new_collection_name\",\n                            \"02_embedding_generation_provider\",\n                            \"03_embedding_generation_model\",\n                            \"04_dimension\",\n                        ],\n                        \"template\": {\n                            \"01_new_collection_name\": StrInput(\n                                name=\"new_collection_name\",\n                                display_name=\"Name\",\n                                info=\"Name of the new collection to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"02_embedding_generation_provider\": DropdownInput(\n                                name=\"embedding_generation_provider\",\n                                display_name=\"Embedding generation method\",\n                                info=\"Provider to use for generating embeddings.\",\n                                helper_text=(\n                                    \"To create collections with more embedding provider options, go to \"\n                                    '<a class=\"underline\" href=\"https://astra.datastax.com/\" target=\" _blank\" '\n                                    'rel=\"noopener noreferrer\">your database in Astra DB</a>'\n                                ),\n                                real_time_refresh=True,\n                                required=True,\n                                options=[],\n                            ),\n                            \"03_embedding_generation_model\": DropdownInput(\n                                name=\"embedding_generation_model\",\n                                display_name=\"Embedding model\",\n                                info=\"Model to use for generating embeddings.\",\n                                real_time_refresh=True,\n                                options=[],\n                            ),\n                            \"04_dimension\": IntInput(\n                                name=\"dimension\",\n                                display_name=\"Dimensions\",\n                                info=\"Dimensions of the embeddings to generate.\",\n                                value=None,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        DropdownInput(\n            name=\"environment\",\n            display_name=\"Environment\",\n            info=\"The environment for the Astra DB API Endpoint.\",\n            options=[\"prod\", \"test\", \"dev\"],\n            value=\"prod\",\n            advanced=True,\n            real_time_refresh=True,\n            combobox=True,\n        ),\n        DropdownInput(\n            name=\"database_name\",\n            display_name=\"Database\",\n            info=\"The Database name for the Astra DB instance.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            dialog_inputs=asdict(NewDatabaseInput()),\n            combobox=True,\n        ),\n        StrInput(\n            name=\"api_endpoint\",\n            display_name=\"Astra DB API Endpoint\",\n            info=\"The API Endpoint for the Astra DB instance. Supercedes database selection.\",\n            show=False,\n        ),\n        DropdownInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n            options=[],\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"collection_name\",\n            display_name=\"Collection\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            dialog_inputs=asdict(NewCollectionInput()),\n            combobox=True,\n            show=False,\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Specify the Embedding Model. Not required for Astra Vectorize collections.\",\n            required=False,\n            show=False,\n        ),\n        *LCVectorStoreComponent.inputs,\n        DropdownInput(\n            name=\"search_method\",\n            display_name=\"Search Method\",\n            info=(\n                \"Determine how your content is matched: Vector finds semantic similarity, \"\n                \"and Hybrid Search (suggested) combines both approaches \"\n                \"with a reranker.\"\n            ),\n            options=[\"Hybrid Search\", \"Vector Search\"],  # TODO: Restore Lexical Search?\n            options_metadata=[{\"icon\": \"SearchHybrid\"}, {\"icon\": \"SearchVector\"}],\n            value=\"Vector Search\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"reranker\",\n            display_name=\"Reranker\",\n            info=\"Post-retrieval model that re-scores results for optimal relevance ranking.\",\n            show=False,\n            toggle=True,\n        ),\n        QueryInput(\n            name=\"lexical_terms\",\n            display_name=\"Lexical Terms\",\n            info=\"Add additional terms/keywords to augment search precision.\",\n            placeholder=\"Enter terms to search...\",\n            separator=\" \",\n            show=False,\n            value=\"\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Search Results\",\n            info=\"Number of search results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"advanced_search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"autodetect_collection\",\n            display_name=\"Autodetect Collection\",\n            info=\"Boolean flag to determine whether to autodetect the collection.\",\n            advanced=True,\n            value=True,\n        ),\n        StrInput(\n            name=\"content_field\",\n            display_name=\"Content Field\",\n            info=\"Field to use as the text content field for the vector store.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"deletion_field\",\n            display_name=\"Deletion Based On Field\",\n            info=\"When this parameter is provided, documents in the target collection with \"\n            \"metadata field values matching the input metadata field value will be deleted \"\n            \"before new data is loaded.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"ignore_invalid_documents\",\n            display_name=\"Ignore Invalid Documents\",\n            info=\"Boolean flag to determine whether to ignore invalid documents at runtime.\",\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"astradb_vectorstore_kwargs\",\n            display_name=\"AstraDBVectorStore Parameters\",\n            info=\"Optional dictionary of additional parameters for the AstraDBVectorStore.\",\n            advanced=True,\n        ),\n    ]\n\n    @classmethod\n    def map_cloud_providers(cls):\n        # TODO: Programmatically fetch the regions for each cloud provider\n        return {\n            \"dev\": {\n                \"Amazon Web Services\": {\n                    \"id\": \"aws\",\n                    \"regions\": [\"us-west-2\"],\n                },\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-central1\", \"europe-west4\"],\n                },\n            },\n            \"test\": {\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-central1\"],\n                },\n            },\n            \"prod\": {\n                \"Amazon Web Services\": {\n                    \"id\": \"aws\",\n                    \"regions\": [\"us-east-2\", \"ap-south-1\", \"eu-west-1\"],\n                },\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-east1\"],\n                },\n                \"Microsoft Azure\": {\n                    \"id\": \"azure\",\n                    \"regions\": [\"westus3\"],\n                },\n            },\n        }\n\n    @classmethod\n    def get_vectorize_providers(cls, token: str, environment: str | None = None, api_endpoint: str | None = None):\n        try:\n            # Get the admin object\n            client = DataAPIClient(environment=environment)\n            admin_client = client.get_admin()\n            db_admin = admin_client.get_database_admin(api_endpoint, token=token)\n\n            # Get the list of embedding providers\n            embedding_providers = db_admin.find_embedding_providers()\n\n            vectorize_providers_mapping = {}\n            # Map the provider display name to the provider key and models\n            for provider_key, provider_data in embedding_providers.embedding_providers.items():\n                # Get the provider display name and models\n                display_name = provider_data.display_name\n                models = [model.name for model in provider_data.models]\n\n                # Build our mapping\n                vectorize_providers_mapping[display_name] = [provider_key, models]\n\n            # Sort the resulting dictionary\n            return defaultdict(list, dict(sorted(vectorize_providers_mapping.items())))\n        except Exception as _:  # noqa: BLE001\n            return {}\n\n    @classmethod\n    async def create_database_api(\n        cls,\n        new_database_name: str,\n        cloud_provider: str,\n        region: str,\n        token: str,\n        environment: str | None = None,\n        keyspace: str | None = None,\n    ):\n        client = DataAPIClient(environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the environment, set to prod if null like\n        my_env = environment or \"prod\"\n\n        # Raise a value error if name isn't provided\n        if not new_database_name:\n            msg = \"Database name is required to create a new database.\"\n            raise ValueError(msg)\n\n        # Call the create database function\n        return await admin_client.async_create_database(\n            name=new_database_name,\n            cloud_provider=cls.map_cloud_providers()[my_env][cloud_provider][\"id\"],\n            region=region,\n            keyspace=keyspace,\n            wait_until_active=False,\n        )\n\n    @classmethod\n    async def create_collection_api(\n        cls,\n        new_collection_name: str,\n        token: str,\n        api_endpoint: str,\n        environment: str | None = None,\n        keyspace: str | None = None,\n        dimension: int | None = None,\n        embedding_generation_provider: str | None = None,\n        embedding_generation_model: str | None = None,\n        reranker: str | None = None,\n    ):\n        # Build vectorize options, if needed\n        vectorize_options = None\n        if not dimension:\n            providers = cls.get_vectorize_providers(token=token, environment=environment, api_endpoint=api_endpoint)\n            vectorize_options = VectorServiceOptions(\n                provider=providers.get(embedding_generation_provider, [None, []])[0],\n                model_name=embedding_generation_model,\n            )\n\n        # Raise a value error if name isn't provided\n        if not new_collection_name:\n            msg = \"Collection name is required to create a new collection.\"\n            raise ValueError(msg)\n\n        # Define the base arguments being passed to the create collection function\n        base_args = {\n            \"collection_name\": new_collection_name,\n            \"token\": token,\n            \"api_endpoint\": api_endpoint,\n            \"keyspace\": keyspace,\n            \"environment\": environment,\n            \"embedding_dimension\": dimension,\n            \"collection_vector_service_options\": vectorize_options,\n        }\n\n        # Add optional arguments only if environment is \"dev\"\n        if environment == \"dev\" and reranker:  # TODO: Remove conditional check soon\n            # Split the reranker field into a provider a model name\n            provider, _ = reranker.split(\"/\")\n            base_args[\"collection_rerank\"] = CollectionRerankOptions(\n                service=RerankServiceOptions(provider=provider, model_name=reranker),\n            )\n            base_args[\"collection_lexical\"] = CollectionLexicalOptions(analyzer=\"STANDARD\")\n\n        _AstraDBCollectionEnvironment(**base_args)\n\n    @classmethod\n    def get_database_list_static(cls, token: str, environment: str | None = None):\n        client = DataAPIClient(environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the list of databases\n        db_list = admin_client.list_databases()\n\n        # Generate the api endpoint for each database\n        db_info_dict = {}\n        for db in db_list:\n            try:\n                # Get the API endpoint for the database\n                api_endpoint = db.regions[0].api_endpoint\n\n                # Get the number of collections\n                try:\n                    # Get the number of collections in the database\n                    num_collections = len(\n                        client.get_database(\n                            api_endpoint,\n                            token=token,\n                        ).list_collection_names()\n                    )\n                except Exception:  # noqa: BLE001\n                    if db.status != \"PENDING\":\n                        continue\n                    num_collections = 0\n\n                # Add the database to the dictionary\n                db_info_dict[db.name] = {\n                    \"api_endpoint\": api_endpoint,\n                    \"keyspaces\": db.keyspaces,\n                    \"collections\": num_collections,\n                    \"status\": db.status if db.status != \"ACTIVE\" else None,\n                    \"org_id\": db.org_id if db.org_id else None,\n                }\n            except Exception:  # noqa: BLE001, S110\n                pass\n\n        return db_info_dict\n\n    def get_database_list(self):\n        return self.get_database_list_static(\n            token=self.token,\n            environment=self.environment,\n        )\n\n    @classmethod\n    def get_api_endpoint_static(\n        cls,\n        token: str,\n        environment: str | None = None,\n        api_endpoint: str | None = None,\n        database_name: str | None = None,\n    ):\n        # If the api_endpoint is set, return it\n        if api_endpoint:\n            return api_endpoint\n\n        # Check if the database_name is like a url\n        if database_name and database_name.startswith(\"https://\"):\n            return database_name\n\n        # If the database is not set, nothing we can do.\n        if not database_name:\n            return None\n\n        # Grab the database object\n        db = cls.get_database_list_static(token=token, environment=environment).get(database_name)\n        if not db:\n            return None\n\n        # Otherwise, get the URL from the database list\n        return db.get(\"api_endpoint\")\n\n    def get_api_endpoint(self):\n        return self.get_api_endpoint_static(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=self.api_endpoint,\n            database_name=self.database_name,\n        )\n\n    @classmethod\n    def get_database_id_static(cls, api_endpoint: str) -> str | None:\n        # Pattern matches standard UUID format: 8-4-4-4-12 hexadecimal characters\n        uuid_pattern = r\"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\"\n        match = re.search(uuid_pattern, api_endpoint)\n\n        return match.group(0) if match else None\n\n    def get_database_id(self):\n        return self.get_database_id_static(api_endpoint=self.get_api_endpoint())\n\n    def get_keyspace(self):\n        keyspace = self.keyspace\n\n        if keyspace:\n            return keyspace.strip()\n\n        return \"default_keyspace\"\n\n    def get_database_object(self, api_endpoint: str | None = None):\n        try:\n            client = DataAPIClient(environment=self.environment)\n\n            return client.get_database(\n                api_endpoint or self.get_api_endpoint(),\n                token=self.token,\n                keyspace=self.get_keyspace(),\n            )\n        except Exception as e:\n            msg = f\"Error fetching database object: {e}\"\n            raise ValueError(msg) from e\n\n    def collection_data(self, collection_name: str, database: Database | None = None):\n        try:\n            if not database:\n                client = DataAPIClient(environment=self.environment)\n\n                database = client.get_database(\n                    self.get_api_endpoint(),\n                    token=self.token,\n                    keyspace=self.get_keyspace(),\n                )\n\n            collection = database.get_collection(collection_name)\n\n            return collection.estimated_document_count()\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error checking collection data: {e}\")\n\n            return None\n\n    def _initialize_database_options(self):\n        try:\n            return [\n                {\n                    \"name\": name,\n                    \"status\": info[\"status\"],\n                    \"collections\": info[\"collections\"],\n                    \"api_endpoint\": info[\"api_endpoint\"],\n                    \"keyspaces\": info[\"keyspaces\"],\n                    \"org_id\": info[\"org_id\"],\n                }\n                for name, info in self.get_database_list().items()\n            ]\n        except Exception as e:\n            msg = f\"Error fetching database options: {e}\"\n            raise ValueError(msg) from e\n\n    @classmethod\n    def get_provider_icon(cls, collection: CollectionDescriptor | None = None, provider_name: str | None = None) -> str:\n        # Get the provider name from the collection\n        provider_name = provider_name or (\n            collection.definition.vector.service.provider\n            if (\n                collection\n                and collection.definition\n                and collection.definition.vector\n                and collection.definition.vector.service\n            )\n            else None\n        )\n\n        # If there is no provider, use the vector store icon\n        if not provider_name or provider_name.lower() == \"bring your own\":\n            return \"vectorstores\"\n\n        # Map provider casings\n        case_map = {\n            \"nvidia\": \"NVIDIA\",\n            \"openai\": \"OpenAI\",\n            \"amazon bedrock\": \"AmazonBedrockEmbeddings\",\n            \"azure openai\": \"AzureOpenAiEmbeddings\",\n            \"cohere\": \"Cohere\",\n            \"jina ai\": \"JinaAI\",\n            \"mistral ai\": \"MistralAI\",\n            \"upstage\": \"Upstage\",\n            \"voyage ai\": \"VoyageAI\",\n        }\n\n        # Adjust the casing on some like nvidia\n        return case_map[provider_name.lower()] if provider_name.lower() in case_map else provider_name.title()\n\n    def _initialize_collection_options(self, api_endpoint: str | None = None):\n        # Nothing to generate if we don't have an API endpoint yet\n        api_endpoint = api_endpoint or self.get_api_endpoint()\n        if not api_endpoint:\n            return []\n\n        # Retrieve the database object\n        database = self.get_database_object(api_endpoint=api_endpoint)\n\n        # Get the list of collections\n        collection_list = database.list_collections(keyspace=self.get_keyspace())\n\n        # Return the list of collections and metadata associated\n        return [\n            {\n                \"name\": col.name,\n                \"records\": self.collection_data(collection_name=col.name, database=database),\n                \"provider\": (\n                    col.definition.vector.service.provider\n                    if col.definition.vector and col.definition.vector.service\n                    else None\n                ),\n                \"icon\": self.get_provider_icon(collection=col),\n                \"model\": (\n                    col.definition.vector.service.model_name\n                    if col.definition.vector and col.definition.vector.service\n                    else None\n                ),\n            }\n            for col in collection_list\n        ]\n\n    def reset_provider_options(self, build_config: dict) -> dict:\n        \"\"\"Reset provider options and related configurations in the build_config dictionary.\"\"\"\n        # Extract template path for cleaner access\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n\n        # Get vectorize providers\n        vectorize_providers_api = self.get_vectorize_providers(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=build_config[\"api_endpoint\"][\"value\"],\n        )\n\n        # Create a new dictionary with \"Bring your own\" first\n        vectorize_providers: dict[str, list[list[str]]] = {\"Bring your own\": [[], []]}\n\n        # Add the remaining items (only Nvidia) from the original dictionary\n        vectorize_providers.update(\n            {\n                k: v\n                for k, v in vectorize_providers_api.items()\n                if k.lower() in [\"nvidia\"]  # TODO: Eventually support more\n            }\n        )\n\n        # Set provider options\n        provider_field = \"02_embedding_generation_provider\"\n        template[provider_field][\"options\"] = list(vectorize_providers.keys())\n\n        # Add metadata for each provider option\n        template[provider_field][\"options_metadata\"] = [\n            {\"icon\": self.get_provider_icon(provider_name=provider)} for provider in template[provider_field][\"options\"]\n        ]\n\n        # Get selected embedding provider\n        embedding_provider = template[provider_field][\"value\"]\n        is_bring_your_own = embedding_provider and embedding_provider == \"Bring your own\"\n\n        # Configure embedding model field\n        model_field = \"03_embedding_generation_model\"\n        template[model_field].update(\n            {\n                \"options\": vectorize_providers.get(embedding_provider, [[], []])[1],\n                \"placeholder\": \"Bring your own\" if is_bring_your_own else None,\n                \"readonly\": is_bring_your_own,\n                \"required\": not is_bring_your_own,\n                \"value\": None,\n            }\n        )\n\n        # If this is a bring your own, set dimensions to 0\n        return self.reset_dimension_field(build_config)\n\n    def reset_dimension_field(self, build_config: dict) -> dict:\n        \"\"\"Reset dimension field options based on provided configuration.\"\"\"\n        # Extract template path for cleaner access\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n\n        # Get selected embedding model\n        provider_field = \"02_embedding_generation_provider\"\n        embedding_provider = template[provider_field][\"value\"]\n        is_bring_your_own = embedding_provider and embedding_provider == \"Bring your own\"\n\n        # Configure dimension field\n        dimension_field = \"04_dimension\"\n        dimension_value = 1024 if not is_bring_your_own else None  # TODO: Dynamically figure this out\n        template[dimension_field].update(\n            {\n                \"placeholder\": dimension_value,\n                \"value\": dimension_value,\n                \"readonly\": not is_bring_your_own,\n                \"required\": is_bring_your_own,\n            }\n        )\n\n        return build_config\n\n    def reset_collection_list(self, build_config: dict) -> dict:\n        \"\"\"Reset collection list options based on provided configuration.\"\"\"\n        # Get collection options\n        collection_options = self._initialize_collection_options(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        # Update collection configuration\n        collection_config = build_config[\"collection_name\"]\n        collection_config.update(\n            {\n                \"options\": [col[\"name\"] for col in collection_options],\n                \"options_metadata\": [{k: v for k, v in col.items() if k != \"name\"} for col in collection_options],\n            }\n        )\n\n        # Reset selected collection if not in options\n        if collection_config[\"value\"] not in collection_config[\"options\"]:\n            collection_config[\"value\"] = \"\"\n\n        # Set advanced status based on database selection\n        collection_config[\"show\"] = bool(build_config[\"database_name\"][\"value\"])\n\n        return build_config\n\n    def reset_database_list(self, build_config: dict) -> dict:\n        \"\"\"Reset database list options and related configurations.\"\"\"\n        # Get database options\n        database_options = self._initialize_database_options()\n\n        # Update cloud provider options\n        env = self.environment\n        template = build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"02_cloud_provider\"][\"options\"] = list(self.map_cloud_providers()[env].keys())\n\n        # Update database configuration\n        database_config = build_config[\"database_name\"]\n        database_config.update(\n            {\n                \"options\": [db[\"name\"] for db in database_options],\n                \"options_metadata\": [{k: v for k, v in db.items() if k != \"name\"} for db in database_options],\n            }\n        )\n\n        # Reset selections if value not in options\n        if database_config[\"value\"] not in database_config[\"options\"]:\n            database_config[\"value\"] = \"\"\n            build_config[\"api_endpoint\"][\"value\"] = \"\"\n            build_config[\"collection_name\"][\"show\"] = False\n\n        # Set advanced status based on token presence\n        database_config[\"show\"] = bool(build_config[\"token\"][\"value\"])\n\n        return build_config\n\n    def reset_build_config(self, build_config: dict) -> dict:\n        \"\"\"Reset all build configuration options to default empty state.\"\"\"\n        # Reset database configuration\n        database_config = build_config[\"database_name\"]\n        database_config.update({\"options\": [], \"options_metadata\": [], \"value\": \"\", \"show\": False})\n        build_config[\"api_endpoint\"][\"value\"] = \"\"\n\n        # Reset collection configuration\n        collection_config = build_config[\"collection_name\"]\n        collection_config.update({\"options\": [], \"options_metadata\": [], \"value\": \"\", \"show\": False})\n\n        return build_config\n\n    def _handle_hybrid_search_options(self, build_config: dict) -> dict:\n        \"\"\"Set hybrid search options in the build configuration.\"\"\"\n        # Detect what hybrid options are available\n        # Get the admin object\n        client = DataAPIClient(environment=self.environment)\n        admin_client = client.get_admin()\n        db_admin = admin_client.get_database_admin(self.get_api_endpoint(), token=self.token)\n\n        # We will try to get the reranking providers to see if its hybrid emabled\n        try:\n            providers = db_admin.find_reranking_providers()\n            build_config[\"reranker\"][\"options\"] = [\n                model.name for provider_data in providers.reranking_providers.values() for model in provider_data.models\n            ]\n            build_config[\"reranker\"][\"options_metadata\"] = [\n                {\"icon\": self.get_provider_icon(provider_name=model.name.split(\"/\")[0])}\n                for provider in providers.reranking_providers.values()\n                for model in provider.models\n            ]\n            build_config[\"reranker\"][\"value\"] = build_config[\"reranker\"][\"options\"][0]\n\n            # Set the default search field to hybrid search\n            build_config[\"search_method\"][\"show\"] = True\n            build_config[\"search_method\"][\"options\"] = [\"Hybrid Search\", \"Vector Search\"]\n            build_config[\"search_method\"][\"value\"] = \"Hybrid Search\"\n        except Exception as _:  # noqa: BLE001\n            build_config[\"reranker\"][\"options\"] = []\n            build_config[\"reranker\"][\"options_metadata\"] = []\n\n            # Set the default search field to vector search\n            build_config[\"search_method\"][\"show\"] = False\n            build_config[\"search_method\"][\"options\"] = [\"Vector Search\"]\n            build_config[\"search_method\"][\"value\"] = \"Vector Search\"\n\n        # Set reranker and lexical terms options based on search method\n        build_config[\"reranker\"][\"toggle_value\"] = True\n        build_config[\"reranker\"][\"show\"] = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n        build_config[\"reranker\"][\"toggle_disable\"] = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n        if build_config[\"reranker\"][\"show\"]:\n            build_config[\"search_type\"][\"value\"] = \"Similarity\"\n\n        return build_config\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Update build configuration based on field name and value.\"\"\"\n        # Early return if no token provided\n        if not self.token:\n            return self.reset_build_config(build_config)\n\n        # Database creation callback\n        if field_name == \"database_name\" and isinstance(field_value, dict):\n            if \"01_new_database_name\" in field_value:\n                await self._create_new_database(build_config, field_value)\n                return self.reset_collection_list(build_config)\n            return self._update_cloud_regions(build_config, field_value)\n\n        # Collection creation callback\n        if field_name == \"collection_name\" and isinstance(field_value, dict):\n            # Case 1: New collection creation\n            if \"01_new_collection_name\" in field_value:\n                await self._create_new_collection(build_config, field_value)\n                return build_config\n\n            # Case 2: Update embedding provider options\n            if \"02_embedding_generation_provider\" in field_value:\n                return self.reset_provider_options(build_config)\n\n            # Case 3: Update dimension field\n            if \"03_embedding_generation_model\" in field_value:\n                return self.reset_dimension_field(build_config)\n\n        # Initial execution or token/environment change\n        first_run = field_name == \"collection_name\" and not field_value and not build_config[\"database_name\"][\"options\"]\n        if first_run or field_name in {\"token\", \"environment\"}:\n            return self.reset_database_list(build_config)\n\n        # Database selection change\n        if field_name == \"database_name\" and not isinstance(field_value, dict):\n            return self._handle_database_selection(build_config, field_value)\n\n        # Keyspace selection change\n        if field_name == \"keyspace\":\n            return self.reset_collection_list(build_config)\n\n        # Collection selection change\n        if field_name == \"collection_name\" and not isinstance(field_value, dict):\n            return self._handle_collection_selection(build_config, field_value)\n\n        # Search method selection change\n        if field_name == \"search_method\":\n            is_vector_search = field_value == \"Vector Search\"\n            is_autodetect = build_config[\"autodetect_collection\"][\"value\"]\n\n            # Configure lexical terms (same for both cases)\n            build_config[\"lexical_terms\"][\"show\"] = not is_vector_search\n            build_config[\"lexical_terms\"][\"value\"] = \"\" if is_vector_search else build_config[\"lexical_terms\"][\"value\"]\n\n            # Disable reranker disabling if hybrid search is selected\n            build_config[\"reranker\"][\"toggle_disable\"] = not is_vector_search\n            build_config[\"reranker\"][\"toggle_value\"] = True\n            build_config[\"reranker\"][\"value\"] = build_config[\"reranker\"][\"options\"][0]\n\n            # Toggle search type and score threshold based on search method\n            build_config[\"search_type\"][\"show\"] = is_vector_search\n            build_config[\"search_score_threshold\"][\"show\"] = is_vector_search\n\n            # Make sure the search_type is set to \"Similarity\"\n            if not is_vector_search or is_autodetect:\n                build_config[\"search_type\"][\"value\"] = \"Similarity\"\n\n        return build_config\n\n    async def _create_new_database(self, build_config: dict, field_value: dict) -> None:\n        \"\"\"Create a new database and update build config options.\"\"\"\n        try:\n            await self.create_database_api(\n                new_database_name=field_value[\"01_new_database_name\"],\n                token=self.token,\n                keyspace=self.get_keyspace(),\n                environment=self.environment,\n                cloud_provider=field_value[\"02_cloud_provider\"],\n                region=field_value[\"03_region\"],\n            )\n        except Exception as e:\n            msg = f\"Error creating database: {e}\"\n            raise ValueError(msg) from e\n\n        build_config[\"database_name\"][\"options\"].append(field_value[\"01_new_database_name\"])\n        build_config[\"database_name\"][\"options_metadata\"].append(\n            {\n                \"status\": \"PENDING\",\n                \"collections\": 0,\n                \"api_endpoint\": None,\n                \"keyspaces\": [self.get_keyspace()],\n                \"org_id\": None,\n            }\n        )\n\n    def _update_cloud_regions(self, build_config: dict, field_value: dict) -> dict:\n        \"\"\"Update cloud provider regions in build config.\"\"\"\n        env = self.environment\n        cloud_provider = field_value[\"02_cloud_provider\"]\n\n        # Update the region options based on the selected cloud provider\n        template = build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"03_region\"][\"options\"] = self.map_cloud_providers()[env][cloud_provider][\"regions\"]\n\n        # Reset the the 03_region value if it's not in the new options\n        if template[\"03_region\"][\"value\"] not in template[\"03_region\"][\"options\"]:\n            template[\"03_region\"][\"value\"] = None\n\n        return build_config\n\n    async def _create_new_collection(self, build_config: dict, field_value: dict) -> None:\n        \"\"\"Create a new collection and update build config options.\"\"\"\n        embedding_provider = field_value.get(\"02_embedding_generation_provider\")\n        try:\n            await self.create_collection_api(\n                new_collection_name=field_value[\"01_new_collection_name\"],\n                token=self.token,\n                api_endpoint=build_config[\"api_endpoint\"][\"value\"],\n                environment=self.environment,\n                keyspace=self.get_keyspace(),\n                dimension=field_value.get(\"04_dimension\") if embedding_provider == \"Bring your own\" else None,\n                embedding_generation_provider=embedding_provider,\n                embedding_generation_model=field_value.get(\"03_embedding_generation_model\"),\n                reranker=self.reranker,\n            )\n        except Exception as e:\n            msg = f\"Error creating collection: {e}\"\n            raise ValueError(msg) from e\n\n        provider = embedding_provider.lower() if embedding_provider and embedding_provider != \"Bring your own\" else None\n        build_config[\"collection_name\"].update(\n            {\n                \"value\": field_value[\"01_new_collection_name\"],\n                \"options\": build_config[\"collection_name\"][\"options\"] + [field_value[\"01_new_collection_name\"]],\n            }\n        )\n        build_config[\"embedding_model\"][\"show\"] = not bool(provider)\n        build_config[\"embedding_model\"][\"required\"] = not bool(provider)\n        build_config[\"collection_name\"][\"options_metadata\"].append(\n            {\n                \"records\": 0,\n                \"provider\": provider,\n                \"icon\": self.get_provider_icon(provider_name=provider),\n                \"model\": field_value.get(\"03_embedding_generation_model\"),\n            }\n        )\n\n        # Make sure we always show the reranker options if the collection is hybrid enabled\n        # And right now they always are\n        build_config[\"lexical_terms\"][\"show\"] = True\n\n    def _handle_database_selection(self, build_config: dict, field_value: str) -> dict:\n        \"\"\"Handle database selection and update related configurations.\"\"\"\n        build_config = self.reset_database_list(build_config)\n\n        # Reset collection list if database selection changes\n        if field_value not in build_config[\"database_name\"][\"options\"]:\n            build_config[\"database_name\"][\"value\"] = \"\"\n            return build_config\n\n        # Get the api endpoint for the selected database\n        index = build_config[\"database_name\"][\"options\"].index(field_value)\n        build_config[\"api_endpoint\"][\"value\"] = build_config[\"database_name\"][\"options_metadata\"][index][\"api_endpoint\"]\n\n        # Get the org_id for the selected database\n        org_id = build_config[\"database_name\"][\"options_metadata\"][index][\"org_id\"]\n        if not org_id:\n            return build_config\n\n        # Update the list of keyspaces based on the db info\n        build_config[\"keyspace\"][\"options\"] = build_config[\"database_name\"][\"options_metadata\"][index][\"keyspaces\"]\n        build_config[\"keyspace\"][\"value\"] = (\n            build_config[\"keyspace\"][\"options\"] and build_config[\"keyspace\"][\"options\"][0]\n            if build_config[\"keyspace\"][\"value\"] not in build_config[\"keyspace\"][\"options\"]\n            else build_config[\"keyspace\"][\"value\"]\n        )\n\n        # Get the database id for the selected database\n        db_id = self.get_database_id_static(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        keyspace = self.get_keyspace()\n\n        # Update the helper text for the embedding provider field\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"02_embedding_generation_provider\"][\"helper_text\"] = (\n            \"To create collections with more embedding provider options, go to \"\n            f'<a class=\"underline\" target=\"_blank\" rel=\"noopener noreferrer\" '\n            f'href=\"https://astra.datastax.com/org/{org_id}/database/{db_id}/data-explorer?createCollection=1&namespace={keyspace}\">'\n            \"your database in Astra DB</a>.\"\n        )\n\n        # Reset provider options\n        build_config = self.reset_provider_options(build_config)\n\n        # Handle hybrid search options\n        build_config = self._handle_hybrid_search_options(build_config)\n\n        return self.reset_collection_list(build_config)\n\n    def _handle_collection_selection(self, build_config: dict, field_value: str) -> dict:\n        \"\"\"Handle collection selection and update embedding options.\"\"\"\n        build_config[\"autodetect_collection\"][\"value\"] = True\n        build_config = self.reset_collection_list(build_config)\n\n        # Reset embedding model if collection selection changes\n        if field_value and field_value not in build_config[\"collection_name\"][\"options\"]:\n            build_config[\"collection_name\"][\"options\"].append(field_value)\n            build_config[\"collection_name\"][\"options_metadata\"].append(\n                {\n                    \"records\": 0,\n                    \"provider\": None,\n                    \"icon\": \"vectorstores\",\n                    \"model\": None,\n                }\n            )\n            build_config[\"autodetect_collection\"][\"value\"] = False\n\n        if not field_value:\n            return build_config\n\n        # Get the selected collection index\n        index = build_config[\"collection_name\"][\"options\"].index(field_value)\n\n        # Set the provider of the selected collection\n        provider = build_config[\"collection_name\"][\"options_metadata\"][index][\"provider\"]\n        build_config[\"embedding_model\"][\"show\"] = not bool(provider)\n        build_config[\"embedding_model\"][\"required\"] = not bool(provider)\n\n        # Grab the collection object\n        database = self.get_database_object(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        collection = database.get_collection(\n            name=field_value,\n            keyspace=build_config[\"keyspace\"][\"value\"],\n        )\n\n        # Check if hybrid and lexical are enabled\n        col_options = collection.options()\n        hyb_enabled = col_options.rerank and col_options.rerank.enabled\n        lex_enabled = col_options.lexical and col_options.lexical.enabled\n        user_hyb_enabled = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n\n        # Show lexical terms if the collection is hybrid enabled\n        build_config[\"lexical_terms\"][\"show\"] = hyb_enabled and lex_enabled and user_hyb_enabled\n\n        return build_config\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        # Get the embedding model and additional params\n        embedding_params = {\"embedding\": self.embedding_model} if self.embedding_model else {}\n\n        # Get the additional parameters\n        additional_params = self.astradb_vectorstore_kwargs or {}\n\n        # Get Langflow version and platform information\n        __version__ = get_version_info()[\"version\"]\n        langflow_prefix = \"\"\n        # if os.getenv(\"AWS_EXECUTION_ENV\") == \"AWS_ECS_FARGATE\":  # TODO: More precise way of detecting\n        #     langflow_prefix = \"ds-\"\n\n        # Get the database object\n        database = self.get_database_object()\n        autodetect = self.collection_name in database.list_collection_names() and self.autodetect_collection\n\n        # Bundle up the auto-detect parameters\n        autodetect_params = {\n            \"autodetect_collection\": autodetect,\n            \"content_field\": (\n                self.content_field\n                if self.content_field and embedding_params\n                else (\n                    \"page_content\"\n                    if embedding_params\n                    and self.collection_data(collection_name=self.collection_name, database=database) == 0\n                    else None\n                )\n            ),\n            \"ignore_invalid_documents\": self.ignore_invalid_documents,\n        }\n\n        # Choose HybridSearchMode based on the selected param\n        hybrid_search_mode = HybridSearchMode.DEFAULT if self.search_method == \"Hybrid Search\" else HybridSearchMode.OFF\n\n        # Attempt to build the Vector Store object\n        try:\n            vector_store = AstraDBVectorStore(\n                # Astra DB Authentication Parameters\n                token=self.token,\n                api_endpoint=database.api_endpoint,\n                namespace=database.keyspace,\n                collection_name=self.collection_name,\n                environment=self.environment,\n                # Hybrid Search Parameters\n                hybrid_search=hybrid_search_mode,\n                # Astra DB Usage Tracking Parameters\n                ext_callers=[(f\"{langflow_prefix}langflow\", __version__)],\n                # Astra DB Vector Store Parameters\n                **autodetect_params,\n                **embedding_params,\n                **additional_params,\n            )\n        except Exception as e:\n            msg = f\"Error initializing AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        # Add documents to the vector store\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        self.ingest_data = self._prepare_ingest_data()\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.deletion_field:\n            self.log(f\"Deleting documents where {self.deletion_field}\")\n            try:\n                database = self.get_database_object()\n                collection = database.get_collection(self.collection_name, keyspace=database.keyspace)\n                delete_values = list({doc.metadata[self.deletion_field] for doc in documents})\n                self.log(f\"Deleting documents where {self.deletion_field} matches {delete_values}.\")\n                collection.delete_many({f\"metadata.{self.deletion_field}\": {\"$in\": delete_values}})\n            except Exception as e:\n                msg = f\"Error deleting documents from AstraDBVectorStore based on '{self.deletion_field}': {e}\"\n                raise ValueError(msg) from e\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        search_type_mapping = {\n            \"Similarity with score threshold\": \"similarity_score_threshold\",\n            \"MMR (Max Marginal Relevance)\": \"mmr\",\n        }\n\n        return search_type_mapping.get(self.search_type, \"similarity\")\n\n    def _build_search_args(self):\n        # Clean up the search query\n        query = self.search_query if isinstance(self.search_query, str) and self.search_query.strip() else None\n        lexical_terms = self.lexical_terms or None\n\n        # Check if we have a search query, and if so set the args\n        if query:\n            args = {\n                \"query\": query,\n                \"search_type\": self._map_search_type(),\n                \"k\": self.number_of_results,\n                \"score_threshold\": self.search_score_threshold,\n                \"lexical_query\": lexical_terms,\n            }\n        elif self.advanced_search_filter:\n            args = {\n                \"n\": self.number_of_results,\n            }\n        else:\n            return {}\n\n        filter_arg = self.advanced_search_filter or {}\n        if filter_arg:\n            args[\"filter\"] = filter_arg\n\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        vector_store = vector_store or self.build_vector_store()\n\n        self.log(f\"Search input: {self.search_query}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n        self.log(f\"store.hybrid_search: {vector_store.hybrid_search}\")\n        self.log(f\"Lexical terms: {self.lexical_terms}\")\n        self.log(f\"Reranker: {self.reranker}\")\n\n        try:\n            search_args = self._build_search_args()\n        except Exception as e:\n            msg = f\"Error in AstraDBVectorStore._build_search_args: {e}\"\n            raise ValueError(msg) from e\n\n        if not search_args:\n            self.log(\"No search input or filters provided. Skipping search.\")\n            return []\n\n        docs = []\n        search_method = \"search\" if \"query\" in search_args else \"metadata_search\"\n\n        try:\n            self.log(f\"Calling vector_store.{search_method} with args: {search_args}\")\n            docs = getattr(vector_store, search_method)(**search_args)\n        except Exception as e:\n            msg = f\"Error performing {search_method} in AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Retrieved documents: {len(docs)}\")\n\n        data = docs_to_data(docs)\n        self.log(f\"Converted documents to data: {len(data)}\")\n        self.status = data\n\n        return data\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "collection_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["co_text_ai_coll"], "options_metadata": [{"records": 0, "provider": null, "icon": "vectorstores", "model": null}], "combobox": true, "dialog_inputs": {"functionality": "create", "fields": {"data": {"node": {"name": "create_collection", "description": "Please allow several seconds for creation to complete.", "display_name": "Create new collection", "field_order": ["01_new_collection_name", "02_embedding_generation_provider", "03_embedding_generation_model", "04_dimension"], "template": {"01_new_collection_name": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "new_collection_name", "value": "", "display_name": "Name", "advanced": false, "dynamic": false, "info": "Name of the new collection to create in Astra DB.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "02_embedding_generation_provider": {"tool_mode": false, "trace_as_metadata": true, "options": ["Bring your own", "Nvidia"], "options_metadata": [{"icon": "vectorstores"}, {"icon": "NVIDIA"}], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": true, "placeholder": "", "show": true, "name": "embedding_generation_provider", "value": "", "display_name": "Embedding generation method", "advanced": false, "dynamic": false, "helper_text": "To create collections with more embedding provider options, go to <a class=\"underline\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://astra.datastax.com/org/d08a4f41-ecbf-45a8-906c-badbb3e7767a/database/0cc30786-d1e6-41ae-a91e-a36d31e64920/data-explorer?createCollection=1&namespace=default_keyspace\">your database in Astra DB</a>.", "info": "Provider to use for generating embeddings.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "03_embedding_generation_model": {"tool_mode": false, "trace_as_metadata": true, "options": [], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": true, "placeholder": null, "show": true, "name": "embedding_generation_model", "value": null, "display_name": "Embedding model", "advanced": false, "dynamic": false, "info": "Model to use for generating embeddings.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput", "readonly": ""}, "04_dimension": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": "", "placeholder": 1024, "show": true, "name": "dimension", "display_name": "Dimensions", "advanced": false, "dynamic": false, "info": "Dimensions of the embeddings to generate.", "title_case": false, "type": "int", "_input_type": "IntInput", "value": 1024, "readonly": true}}}}}}, "toggle": false, "required": true, "placeholder": "", "show": true, "name": "collection_name", "value": "co_text_ai_coll", "display_name": "Collection", "advanced": false, "dynamic": false, "info": "The name of the collection within Astra DB where the vectors will be stored.", "real_time_refresh": true, "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "content_field": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "content_field", "value": "", "display_name": "Content Field", "advanced": true, "dynamic": false, "info": "Field to use as the text content field for the vector store.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "database_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["co_text_vector_db"], "options_metadata": [{"status": null, "collections": 1, "api_endpoint": "https://0cc30786-d1e6-41ae-a91e-a36d31e64920-us-east-2.apps.astra.datastax.com", "keyspaces": ["default_keyspace"], "org_id": "d08a4f41-ecbf-45a8-906c-badbb3e7767a"}], "combobox": true, "dialog_inputs": {"functionality": "create", "fields": {"data": {"node": {"name": "create_database", "description": "Please allow several minutes for creation to complete.", "display_name": "Create new database", "field_order": ["01_new_database_name", "02_cloud_provider", "03_region"], "template": {"01_new_database_name": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "new_database_name", "value": "", "display_name": "Name", "advanced": false, "dynamic": false, "info": "Name of the new database to create in Astra DB.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "02_cloud_provider": {"tool_mode": false, "trace_as_metadata": true, "options": ["Amazon Web Services", "Google Cloud Platform", "Microsoft Azure"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": true, "placeholder": "", "show": true, "name": "cloud_provider", "value": "", "display_name": "Cloud provider", "advanced": false, "dynamic": false, "info": "Cloud provider for the new database.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "03_region": {"tool_mode": false, "trace_as_metadata": true, "options": [], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": true, "placeholder": "", "show": true, "name": "region", "value": "", "display_name": "Region", "advanced": false, "dynamic": false, "info": "Region for the new database.", "title_case": false, "type": "str", "_input_type": "DropdownInput"}}}}}}, "toggle": false, "required": true, "placeholder": "", "show": true, "name": "database_name", "value": "co_text_vector_db", "display_name": "Database", "advanced": false, "dynamic": false, "info": "The Database name for the Astra DB instance.", "real_time_refresh": true, "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "deletion_field": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "deletion_field", "value": "", "display_name": "Deletion Based On Field", "advanced": true, "dynamic": false, "info": "When this parameter is provided, documents in the target collection with metadata field values matching the input metadata field value will be deleted before new data is loaded.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "environment": {"tool_mode": false, "trace_as_metadata": true, "options": ["prod", "test", "dev"], "options_metadata": [], "combobox": true, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "environment", "value": "prod", "display_name": "Environment", "advanced": true, "dynamic": false, "info": "The environment for the Astra DB API Endpoint.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "ignore_invalid_documents": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "ignore_invalid_documents", "value": false, "display_name": "Ignore Invalid Documents", "advanced": true, "dynamic": false, "info": "Boolean flag to determine whether to ignore invalid documents at runtime.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "keyspace": {"tool_mode": false, "trace_as_metadata": true, "options": ["default_keyspace"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "keyspace", "value": "default_keyspace", "display_name": "Keyspace", "advanced": true, "dynamic": false, "info": "Optional keyspace within Astra DB to use for the collection.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "lexical_terms": {"separator": " ", "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "Enter terms to search...", "show": true, "name": "lexical_terms", "value": "", "display_name": "Lexical Terms", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Add additional terms/keywords to augment search precision.", "title_case": false, "type": "query", "_input_type": "QueryInput"}, "number_of_results": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "number_of_results", "value": 4, "display_name": "Number of Search Results", "advanced": true, "dynamic": false, "info": "Number of search results to return.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "reranker": {"tool_mode": false, "trace_as_metadata": true, "options": ["nvidia/llama-3.2-nv-rerankqa-1b-v2"], "options_metadata": [{"icon": "NVIDIA"}], "combobox": false, "dialog_inputs": {}, "toggle": true, "required": false, "placeholder": "", "show": true, "name": "reranker", "value": "nvidia/llama-3.2-nv-rerankqa-1b-v2", "display_name": "Reranker", "advanced": false, "dynamic": false, "info": "Post-retrieval model that re-scores results for optimal relevance ranking.", "title_case": false, "type": "str", "_input_type": "DropdownInput", "toggle_value": true, "toggle_disable": true}, "search_method": {"tool_mode": false, "trace_as_metadata": true, "options": ["Hybrid Search", "Vector Search"], "options_metadata": [{"icon": "SearchHybrid"}, {"icon": "SearchVector"}], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "search_method", "value": "Hybrid Search", "display_name": "Search Method", "advanced": true, "dynamic": false, "info": "Determine how your content is matched: Vector finds semantic similarity, and Hybrid Search (suggested) combines both approaches with a reranker.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "search_query": {"tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "Enter a query...", "show": true, "name": "search_query", "value": "", "display_name": "Search Query", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Enter a query to run a similarity search.", "title_case": false, "type": "query", "_input_type": "QueryInput"}, "search_score_threshold": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "search_score_threshold", "value": 0, "display_name": "Search Score Threshold", "advanced": true, "dynamic": false, "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "search_type": {"tool_mode": false, "trace_as_metadata": true, "options": ["Similarity", "Similarity with score threshold", "MMR (Max Marginal Relevance)"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "search_type", "value": "Similarity", "display_name": "Search Type", "advanced": true, "dynamic": false, "info": "Search type to use", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "should_cache_vector_store": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "should_cache_vector_store", "value": true, "display_name": "Cache Vector Store", "advanced": true, "dynamic": false, "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "token": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "token", "value": "COTEXT_ASTRA_DB", "display_name": "Astra DB Application Token", "advanced": false, "input_types": [], "dynamic": false, "info": "Authentication token for accessing Astra DB.", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}}, "description": "Ingest and search documents in Astra DB", "icon": "AstraDB", "base_classes": ["Data", "DataFrame", "VectorStore"], "display_name": "Astra DB", "documentation": "https://docs.datastax.com/en/langflow/astra-components.html", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "search_results", "hidden": null, "display_name": "Search Results", "method": "search_documents", "value": "__UNDEFINED__", "cache": true, "required_inputs": ["collection_name", "database_name", "token"], "allows_loop": false, "options": null, "tool_mode": true}, {"types": ["DataFrame"], "selected": "DataFrame", "name": "dataframe", "hidden": null, "display_name": "DataFrame", "method": "as_dataframe", "value": "__UNDEFINED__", "cache": true, "required_inputs": [], "allows_loop": false, "options": null, "tool_mode": true}, {"types": ["VectorStore"], "selected": "VectorStore", "name": "vectorstoreconnection", "hidden": true, "display_name": "Vector Store Connection", "method": "as_vector_store", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["token", "environment", "database_name", "api_endpoint", "keyspace", "collection_name", "embedding_model", "ingest_data", "search_query", "should_cache_vector_store", "search_method", "reranker", "lexical_terms", "number_of_results", "search_type", "search_score_threshold", "advanced_search_filter", "autodetect_collection", "content_field", "deletion_field", "ignore_invalid_documents", "astradb_vectorstore_kwargs"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false, "category": "vectorstores", "key": "AstraDB", "score": 0.007568328950209746, "lf_version": "1.4.1"}, "showNode": true, "type": "AstraDB", "id": "AstraDB-s7MsN"}, "selected": false, "measured": {"width": 320, "height": 679}, "dragging": false}, {"id": "Agent-io5ES", "type": "genericNode", "position": {"x": 807.9967890775283, "y": -1478.8454491663506}, "data": {"description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "id": "Agent-io5ES", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Message"], "selected": "Message", "name": "response", "hidden": null, "display_name": "Response", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Anthropic"}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n", "input_types": []}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15, "input_types": []}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "n_messages": {"_input_type": "IntInput", "advanced": true, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100, "input_types": []}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending", "input_types": []}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User", "input_types": []}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "You are a Google Drive agent designed to perform actions on a users Google Drive Account . If you need to use multiple tools, do so."}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "max_tokens": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_tokens", "value": 4096, "display_name": "Max Tokens", "advanced": true, "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "title_case": false, "type": "int", "_input_type": "IntInput", "input_types": []}, "model_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["claude-3-7-sonnet-latest", "claude-3-5-sonnet-latest", "claude-3-5-haiku-latest", "claude-3-opus-latest", "claude-3-sonnet-20240229", "claude-3-haiku-20240307", "claude-3-7-sonnet-20250219", "claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022", "claude-3-5-sonnet-20240620", "claude-3-haiku-20240307", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-2.1", "claude-2.0"], "options_metadata": [], "combobox": true, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "model_name", "value": "claude-3-7-sonnet-latest", "display_name": "Model Name", "advanced": false, "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "real_time_refresh": false, "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput", "input_types": []}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Anthropic API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Your Anthropic API key.", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "temperature": {"tool_mode": false, "min_label": "", "max_label": "", "min_label_icon": "", "max_label_icon": "", "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "range_spec": {"step_type": "float", "min": 0, "max": 1, "step": 0.01}, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.1, "display_name": "Temperature", "advanced": true, "dynamic": false, "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].", "title_case": false, "type": "slider", "_input_type": "SliderInput", "input_types": []}, "base_url": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "base_url", "value": "https://api.anthropic.com", "display_name": "Anthropic API URL", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_model_enabled": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tool_model_enabled", "value": false, "display_name": "Enable Tool Models", "advanced": true, "dynamic": false, "info": "Select if you want to use models that can work with tools. If yes, only those models will be shown.", "real_time_refresh": true, "title_case": false, "type": "bool", "_input_type": "BoolInput", "input_types": []}, "prefill": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "prefill", "value": "", "display_name": "Prefill", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Prefill text to guide the model's response.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "selected": false, "measured": {"width": 320, "height": 624}, "dragging": false}, {"id": "ComposioAPI-liqQA", "type": "genericNode", "position": {"x": -2681.0178935733625, "y": -183.7541873314442}, "data": {"description": "Use Composio toolset to run actions with your agent", "display_name": "Composio Tools", "id": "ComposioAPI-liqQA", "node": {"base_classes": ["Tool"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Use Composio toolset to run actions with your agent", "display_name": "Composio Tools", "documentation": "https://docs.composio.dev", "edited": false, "field_order": ["entity_id", "api_key", "tool_name", "actions"], "frozen": false, "icon": "Composio", "legacy": false, "lf_version": "1.4.1", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "tools", "hidden": null, "display_name": "Tools", "method": "build_tool", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "actions": {"_input_type": "SortableListInput", "advanced": false, "display_name": "Actions", "dynamic": false, "helper_text": "", "helper_text_metadata": {"icon": "Check", "variant": "success"}, "info": "The actions to use", "limit": 1, "name": "actions", "options": [{"name": "GMAIL_ADD_LABEL_TO_EMAIL"}, {"name": "GMAIL_CREATE_EMAIL_DRAFT"}, {"name": "GMAIL_CREATE_LABEL"}, {"name": "GMAIL_DELETE_DRAFT"}, {"name": "GMAIL_DELETE_MESSAGE"}, {"name": "GMAIL_FETCH_EMAILS"}, {"name": "GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID"}, {"name": "GMAIL_FETCH_MESSAGE_BY_THREAD_ID"}, {"name": "GMAIL_GET_ATTACHMENT"}, {"name": "GMAIL_GET_CONTACTS"}, {"name": "GMAIL_GET_PEOPLE"}, {"name": "GMAIL_GET_PROFILE"}, {"name": "GMAIL_LIST_DRAFTS"}, {"name": "GMAIL_LIST_LABELS"}, {"name": "GMAIL_LIST_THREADS"}, {"name": "GMAIL_MODIFY_THREAD_LABELS"}, {"name": "GMAIL_MOVE_TO_TRASH"}, {"name": "GMAIL_REMOVE_LABEL"}, {"name": "GMAIL_REPLY_TO_THREAD"}, {"name": "GMAIL_SEARCH_PEOPLE"}, {"name": "GMAIL_SEND_EMAIL"}], "placeholder": "Select action", "required": false, "search_category": [], "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "sortableList", "value": [{"name": "GMAIL_CREATE_EMAIL_DRAFT", "chosen": false, "selected": false}]}, "api_key": {"_input_type": "SecretStrInput", "advanced": false, "display_name": "Composio API Key", "dynamic": false, "info": "Refer to https://docs.composio.dev/faq/api_key/api_key", "input_types": ["Message"], "load_from_db": true, "name": "api_key", "password": true, "placeholder": "", "real_time_refresh": true, "required": true, "show": true, "title_case": false, "type": "str", "value": null}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"gmail\", \"linkedin\", \"notion\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=1,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n"}, "entity_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Entity ID", "dynamic": false, "info": "", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "entity_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "default"}, "tool_name": {"_input_type": "ConnectionInput", "advanced": false, "button_metadata": {"icon": "unplug", "variant": "destructive"}, "connection_link": "", "display_name": "Tool Name", "dynamic": false, "info": "The name of the tool to use", "name": "tool_name", "options": [{"name": "Confluence", "icon": "confluence", "link": ""}, {"name": "Discord", "icon": "discord", "link": ""}, {"name": "Dropbox", "icon": "dropbox", "link": ""}, {"name": "Github", "icon": "github", "link": ""}, {"name": "Gmail", "icon": "gmail", "link": "validated"}, {"name": "Linkedin", "icon": "linkedin", "link": ""}, {"name": "Notion", "icon": "notion", "link": ""}, {"name": "Slack", "icon": "slack", "link": ""}, {"name": "Youtube", "icon": "youtube", "link": ""}], "placeholder": "Select a tool...", "real_time_refresh": true, "required": false, "search_category": [], "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "connect", "value": "Gmail", "helper_text": "", "helper_text_metadata": {}}}, "tool_mode": false}, "showNode": true, "type": "ComposioAPI"}, "selected": false, "measured": {"width": 320, "height": 401}, "dragging": false}, {"id": "ComposioAPI-4bj9I", "type": "genericNode", "position": {"x": -2606.607942930437, "y": 235.23052569661218}, "data": {"description": "Use Composio toolset to run actions with your agent", "display_name": "Composio Tools", "id": "ComposioAPI-4bj9I", "node": {"base_classes": ["Tool"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Use Composio toolset to run actions with your agent", "display_name": "Composio Tools", "documentation": "https://docs.composio.dev", "edited": false, "field_order": ["entity_id", "api_key", "tool_name", "actions"], "frozen": false, "icon": "Composio", "legacy": false, "lf_version": "1.4.1", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "tools", "hidden": null, "display_name": "Tools", "method": "build_tool", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "actions": {"_input_type": "SortableListInput", "advanced": false, "display_name": "Actions", "dynamic": false, "helper_text": "", "helper_text_metadata": {"icon": "Check", "variant": "success"}, "info": "The actions to use", "limit": 1, "name": "actions", "options": [{"name": "GMAIL_ADD_LABEL_TO_EMAIL"}, {"name": "GMAIL_CREATE_EMAIL_DRAFT"}, {"name": "GMAIL_CREATE_LABEL"}, {"name": "GMAIL_DELETE_DRAFT"}, {"name": "GMAIL_DELETE_MESSAGE"}, {"name": "GMAIL_FETCH_EMAILS"}, {"name": "GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID"}, {"name": "GMAIL_FETCH_MESSAGE_BY_THREAD_ID"}, {"name": "GMAIL_GET_ATTACHMENT"}, {"name": "GMAIL_GET_CONTACTS"}, {"name": "GMAIL_GET_PEOPLE"}, {"name": "GMAIL_GET_PROFILE"}, {"name": "GMAIL_LIST_DRAFTS"}, {"name": "GMAIL_LIST_LABELS"}, {"name": "GMAIL_LIST_THREADS"}, {"name": "GMAIL_MODIFY_THREAD_LABELS"}, {"name": "GMAIL_MOVE_TO_TRASH"}, {"name": "GMAIL_REMOVE_LABEL"}, {"name": "GMAIL_REPLY_TO_THREAD"}, {"name": "GMAIL_SEARCH_PEOPLE"}, {"name": "GMAIL_SEND_EMAIL"}], "placeholder": "Select action", "required": false, "search_category": [], "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "sortableList", "value": [{"name": "GMAIL_GET_CONTACTS", "chosen": false, "selected": false}]}, "api_key": {"_input_type": "SecretStrInput", "advanced": false, "display_name": "Composio API Key", "dynamic": false, "info": "Refer to https://docs.composio.dev/faq/api_key/api_key", "input_types": ["Message"], "load_from_db": true, "name": "api_key", "password": true, "placeholder": "", "real_time_refresh": true, "required": true, "show": true, "title_case": false, "type": "str", "value": null}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"gmail\", \"linkedin\", \"notion\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=1,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n"}, "entity_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Entity ID", "dynamic": false, "info": "", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "entity_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "default"}, "tool_name": {"_input_type": "ConnectionInput", "advanced": false, "button_metadata": {"icon": "unplug", "variant": "destructive"}, "connection_link": "", "display_name": "Tool Name", "dynamic": false, "info": "The name of the tool to use", "name": "tool_name", "options": [{"name": "Confluence", "icon": "confluence", "link": ""}, {"name": "Discord", "icon": "discord", "link": ""}, {"name": "Dropbox", "icon": "dropbox", "link": ""}, {"name": "Github", "icon": "github", "link": ""}, {"name": "Gmail", "icon": "gmail", "link": "validated"}, {"name": "Linkedin", "icon": "linkedin", "link": ""}, {"name": "Notion", "icon": "notion", "link": ""}, {"name": "Slack", "icon": "slack", "link": ""}, {"name": "Youtube", "icon": "youtube", "link": ""}], "placeholder": "Select a tool...", "real_time_refresh": true, "required": false, "search_category": [], "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "connect", "value": "Gmail", "helper_text": "", "helper_text_metadata": {}}}, "tool_mode": false}, "showNode": true, "type": "ComposioAPI"}, "selected": false, "measured": {"width": 320, "height": 401}, "dragging": false}, {"id": "Prompt-UAgpm", "type": "genericNode", "position": {"x": 176.66149257063483, "y": -1063.7557478767808}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "template": {"tool_mode": false, "trace_as_input": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "template", "value": "summarize my recent google drive actions", "display_name": "Template", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "prompt", "_input_type": "PromptInput"}, "tool_placeholder": {"tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tool_placeholder", "value": "", "display_name": "Tool Placeholder", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A placeholder input for tool mode.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Create a prompt template with dynamic variables.", "icon": "prompts", "is_input": null, "is_output": null, "is_composition": null, "base_classes": ["Message"], "name": "", "display_name": "Prompt", "priority": null, "documentation": "", "minimized": false, "custom_fields": {"template": []}, "output_types": [], "full_path": null, "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "prompt", "hidden": false, "display_name": "Prompt Message", "method": "build_prompt", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["template", "tool_placeholder"], "beta": false, "legacy": false, "error": null, "edited": false, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "Prompt", "id": "Prompt-UAgpm"}, "selected": false, "measured": {"width": 320, "height": 252}, "dragging": false}, {"id": "Agent-AxoK2", "type": "genericNode", "position": {"x": -1385.3278923689193, "y": -1539.0356354718472}, "data": {"description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "id": "Agent-AxoK2", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": null, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Anthropic"}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n", "input_types": []}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "what are my soonest meetings?"}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15, "input_types": []}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "n_messages": {"_input_type": "IntInput", "advanced": true, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100, "input_types": []}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending", "input_types": []}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User", "input_types": []}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "You are a calendar Agent that handles communicating with users' calendars"}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "max_tokens": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_tokens", "value": 4096, "display_name": "Max Tokens", "advanced": true, "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "title_case": false, "type": "int", "_input_type": "IntInput", "input_types": []}, "model_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["claude-3-7-sonnet-latest", "claude-3-5-sonnet-latest", "claude-3-5-haiku-latest", "claude-3-opus-latest", "claude-3-sonnet-20240229", "claude-3-haiku-20240307", "claude-3-7-sonnet-20250219", "claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022", "claude-3-5-sonnet-20240620", "claude-3-haiku-20240307", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-2.1", "claude-2.0"], "options_metadata": [], "combobox": true, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "model_name", "value": "claude-3-7-sonnet-latest", "display_name": "Model Name", "advanced": false, "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "real_time_refresh": false, "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput", "input_types": []}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Anthropic API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Your Anthropic API key.", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "temperature": {"tool_mode": false, "min_label": "", "max_label": "", "min_label_icon": "", "max_label_icon": "", "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "range_spec": {"step_type": "float", "min": 0, "max": 1, "step": 0.01}, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.1, "display_name": "Temperature", "advanced": true, "dynamic": false, "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].", "title_case": false, "type": "slider", "_input_type": "SliderInput", "input_types": []}, "base_url": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "base_url", "value": "https://api.anthropic.com", "display_name": "Anthropic API URL", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_model_enabled": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tool_model_enabled", "value": false, "display_name": "Enable Tool Models", "advanced": true, "dynamic": false, "info": "Select if you want to use models that can work with tools. If yes, only those models will be shown.", "real_time_refresh": true, "title_case": false, "type": "bool", "_input_type": "BoolInput", "input_types": []}, "prefill": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "prefill", "value": "", "display_name": "Prefill", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Prefill text to guide the model's response.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools_metadata", "value": [{"name": "calendar_assistant", "description": "A helpful assistant with access to a variety of calendars", "tags": ["Agent"], "status": true, "display_name": "message_response", "display_description": "Agent. message_response - Define the agent's instructions, then enter a task to complete using tools.", "readonly": false, "args": {"input_value": {"default": "", "description": "The input provided by the user for the agent to process.", "title": "Input Value", "type": "string"}, "order": {"default": "Ascending", "description": "Order of the messages.", "enum": ["Ascending", "Descending"], "title": "Order", "type": "string"}}}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}}, "tool_mode": true, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "selected": false, "measured": {"width": 320, "height": 622}, "dragging": false}, {"id": "ComposioAPI-HqgrR", "type": "genericNode", "position": {"x": -1795.8340923274257, "y": -1644.2929731529034}, "data": {"description": "Use Composio toolset to run actions with your agent", "display_name": "Composio Tools", "id": "ComposioAPI-HqgrR", "node": {"template": {"_type": "Component", "actions": {"tool_mode": false, "trace_as_metadata": true, "helper_text": "", "helper_text_metadata": {"icon": "Check", "variant": "success"}, "search_category": [], "options": [{"name": "GOOGLECALENDAR_CREATE_EVENT"}, {"name": "GOOGLECALENDAR_DELETE_EVENT"}, {"name": "GOOGLECALENDAR_DUPLICATE_CALENDAR"}, {"name": "GOOGLECALENDAR_FIND_EVENT"}, {"name": "GOOGLECALENDAR_FIND_FREE_SLOTS"}, {"name": "GOOGLECALENDAR_GET_CALENDAR"}, {"name": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME"}, {"name": "GOOGLECALENDAR_LIST_CALENDARS"}, {"name": "GOOGLECALENDAR_PATCH_CALENDAR"}, {"name": "GOOGLECALENDAR_PATCH_EVENT"}, {"name": "GOOGLECALENDAR_QUICK_ADD"}, {"name": "GOOGLECALENDAR_REMOVE_ATTENDEE"}, {"name": "GOOGLECALENDAR_SYNC_EVENTS"}, {"name": "GOOGLECALENDAR_UPDATE_EVENT"}], "limit": 3, "required": false, "placeholder": "Select action", "show": true, "name": "actions", "value": [{"name": "GOOGLECALENDAR_FIND_FREE_SLOTS", "chosen": false, "selected": false}, {"name": "GOOGLECALENDAR_GET_CALENDAR", "chosen": false, "selected": false}, {"name": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME", "chosen": false, "selected": false}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "The actions to use", "title_case": false, "type": "sortableList", "_input_type": "SortableListInput", "load_from_db": false}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Composio API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Refer to https://docs.composio.dev/faq/api_key/api_key", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"googledrive\", \"googlecalendar\", \"gmail\", \"linkedin\", \"notion\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=3,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "entity_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "entity_id", "value": "default", "display_name": "Entity ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_name": {"tool_mode": false, "trace_as_metadata": true, "connection_link": "", "button_metadata": {"icon": "unplug", "variant": "destructive"}, "search_category": [], "options": [{"name": "Confluence", "icon": "confluence", "link": ""}, {"name": "Discord", "icon": "discord", "link": ""}, {"name": "Dropbox", "icon": "dropbox", "link": ""}, {"name": "Github", "icon": "github", "link": ""}, {"name": "Googledrive", "icon": "googledrive", "link": ""}, {"name": "Googlecalendar", "icon": "googlecalendar", "link": "validated"}, {"name": "Gmail", "icon": "gmail", "link": ""}, {"name": "Linkedin", "icon": "linkedin", "link": ""}, {"name": "Notion", "icon": "notion", "link": ""}, {"name": "Slack", "icon": "slack", "link": ""}, {"name": "Youtube", "icon": "youtube", "link": ""}], "required": false, "placeholder": "Select a tool...", "show": true, "name": "tool_name", "value": "Googlecalendar", "display_name": "Tool Name", "advanced": false, "dynamic": false, "info": "The name of the tool to use", "real_time_refresh": true, "title_case": false, "type": "connect", "_input_type": "ConnectionInput", "load_from_db": false, "helper_text": "", "helper_text_metadata": {}}}, "description": "Use Composio toolset to run actions with your agent", "icon": "Composio", "base_classes": ["Tool"], "display_name": "Multi-action Composio", "documentation": "https://docs.composio.dev", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "tools", "hidden": null, "display_name": "Tools", "method": "build_tool", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["entity_id", "api_key", "tool_name", "actions"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "ComposioAPI"}, "selected": false, "measured": {"width": 320, "height": 559}, "dragging": false}, {"id": "ComposioAPI (vxCTF)-AhbjM", "type": "genericNode", "position": {"x": -2189.660656648516, "y": -1393.9106411086964}, "data": {"node": {"template": {"_type": "Component", "actions": {"tool_mode": false, "trace_as_metadata": true, "helper_text": "", "helper_text_metadata": {"icon": "Check", "variant": "success"}, "search_category": [], "options": [{"name": "OUTLOOK_DOWNLOAD_OUTLOOK_ATTACHMENT"}, {"name": "OUTLOOK_LIST_OUTLOOK_ATTACHMENTS"}, {"name": "OUTLOOK_OUTLOOK_CALENDAR_CREATE_EVENT"}, {"name": "OUTLOOK_OUTLOOK_CREATE_CONTACT"}, {"name": "OUTLOOK_OUTLOOK_CREATE_DRAFT"}, {"name": "OUTLOOK_OUTLOOK_CREATE_DRAFT_REPLY"}, {"name": "OUTLOOK_OUTLOOK_DELETE_CONTACT"}, {"name": "OUTLOOK_OUTLOOK_DELETE_EVENT"}, {"name": "OUTLOOK_OUTLOOK_GET_CONTACT"}, {"name": "OUTLOOK_OUTLOOK_GET_EVENT"}, {"name": "OUTLOOK_OUTLOOK_GET_MESSAGE"}, {"name": "OUTLOOK_OUTLOOK_GET_PROFILE"}, {"name": "OUTLOOK_OUTLOOK_GET_SCHEDULE"}, {"name": "OUTLOOK_OUTLOOK_LIST_CONTACTS"}, {"name": "OUTLOOK_OUTLOOK_LIST_EVENTS"}, {"name": "OUTLOOK_OUTLOOK_LIST_MESSAGES"}, {"name": "OUTLOOK_OUTLOOK_REPLY_EMAIL"}, {"name": "OUTLOOK_OUTLOOK_SEARCH_MESSAGES"}, {"name": "OUTLOOK_OUTLOOK_SEND_EMAIL"}, {"name": "OUTLOOK_OUTLOOK_UPDATE_CALENDAR_EVENT"}, {"name": "OUTLOOK_OUTLOOK_UPDATE_CONTACT"}, {"name": "OUTLOOK_OUTLOOK_UPDATE_EMAIL"}], "limit": 10, "required": false, "placeholder": "Select action", "show": true, "name": "actions", "value": [{"name": "OUTLOOK_OUTLOOK_CALENDAR_CREATE_EVENT", "chosen": false, "selected": false}, {"name": "OUTLOOK_OUTLOOK_GET_SCHEDULE", "chosen": false, "selected": false}, {"name": "OUTLOOK_OUTLOOK_LIST_EVENTS", "chosen": false, "selected": false}, {"name": "OUTLOOK_OUTLOOK_GET_EVENT", "chosen": false, "selected": false}, {"name": "OUTLOOK_OUTLOOK_UPDATE_CALENDAR_EVENT", "chosen": false, "selected": false}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "The actions to use", "title_case": false, "type": "sortableList", "_input_type": "SortableListInput", "load_from_db": false}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Composio API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Refer to https://docs.composio.dev/faq/api_key/api_key", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"googledrive\", \"googlecalendar\", \"gmail\", \"linkedin\", \"notion\", \"outlook\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=10,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "entity_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "entity_id", "value": "default", "display_name": "Entity ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_name": {"tool_mode": false, "trace_as_metadata": true, "connection_link": "", "button_metadata": {"icon": "unplug", "variant": "destructive"}, "search_category": [], "options": [{"name": "Confluence", "icon": "confluence", "link": ""}, {"name": "Discord", "icon": "discord", "link": ""}, {"name": "Dropbox", "icon": "dropbox", "link": ""}, {"name": "Github", "icon": "github", "link": ""}, {"name": "Googledrive", "icon": "googledrive", "link": ""}, {"name": "Googlecalendar", "icon": "googlecalendar", "link": ""}, {"name": "Gmail", "icon": "gmail", "link": ""}, {"name": "Linkedin", "icon": "linkedin", "link": ""}, {"name": "Notion", "icon": "notion", "link": ""}, {"name": "Outlook", "icon": "outlook", "link": "validated"}, {"name": "Slack", "icon": "slack", "link": ""}, {"name": "Youtube", "icon": "youtube", "link": ""}], "required": false, "placeholder": "Select a tool...", "show": true, "name": "tool_name", "value": "Outlook", "display_name": "Tool Name", "advanced": false, "dynamic": false, "info": "The name of the tool to use", "real_time_refresh": true, "title_case": false, "type": "connect", "_input_type": "ConnectionInput", "load_from_db": false, "helper_text": "", "helper_text_metadata": {}}}, "description": "Use Composio toolset to run actions with your agent", "icon": "Composio", "base_classes": ["Tool"], "display_name": "Composio Tools", "documentation": "https://docs.composio.dev", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "tools", "hidden": null, "display_name": "Tools", "method": "build_tool", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["entity_id", "api_key", "tool_name", "actions"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "ComposioAPI", "id": "ComposioAPI (vxCTF)-AhbjM"}, "selected": false, "measured": {"width": 320, "height": 655}, "dragging": false}, {"id": "Agent-Nj4XB", "type": "genericNode", "position": {"x": -976.9310576375144, "y": -223.37255851328456}, "data": {"description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "id": "Agent-Nj4XB", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Message"], "selected": "Message", "name": "response", "hidden": null, "display_name": "Response", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Anthropic"}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n", "input_types": []}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "send quinnosha@gmail.com an email with an overview of my upcoming week schedule"}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15, "input_types": []}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "n_messages": {"_input_type": "IntInput", "advanced": true, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100, "input_types": []}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending", "input_types": []}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User", "input_types": []}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "You are an OUtlook agent with access to tools that allow you to read, write, update emails and read write update contacts and calendar. "}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "max_tokens": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_tokens", "value": 4096, "display_name": "Max Tokens", "advanced": true, "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "title_case": false, "type": "int", "_input_type": "IntInput", "input_types": []}, "model_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["claude-3-7-sonnet-latest", "claude-3-5-sonnet-latest", "claude-3-5-haiku-latest", "claude-3-opus-latest", "claude-3-sonnet-20240229", "claude-3-haiku-20240307", "claude-3-7-sonnet-20250219", "claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022", "claude-3-5-sonnet-20240620", "claude-3-haiku-20240307", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-2.1", "claude-2.0"], "options_metadata": [], "combobox": true, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "model_name", "value": "claude-3-7-sonnet-latest", "display_name": "Model Name", "advanced": false, "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "real_time_refresh": false, "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput", "input_types": []}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Anthropic API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Your Anthropic API key.", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "temperature": {"tool_mode": false, "min_label": "", "max_label": "", "min_label_icon": "", "max_label_icon": "", "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "range_spec": {"step_type": "float", "min": 0, "max": 1, "step": 0.01}, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.1, "display_name": "Temperature", "advanced": true, "dynamic": false, "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].", "title_case": false, "type": "slider", "_input_type": "SliderInput", "input_types": []}, "base_url": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "base_url", "value": "https://api.anthropic.com", "display_name": "Anthropic API URL", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_model_enabled": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tool_model_enabled", "value": false, "display_name": "Enable Tool Models", "advanced": true, "dynamic": false, "info": "Select if you want to use models that can work with tools. If yes, only those models will be shown.", "real_time_refresh": true, "title_case": false, "type": "bool", "_input_type": "BoolInput", "input_types": []}, "prefill": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "prefill", "value": "", "display_name": "Prefill", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Prefill text to guide the model's response.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "selected": false, "measured": {"width": 320, "height": 624}, "dragging": false}, {"id": "ComposioAPI-V6lCe", "type": "genericNode", "position": {"x": -1423.4182657110823, "y": -433.5471067991145}, "data": {"node": {"template": {"_type": "Component", "actions": {"tool_mode": false, "trace_as_metadata": true, "helper_text": "", "helper_text_metadata": {"icon": "Check", "variant": "success"}, "search_category": [], "options": [{"name": "OUTLOOK_DOWNLOAD_OUTLOOK_ATTACHMENT"}, {"name": "OUTLOOK_LIST_OUTLOOK_ATTACHMENTS"}, {"name": "OUTLOOK_OUTLOOK_CALENDAR_CREATE_EVENT"}, {"name": "OUTLOOK_OUTLOOK_CREATE_CONTACT"}, {"name": "OUTLOOK_OUTLOOK_CREATE_DRAFT"}, {"name": "OUTLOOK_OUTLOOK_CREATE_DRAFT_REPLY"}, {"name": "OUTLOOK_OUTLOOK_DELETE_CONTACT"}, {"name": "OUTLOOK_OUTLOOK_DELETE_EVENT"}, {"name": "OUTLOOK_OUTLOOK_GET_CONTACT"}, {"name": "OUTLOOK_OUTLOOK_GET_EVENT"}, {"name": "OUTLOOK_OUTLOOK_GET_MESSAGE"}, {"name": "OUTLOOK_OUTLOOK_GET_PROFILE"}, {"name": "OUTLOOK_OUTLOOK_GET_SCHEDULE"}, {"name": "OUTLOOK_OUTLOOK_LIST_CONTACTS"}, {"name": "OUTLOOK_OUTLOOK_LIST_EVENTS"}, {"name": "OUTLOOK_OUTLOOK_LIST_MESSAGES"}, {"name": "OUTLOOK_OUTLOOK_REPLY_EMAIL"}, {"name": "OUTLOOK_OUTLOOK_SEARCH_MESSAGES"}, {"name": "OUTLOOK_OUTLOOK_SEND_EMAIL"}, {"name": "OUTLOOK_OUTLOOK_UPDATE_CALENDAR_EVENT"}, {"name": "OUTLOOK_OUTLOOK_UPDATE_CONTACT"}, {"name": "OUTLOOK_OUTLOOK_UPDATE_EMAIL"}], "limit": 10, "required": false, "placeholder": "Select action", "show": true, "name": "actions", "value": [{"name": "OUTLOOK_OUTLOOK_SEND_EMAIL", "chosen": false, "selected": false}, {"name": "OUTLOOK_OUTLOOK_REPLY_EMAIL", "chosen": false, "selected": false}, {"name": "OUTLOOK_OUTLOOK_UPDATE_EMAIL", "chosen": false, "selected": false}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "The actions to use", "title_case": false, "type": "sortableList", "_input_type": "SortableListInput", "load_from_db": false}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Composio API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Refer to https://docs.composio.dev/faq/api_key/api_key", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"googledrive\", \"googlecalendar\", \"gmail\", \"linkedin\", \"notion\", \"outlook\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=10,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "entity_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "entity_id", "value": "default", "display_name": "Entity ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_name": {"tool_mode": false, "trace_as_metadata": true, "connection_link": "", "button_metadata": {"icon": "unplug", "variant": "destructive"}, "search_category": [], "options": [{"name": "Confluence", "icon": "confluence", "link": ""}, {"name": "Discord", "icon": "discord", "link": ""}, {"name": "Dropbox", "icon": "dropbox", "link": ""}, {"name": "Github", "icon": "github", "link": ""}, {"name": "Googledrive", "icon": "googledrive", "link": ""}, {"name": "Googlecalendar", "icon": "googlecalendar", "link": ""}, {"name": "Gmail", "icon": "gmail", "link": ""}, {"name": "Linkedin", "icon": "linkedin", "link": ""}, {"name": "Notion", "icon": "notion", "link": ""}, {"name": "Outlook", "icon": "outlook", "link": "validated"}, {"name": "Slack", "icon": "slack", "link": ""}, {"name": "Youtube", "icon": "youtube", "link": ""}], "required": false, "placeholder": "Select a tool...", "show": true, "name": "tool_name", "value": "Outlook", "display_name": "Tool Name", "advanced": false, "dynamic": false, "info": "The name of the tool to use", "real_time_refresh": true, "title_case": false, "type": "connect", "_input_type": "ConnectionInput", "load_from_db": false, "helper_text": "", "helper_text_metadata": {}}}, "description": "Use Composio toolset to run actions with your agent", "icon": "Composio", "base_classes": ["Tool"], "display_name": "Composio Tools", "documentation": "https://docs.composio.dev", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "tools", "hidden": null, "display_name": "Tools", "method": "build_tool", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["entity_id", "api_key", "tool_name", "actions"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "ComposioAPI", "id": "ComposioAPI-V6lCe"}, "selected": false, "measured": {"width": 320, "height": 559}, "dragging": false}, {"id": "note-XjwUz", "type": "noteNode", "position": {"x": -2164.6716069307067, "y": -1803.299461780656}, "data": {"id": "note-XjwUz", "node": {"description": "# Calendars\n", "display_name": "", "documentation": "", "template": {"backgroundColor": "lime"}}, "type": "note"}, "selected": false, "measured": {"width": 325, "height": 324}, "dragging": false}, {"id": "ComposioAPI (WWSrI)-YL4y5", "type": "genericNode", "position": {"x": 292.91367721479503, "y": -1882.0444562433293}, "data": {"node": {"template": {"_type": "Component", "actions": {"tool_mode": false, "trace_as_metadata": true, "helper_text": "", "helper_text_metadata": {"icon": "Check", "variant": "success"}, "search_category": [], "options": [{"name": "GOOGLEDRIVE_ADD_FILE_SHARING_PREFERENCE"}, {"name": "GOOGLEDRIVE_COPY_FILE"}, {"name": "GOOGLEDRIVE_CREATE_FILE_FROM_TEXT"}, {"name": "GOOGLEDRIVE_CREATE_FOLDER"}, {"name": "GOOGLEDRIVE_DELETE_FOLDER_OR_FILE"}, {"name": "GOOGLEDRIVE_DOWNLOAD_FILE"}, {"name": "GOOGLEDRIVE_DOWNLOAD_FILE"}, {"name": "GOOGLEDRIVE_EDIT_FILE"}, {"name": "GOOGLEDRIVE_FIND_FILE"}, {"name": "GOOGLEDRIVE_FIND_FOLDER"}, {"name": "GOOGLEDRIVE_UPLOAD_FILE"}], "limit": 10, "required": false, "placeholder": "Select action", "show": true, "name": "actions", "value": [{"name": "GOOGLEDRIVE_CREATE_FOLDER", "chosen": false, "selected": false}, {"name": "GOOGLEDRIVE_DOWNLOAD_FILE", "chosen": false, "selected": false}, {"name": "GOOGLEDRIVE_EDIT_FILE", "chosen": false, "selected": false}, {"name": "GOOGLEDRIVE_FIND_FILE", "chosen": false, "selected": false}, {"name": "GOOGLEDRIVE_FIND_FOLDER", "chosen": false, "selected": false}, {"name": "GOOGLEDRIVE_UPLOAD_FILE", "chosen": false, "selected": false}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "The actions to use", "title_case": false, "type": "sortableList", "_input_type": "SortableListInput", "load_from_db": false}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Composio API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Refer to https://docs.composio.dev/faq/api_key/api_key", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"googledrive\", \"googlecalendar\", \"gmail\", \"linkedin\", \"notion\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=10,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "entity_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "entity_id", "value": "default", "display_name": "Entity ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_name": {"tool_mode": false, "trace_as_metadata": true, "connection_link": "", "button_metadata": {"icon": "unplug", "variant": "destructive"}, "search_category": [], "options": [{"name": "Confluence", "icon": "confluence", "link": ""}, {"name": "Discord", "icon": "discord", "link": ""}, {"name": "Dropbox", "icon": "dropbox", "link": ""}, {"name": "Github", "icon": "github", "link": ""}, {"name": "Googledrive", "icon": "googledrive", "link": "validated"}, {"name": "Googlecalendar", "icon": "googlecalendar", "link": ""}, {"name": "Gmail", "icon": "gmail", "link": ""}, {"name": "Linkedin", "icon": "linkedin", "link": ""}, {"name": "Notion", "icon": "notion", "link": ""}, {"name": "Slack", "icon": "slack", "link": ""}, {"name": "Youtube", "icon": "youtube", "link": ""}], "required": false, "placeholder": "Select a tool...", "show": true, "name": "tool_name", "value": "Googledrive", "display_name": "Tool Name", "advanced": false, "dynamic": false, "info": "The name of the tool to use", "real_time_refresh": true, "title_case": false, "type": "connect", "_input_type": "ConnectionInput", "load_from_db": false, "helper_text": "", "helper_text_metadata": {}}}, "description": "Use Composio toolset to run actions with your agent", "icon": "Composio", "base_classes": ["Tool"], "display_name": "Composio Tools", "documentation": "https://docs.composio.dev", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "tools", "hidden": null, "display_name": "Tools", "method": "build_tool", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["entity_id", "api_key", "tool_name", "actions"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "ComposioAPI", "id": "ComposioAPI (WWSrI)-YL4y5"}, "selected": false, "measured": {"width": 320, "height": 703}, "dragging": false}, {"id": "JsonStringToData (pRRCC)-YM5Sx", "type": "genericNode", "position": {"x": -2958.8517933903554, "y": 1117.5153076478346}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "\"\"\"\nJsonString \u279c Data\n-----------------\nA Langflow custom component that accepts a JSON **string** and returns\na single `Data` object whose `.json` field contains the parsed payload.\n\"\"\"\n\nimport json\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\n\n\nclass JsonStringToData(Component):\n    display_name = \"JSON String \u2192 Data\"\n    description = (\n        \"Parses an input string that contains JSON and emits one Data object \"\n        \"with the parsed structure in its `.json` attribute.\"\n    )\n    icon = \"code\"\n    name = \"JsonStringToData\"\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 input \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    inputs = [\n        MessageTextInput(\n            name=\"json_string\",\n            display_name=\"JSON String\",\n            required=True,\n            info='Example: {\"foo\": 1, \"bar\": \"baz\"}',\n        )\n    ]\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    outputs = [\n        Output(\n            name=\"data\",\n            display_name=\"Data\",\n            method=\"parse_json\",\n        )\n    ]\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 core logic \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    def parse_json(self) -> Data:\n        raw = self.json_string\n        if not isinstance(raw, str):\n            raise TypeError(\"json_string must be a str\")\n\n        try:\n            parsed = json.loads(raw)\n        except json.JSONDecodeError as e:\n            raise ValueError(f\"Invalid JSON: {e}\") from e\n\n        return Data(**parsed if parsed else {})\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "json_string": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "json_string", "value": "", "display_name": "JSON String", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Example: {\"foo\": 1, \"bar\": \"baz\"}", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Parses an input string that contains JSON and emits one Data object with the parsed structure in its `.json` attribute.", "icon": "code", "base_classes": ["Data"], "display_name": "JSON String \u2192 Data", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "data", "hidden": false, "display_name": "Data", "method": "parse_json", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["json_string"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "official": false, "lf_version": "1.4.1"}, "showNode": true, "type": "JsonStringToData (pRRCC)", "id": "JsonStringToData (pRRCC)-YM5Sx"}, "selected": false, "measured": {"width": 320, "height": 270}, "dragging": false}, {"id": "ParserComponent (OULbj)-0zyx7", "type": "genericNode", "position": {"x": -2419.8421014525015, "y": 1311.2935204132157}, "data": {"node": {"template": {"_type": "Component", "input_data": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_data", "value": "", "display_name": "Data or DataFrame", "advanced": false, "input_types": ["DataFrame", "Data"], "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "import json\nimport re\nfrom typing import Any, Dict\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\n# --------------------------- helper ---------------------------------- #\nTOKEN_RE = re.compile(r\"{([^{}]+)}\")  # finds {token} blocks\n\n\ndef _resolve(token: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"\n    Walk dot\u2011segments inside *ctx* and return the value as str.\n    Silently returns '' for missing segments.\n    Example: token=\"metadata.collection_name\"\n    \"\"\"\n    value: Any = ctx\n    for part in token.split(\".\"):\n        if isinstance(value, dict) and part in value:\n            value = value[part]\n        else:                       # missing link in the chain\n            return \"\"\n    # final leaf \u2192 stringify\n    if isinstance(value, (dict, list)):\n        return json.dumps(value)\n    return str(value)\n\n\ndef render(template: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"Replace {a.b.c} placeholders in *template* using *ctx*.\"\"\"\n    def repl(match: re.Match[str]) -> str:\n        token = match.group(1).strip()\n        return _resolve(token, ctx)\n\n    return TOKEN_RE.sub(repl, template)\n\n\n# --------------------- main component -------------------------------- #\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use curly\u2011bracket placeholders. \"\n                \"Dot\u2011notation lets you reach nested keys, \"\n                \"e.g. `{page_content}` or `{metadata.collection_name}`.\"\n            ),\n            value=\"Text: {page_content}\",\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    # ---------- existing _clean_args unchanged ---------- #\n    \n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    # ---------- main logic with new renderer ------------ #\n    def parse_combined_text(self) -> Message:\n        \"\"\"Render template for every row / single Data item.\"\"\"\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        try:\n            df, data = self._clean_args()\n\n            lines = []\n            if df is not None:\n                for _, row in df.iterrows():\n                    lines.append(render(self.pattern, row.to_dict()))\n            else:  # Data\n                lines.append(render(self.pattern, data.data))\n\n            combined = self.sep.join(lines)\n            self.status = combined\n            return Message(text=combined)\n        except Exception as e:  # pragma: no cover\n            self.log(f\"Parser error: {e}\")\n            return Message(text=\"\")\n            \n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "mode": {"tool_mode": false, "trace_as_metadata": true, "options": ["Parser", "Stringify"], "required": false, "placeholder": "", "show": true, "name": "mode", "value": "Parser", "display_name": "Mode", "advanced": false, "dynamic": false, "info": "Convert into raw string instead of using a template.", "real_time_refresh": true, "title_case": false, "type": "tab", "_input_type": "TabInput"}, "pattern": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "pattern", "value": "{message}", "display_name": "Template", "advanced": false, "input_types": ["Message"], "dynamic": true, "info": "Use curly\u2011bracket placeholders. Dot\u2011notation lets you reach nested keys, e.g. `{page_content}` or `{metadata.collection_name}`.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "sep": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sep", "value": "\n", "display_name": "Separator", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "String used to separate rows/items.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.", "icon": "braces", "base_classes": ["Message"], "display_name": "Parser", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "parsed_text", "hidden": false, "display_name": "Parsed Text", "method": "parse_combined_text", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["mode", "pattern", "input_data", "sep"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1", "official": false, "category": "saved_components", "key": "ParserComponent (OULbj)", "score": 0.001}, "showNode": true, "type": "ParserComponent (OULbj)", "id": "ParserComponent (OULbj)-0zyx7"}, "selected": false, "measured": {"width": 320, "height": 395}, "dragging": false}, {"id": "Agent-WVuiE", "type": "genericNode", "position": {"x": 36.94480865789325, "y": 628.8897145289197}, "data": {"description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "id": "Agent-WVuiE", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Message"], "selected": "Message", "name": "response", "hidden": false, "display_name": "Response", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "OpenAI"}, "api_key": {"_input_type": "SecretStrInput", "advanced": false, "display_name": "OpenAI API Key", "dynamic": false, "info": "The OpenAI API Key to use for the OpenAI model.", "input_types": ["Message"], "load_from_db": true, "name": "api_key", "password": true, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "str", "value": null}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "json_mode": {"_input_type": "BoolInput", "advanced": true, "display_name": "JSON Mode", "dynamic": false, "info": "If True, it will output JSON regardless of passing a schema.", "list": false, "list_add_label": "Add More", "name": "json_mode", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": false}, "max_iterations": {"_input_type": "IntInput", "advanced": false, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15}, "max_retries": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Retries", "dynamic": false, "info": "The maximum number of retries to make when generating.", "list": false, "list_add_label": "Add More", "name": "max_retries", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 5}, "max_tokens": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Tokens", "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "list": false, "list_add_label": "Add More", "name": "max_tokens", "placeholder": "", "range_spec": {"max": 128000, "min": 0, "step": 0.1, "step_type": "float"}, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": ""}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "model_kwargs": {"_input_type": "DictInput", "advanced": true, "display_name": "Model Kwargs", "dynamic": false, "info": "Additional keyword arguments to pass to the model.", "list": false, "list_add_label": "Add More", "name": "model_kwargs", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "dict", "value": {}}, "model_name": {"_input_type": "DropdownInput", "advanced": false, "combobox": true, "dialog_inputs": {}, "display_name": "Model Name", "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "load_from_db": false, "name": "model_name", "options": ["gpt-4o-mini", "gpt-4o", "gpt-4.5-preview", "gpt-4-turbo", "gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo"], "options_metadata": [], "placeholder": "", "real_time_refresh": false, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "gpt-4o-mini"}, "n_messages": {"_input_type": "IntInput", "advanced": false, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100}, "openai_api_base": {"_input_type": "StrInput", "advanced": true, "display_name": "OpenAI API Base", "dynamic": false, "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "openai_api_base", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending"}, "seed": {"_input_type": "IntInput", "advanced": true, "display_name": "Seed", "dynamic": false, "info": "The seed controls the reproducibility of the job.", "list": false, "list_add_label": "Add More", "name": "seed", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 1}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "You are an agent with access to calendars."}, "temperature": {"_input_type": "SliderInput", "advanced": true, "display_name": "Temperature", "dynamic": false, "info": "", "max_label": "", "max_label_icon": "", "min_label": "", "min_label_icon": "", "name": "temperature", "placeholder": "", "range_spec": {"max": 1, "min": 0, "step": 0.01, "step_type": "float"}, "required": false, "show": true, "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "title_case": false, "tool_mode": false, "type": "slider", "value": 0.1}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "timeout": {"_input_type": "IntInput", "advanced": true, "display_name": "Timeout", "dynamic": false, "info": "The timeout for requests to OpenAI completion API.", "list": false, "list_add_label": "Add More", "name": "timeout", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 700}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "selected": false, "measured": {"width": 320, "height": 789}, "dragging": false}, {"id": "ParserComponent (OULbj)-rBn5X", "type": "genericNode", "position": {"x": -2432.003364709714, "y": 835.6208592731996}, "data": {"node": {"template": {"_type": "Component", "input_data": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_data", "value": "", "display_name": "Data or DataFrame", "advanced": false, "input_types": ["DataFrame", "Data"], "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "import json\nimport re\nfrom typing import Any, Dict\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\n# --------------------------- helper ---------------------------------- #\nTOKEN_RE = re.compile(r\"{([^{}]+)}\")  # finds {token} blocks\n\n\ndef _resolve(token: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"\n    Walk dot\u2011segments inside *ctx* and return the value as str.\n    Silently returns '' for missing segments.\n    Example: token=\"metadata.collection_name\"\n    \"\"\"\n    value: Any = ctx\n    for part in token.split(\".\"):\n        if isinstance(value, dict) and part in value:\n            value = value[part]\n        else:                       # missing link in the chain\n            return \"\"\n    # final leaf \u2192 stringify\n    if isinstance(value, (dict, list)):\n        return json.dumps(value)\n    return str(value)\n\n\ndef render(template: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"Replace {a.b.c} placeholders in *template* using *ctx*.\"\"\"\n    def repl(match: re.Match[str]) -> str:\n        token = match.group(1).strip()\n        return _resolve(token, ctx)\n\n    return TOKEN_RE.sub(repl, template)\n\n\n# --------------------- main component -------------------------------- #\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use curly\u2011bracket placeholders. \"\n                \"Dot\u2011notation lets you reach nested keys, \"\n                \"e.g. `{page_content}` or `{metadata.collection_name}`.\"\n            ),\n            value=\"Text: {page_content}\",\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    # ---------- existing _clean_args unchanged ---------- #\n    \n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    # ---------- main logic with new renderer ------------ #\n    def parse_combined_text(self) -> Message:\n        \"\"\"Render template for every row / single Data item.\"\"\"\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        try:\n            df, data = self._clean_args()\n\n            lines = []\n            if df is not None:\n                for _, row in df.iterrows():\n                    lines.append(render(self.pattern, row.to_dict()))\n            else:  # Data\n                lines.append(render(self.pattern, data.data))\n\n            combined = self.sep.join(lines)\n            self.status = combined\n            return Message(text=combined)\n        except Exception as e:  # pragma: no cover\n            self.log(f\"Parser error: {e}\")\n            return Message(text=\"\")\n            \n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "mode": {"tool_mode": false, "trace_as_metadata": true, "options": ["Parser", "Stringify"], "required": false, "placeholder": "", "show": true, "name": "mode", "value": "Parser", "display_name": "Mode", "advanced": false, "dynamic": false, "info": "Convert into raw string instead of using a template.", "real_time_refresh": true, "title_case": false, "type": "tab", "_input_type": "TabInput"}, "pattern": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "pattern", "value": "{group}", "display_name": "Template", "advanced": false, "input_types": ["Message"], "dynamic": true, "info": "Use curly\u2011bracket placeholders. Dot\u2011notation lets you reach nested keys, e.g. `{page_content}` or `{metadata.collection_name}`.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "sep": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sep", "value": "\n", "display_name": "Separator", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "String used to separate rows/items.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.", "icon": "braces", "base_classes": ["Message"], "display_name": "Parser", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "parsed_text", "hidden": false, "display_name": "Parsed Text", "method": "parse_combined_text", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["mode", "pattern", "input_data", "sep"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1", "official": false, "category": "saved_components", "key": "ParserComponent (OULbj)", "score": 0.001}, "showNode": true, "type": "ParserComponent (OULbj)", "id": "ParserComponent (OULbj)-rBn5X"}, "selected": false, "measured": {"width": 320, "height": 395}, "dragging": false}, {"id": "Prompt-ijdf5", "type": "genericNode", "position": {"x": 625.941683816747, "y": 1246.9762159488935}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "template": {"tool_mode": false, "trace_as_input": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "template", "value": "Calendar Agent Context \n\n{calendar}\n\n----\n\n\nOriginal message:\n\n{original_message}\n\n", "display_name": "Template", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "prompt", "_input_type": "PromptInput"}, "tool_placeholder": {"tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tool_placeholder", "value": "", "display_name": "Tool Placeholder", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A placeholder input for tool mode.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "calendar": {"field_type": "str", "required": false, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "", "fileTypes": [], "file_path": "", "name": "calendar", "display_name": "calendar", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "load_from_db": false, "title_case": false, "type": "str"}, "original_message": {"field_type": "str", "required": false, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "", "fileTypes": [], "file_path": "", "name": "original_message", "display_name": "original_message", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "load_from_db": false, "title_case": false, "type": "str"}}, "description": "Create a prompt template with dynamic variables.", "icon": "prompts", "is_input": null, "is_output": null, "is_composition": null, "base_classes": ["Message"], "name": "", "display_name": "Prompt", "priority": null, "documentation": "", "minimized": false, "custom_fields": {"template": ["calendar", "original_message"]}, "output_types": [], "full_path": null, "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "prompt", "hidden": false, "display_name": "Prompt Message", "method": "build_prompt", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["template", "tool_placeholder"], "beta": false, "legacy": false, "error": null, "edited": false, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "Prompt", "id": "Prompt-ijdf5"}, "selected": false, "measured": {"width": 320, "height": 495}, "dragging": false}, {"id": "FilterData-9nrl4", "type": "genericNode", "position": {"x": -1901.2018016319362, "y": 1158.9851445161576}, "data": {"node": {"template": {"_type": "Component", "data": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "trace_as_input": true, "required": false, "placeholder": "", "show": true, "name": "data", "value": "", "display_name": "Data", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "Data object to filter.", "title_case": false, "type": "other", "_input_type": "DataInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.custom import Component\nfrom langflow.io import DataInput, MessageTextInput, Output\nfrom langflow.schema import Data\n\n\nclass FilterDataComponent(Component):\n    display_name = \"Filter Data\"\n    description = \"Filters a Data object based on a list of keys.\"\n    icon = \"filter\"\n    beta = True\n    name = \"FilterData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"Data object to filter.\",\n        ),\n        MessageTextInput(\n            name=\"filter_criteria\",\n            display_name=\"Filter Criteria\",\n            info=\"List of keys to filter by.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\n    ]\n\n    def filter_data(self) -> Data:\n        filter_criteria: list[str] = self.filter_criteria\n        data = self.data.data if isinstance(self.data, Data) else {}\n\n        # Filter the data\n        filtered = {key: value for key, value in data.items() if key in filter_criteria}\n\n        if len(filter_criteria) == 1 and isinstance(filtered[filter_criteria[0]], dict):\n            filtered = filtered[filter_criteria[0]]\n        # Create a new Data object with the filtered data\n        filtered_data = Data(data=filtered)\n        self.status = filtered_data\n        return filtered_data\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "filter_criteria": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "filter_criteria", "value": ["config"], "display_name": "Filter Criteria", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "List of keys to filter by.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Filters a Data object based on a list of keys.", "icon": "filter", "base_classes": ["Data"], "display_name": "Filter Data", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "filtered_data", "hidden": false, "display_name": "Filtered Data", "method": "filter_data", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["data", "filter_criteria"], "beta": true, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "FilterData", "id": "FilterData-9nrl4"}, "selected": false, "measured": {"width": 320, "height": 282}, "dragging": false}, {"id": "FilterData-Jccdc", "type": "genericNode", "position": {"x": -1782.2716866711057, "y": 859.6085878416716}, "data": {"node": {"template": {"_type": "Component", "data": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "trace_as_input": true, "required": false, "placeholder": "", "show": true, "name": "data", "value": "", "display_name": "Data", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "Data object to filter.", "title_case": false, "type": "other", "_input_type": "DataInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.custom import Component\nfrom langflow.io import DataInput, MessageTextInput, Output\nfrom langflow.schema import Data\n\n\nclass FilterDataComponent(Component):\n    display_name = \"Filter Data\"\n    description = \"Filters a Data object based on a list of keys.\"\n    icon = \"filter\"\n    beta = True\n    name = \"FilterData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"Data object to filter.\",\n        ),\n        MessageTextInput(\n            name=\"filter_criteria\",\n            display_name=\"Filter Criteria\",\n            info=\"List of keys to filter by.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\n    ]\n\n    def filter_data(self) -> Data:\n        filter_criteria: list[str] = self.filter_criteria\n        data = self.data.data if isinstance(self.data, Data) else {}\n\n        # Filter the data\n        filtered = {key: value for key, value in data.items() if key in filter_criteria}\n\n        if len(filter_criteria) == 1 and isinstance(filtered[filter_criteria[0]], dict):\n            filtered = filtered[filter_criteria[0]]\n        # Create a new Data object with the filtered data\n        filtered_data = Data(data=filtered)\n        self.status = filtered_data\n        return filtered_data\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "filter_criteria": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "filter_criteria", "value": [""], "display_name": "Filter Criteria", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "List of keys to filter by.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Filters a Data object based on a list of keys.", "icon": "filter", "base_classes": ["Data"], "display_name": "Filter Data", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "filtered_data", "hidden": false, "display_name": "Filtered Data", "method": "filter_data", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["data", "filter_criteria"], "beta": true, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "FilterData", "id": "FilterData-Jccdc"}, "selected": false, "measured": {"width": 320, "height": 282}, "dragging": false}, {"id": "ParserComponent (PcN5J)-HfXAB", "type": "genericNode", "position": {"x": -910.9425484765087, "y": 611.9161008358182}, "data": {"node": {"template": {"_type": "Component", "input_data": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_data", "value": "", "display_name": "Data or DataFrame", "advanced": false, "input_types": ["DataFrame", "Data"], "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "import json\nimport re\nfrom typing import Any, Dict\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\n# --------------------------- helper ---------------------------------- #\nTOKEN_RE = re.compile(r\"{([^{}]+)}\")  # finds {token} blocks\n\n\ndef _resolve(token: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"\n    Walk dot\u2011segments inside *ctx* and return the value as str.\n    Silently returns '' for missing segments.\n    Example: token=\"metadata.collection_name\"\n    \"\"\"\n    value: Any = ctx\n    for part in token.split(\".\"):\n        if isinstance(value, dict) and part in value:\n            value = value[part]\n        else:                       # missing link in the chain\n            return \"\"\n    # final leaf \u2192 stringify\n    if isinstance(value, (dict, list)):\n        return json.dumps(value)\n    return str(value)\n\n\ndef render(template: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"Replace {a.b.c} placeholders in *template* using *ctx*.\"\"\"\n    def repl(match: re.Match[str]) -> str:\n        token = match.group(1).strip()\n        return _resolve(token, ctx)\n\n    return TOKEN_RE.sub(repl, template)\n\n\n# --------------------- main component -------------------------------- #\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use curly\u2011bracket placeholders. \"\n                \"Dot\u2011notation lets you reach nested keys, \"\n                \"e.g. `{page_content}` or `{metadata.collection_name}`.\"\n            ),\n            value=\"Text: {page_content}\",\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    # ---------- existing _clean_args unchanged ---------- #\n    \n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    # ---------- main logic with new renderer ------------ #\n    def parse_combined_text(self) -> Message:\n        \"\"\"Render template for every row / single Data item.\"\"\"\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        try:\n            df, data = self._clean_args()\n\n            lines = []\n            if df is not None:\n                for _, row in df.iterrows():\n                    lines.append(render(self.pattern, row.to_dict()))\n            else:  # Data\n                lines.append(render(self.pattern, data.data))\n\n            combined = self.sep.join(lines)\n            self.status = combined\n            return Message(text=combined)\n        except Exception as e:  # pragma: no cover\n            self.log(f\"Parser error: {e}\")\n            return Message(text=\"\")\n            \n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "mode": {"tool_mode": false, "trace_as_metadata": true, "options": ["Parser", "Stringify"], "required": false, "placeholder": "", "show": true, "name": "mode", "value": "Parser", "display_name": "Mode", "advanced": false, "dynamic": false, "info": "Convert into raw string instead of using a template.", "real_time_refresh": true, "title_case": false, "type": "tab", "_input_type": "TabInput"}, "pattern": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "pattern", "value": "You are a helpful, friendly, and respectful AI assistant for Quinn and their trusted circle (friends and family). You have access to a range of Quinn\u2019s personal services, which may include calendars, contacts, delivery status, financial tools, travel info, and more.\n\n{systemPrompt}\n\nYou can respond to requests from Quinn, as well as their approved friends or family, but always ensure your tone is warm, clear, and slightly more casual when talking to Quinn\u2019s inner circle.\n\nYour job is to:\n\u2013 Answer questions accurately using the available services and data\n\u2013 Offer helpful suggestions when asked\n\u2013 Be proactive in spotting helpful patterns or reminders\n\u2013 Always prioritize clarity, privacy, and utility\n\nRules:\n\u2013 If a question is vague, ask for clarification before acting.\n\u2013 If the request involves something sensitive (e.g. money, account access, or location sharing), confirm the request is from Quinn unless noted otherwise.\n\u2013 You can reference Quinn in third person when talking to friends/family (e.g., \u201cQuinn\u2019s flight lands at 4:30 PM\u201d), and in first person when responding to Quinn directly.\n\u2013 If unsure or lacking access, gracefully say so and offer alternatives.\n\nPersonal Info:\n\n{privateInfo}\n\nHere are the acceptable and allowed Tools for this user:\n\n{mcpIntegrations}\n\n\nAlways be helpful, friendly, and privacy-aware.\n\n\nOutput Format: Provide your results in a structured, readable format. Ask for clarification if any details are missing or unclear.\nYour output should align closely with the defined action item, ensuring accuracy and efficiency based on the context provided.\n\nDon't use markdown format\n\n\n\n", "display_name": "Template", "advanced": false, "input_types": ["Message"], "dynamic": true, "info": "Use curly\u2011bracket placeholders. Dot\u2011notation lets you reach nested keys, e.g. `{page_content}` or `{metadata.collection_name}`.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "sep": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sep", "value": "\n", "display_name": "Separator", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "String used to separate rows/items.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.", "icon": "braces", "base_classes": ["Message"], "display_name": "Parser", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "parsed_text", "hidden": false, "display_name": "Parsed Text", "method": "parse_combined_text", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["mode", "pattern", "input_data", "sep"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1", "official": false, "category": "saved_components", "key": "ParserComponent (PcN5J)", "score": 0.001}, "showNode": true, "type": "ParserComponent (PcN5J)", "id": "ParserComponent (PcN5J)-HfXAB"}, "selected": false, "measured": {"width": 320, "height": 395}, "dragging": false}, {"id": "MCPTools-0FwbH", "type": "genericNode", "position": {"x": 523.0483983190164, "y": -669.2997666925461}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "import re\nfrom typing import Any\n\nfrom langchain_core.tools import StructuredTool\n\nfrom langflow.base.mcp.util import (\n    MCPSseClient,\n    MCPStdioClient,\n    create_input_schema_from_json_schema,\n    create_tool_coroutine,\n    create_tool_func,\n)\nfrom langflow.custom import Component\nfrom langflow.inputs import DropdownInput, TableInput\nfrom langflow.inputs.inputs import InputTypes\nfrom langflow.io import MessageTextInput, MultilineInput, Output, TabInput\nfrom langflow.io.schema import flatten_schema, schema_to_langflow_inputs\nfrom langflow.logging import logger\nfrom langflow.schema import Message\n\n\ndef maybe_unflatten_dict(flat: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"If any key looks nested (contains a dot or \u201c[index]\u201d), rebuild the.\n\n    full nested structure; otherwise return flat as is.\n    \"\"\"\n    # Quick check: do we have any nested keys?\n    if not any(re.search(r\"\\.|\\[\\d+\\]\", key) for key in flat):\n        return flat\n\n    # Otherwise, unflatten into dicts/lists\n    nested: dict[str, Any] = {}\n    array_re = re.compile(r\"^(.+)\\[(\\d+)\\]$\")\n\n    for key, val in flat.items():\n        parts = key.split(\".\")\n        cur = nested\n        for i, part in enumerate(parts):\n            m = array_re.match(part)\n            # Array segment?\n            if m:\n                name, idx = m.group(1), int(m.group(2))\n                lst = cur.setdefault(name, [])\n                # Ensure list is big enough\n                while len(lst) <= idx:\n                    lst.append({})\n                if i == len(parts) - 1:\n                    lst[idx] = val\n                else:\n                    cur = lst[idx]\n            # Normal object key\n            elif i == len(parts) - 1:\n                cur[part] = val\n            else:\n                cur = cur.setdefault(part, {})\n\n    return nested\n\n\nclass MCPToolsComponent(Component):\n    schema_inputs: list[InputTypes] = []\n    stdio_client: MCPStdioClient = MCPStdioClient()\n    sse_client: MCPSseClient = MCPSseClient()\n    tools: list = []\n    tool_names: list[str] = []\n    _tool_cache: dict = {}  # Cache for tool objects\n    default_keys: list[str] = [\n        \"code\",\n        \"_type\",\n        \"mode\",\n        \"command\",\n        \"env\",\n        \"sse_url\",\n        \"tool_placeholder\",\n        \"tool_mode\",\n        \"tool\",\n        \"headers_input\",\n    ]\n\n    display_name = \"MCP Connection\"\n    description = \"Connect to an MCP server to use its tools.\"\n    icon = \"Mcp\"\n    name = \"MCPTools\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Stdio\", \"SSE\"],\n            value=\"Stdio\",\n            info=\"Select the connection mode\",\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"command\",\n            display_name=\"MCP Command\",\n            info=\"Command for MCP stdio connection\",\n            value=\"uvx mcp-server-fetch\",\n            show=True,\n            refresh_button=True,\n        ),\n        MessageTextInput(\n            name=\"env\",\n            display_name=\"Env\",\n            info=\"Env vars to include in mcp stdio connection (i.e. DEBUG=true)\",\n            value=\"\",\n            is_list=True,\n            show=True,\n            tool_mode=False,\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"sse_url\",\n            display_name=\"MCP SSE URL\",\n            info=\"URL for MCP SSE connection\",\n            show=False,\n            refresh_button=True,\n            value=\"MCP_SSE\",\n            real_time_refresh=True,\n        ),\n        TableInput(\n            name=\"headers_input\",\n            display_name=\"Headers\",\n            info=\"Headers to include in the tool\",\n            show=False,\n            real_time_refresh=True,\n            table_schema=[\n                {\n                    \"name\": \"key\",\n                    \"display_name\": \"Header\",\n                    \"type\": \"str\",\n                    \"description\": \"Header name\",\n                },\n                {\n                    \"name\": \"value\",\n                    \"display_name\": \"Value\",\n                    \"type\": \"str\",\n                    \"description\": \"Header value\",\n                },\n            ],\n            value=[],\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"tool\",\n            display_name=\"Tool\",\n            options=[],\n            value=\"\",\n            info=\"Select the tool to execute\",\n            show=True,\n            required=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            info=\"Placeholder for the tool\",\n            value=\"\",\n            show=False,\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_output\"),\n    ]\n\n    async def _validate_connection_params(self, mode: str, command: str | None = None, url: str | None = None) -> None:\n        \"\"\"Validate connection parameters based on mode.\"\"\"\n        if mode not in [\"Stdio\", \"SSE\"]:\n            msg = f\"Invalid mode: {mode}. Must be either 'Stdio' or 'SSE'\"\n            raise ValueError(msg)\n\n        if mode == \"Stdio\" and not command:\n            msg = \"Command is required for Stdio mode\"\n            raise ValueError(msg)\n        if mode == \"SSE\" and not url:\n            msg = \"URL is required for SSE mode\"\n            raise ValueError(msg)\n\n    def _process_headers(self, headers: Any) -> dict:\n        \"\"\"Process the headers input into a valid dictionary.\n\n        Args:\n            headers: The headers to process, can be dict, str, or list\n        Returns:\n            Processed dictionary\n        \"\"\"\n        if headers is None:\n            return {}\n        if isinstance(headers, dict):\n            return headers\n        if isinstance(headers, list):\n            processed_headers = {}\n            try:\n                for item in headers:\n                    if not self._is_valid_key_value_item(item):\n                        continue\n                    key = item[\"key\"]\n                    value = item[\"value\"]\n                    processed_headers[key] = value\n            except (KeyError, TypeError, ValueError) as e:\n                self.log(f\"Failed to process headers list: {e}\")\n                return {}  # Return empty dictionary instead of None\n            return processed_headers\n        return {}\n\n    def _is_valid_key_value_item(self, item: Any) -> bool:\n        \"\"\"Check if an item is a valid key-value dictionary.\"\"\"\n        return isinstance(item, dict) and \"key\" in item and \"value\" in item\n\n    async def _validate_schema_inputs(self, tool_obj) -> list[InputTypes]:\n        \"\"\"Validate and process schema inputs for a tool.\"\"\"\n        try:\n            if not tool_obj or not hasattr(tool_obj, \"inputSchema\"):\n                msg = \"Invalid tool object or missing input schema\"\n                raise ValueError(msg)\n\n            flat_schema = flatten_schema(tool_obj.inputSchema)\n            input_schema = create_input_schema_from_json_schema(flat_schema)\n            if not input_schema:\n                msg = f\"Empty input schema for tool '{tool_obj.name}'\"\n                raise ValueError(msg)\n\n            schema_inputs = schema_to_langflow_inputs(input_schema)\n            if not schema_inputs:\n                msg = f\"No input parameters defined for tool '{tool_obj.name}'\"\n                logger.warning(msg)\n                return []\n\n        except Exception as e:\n            msg = f\"Error validating schema inputs: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return schema_inputs\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Toggle the visibility of connection-specific fields based on the selected mode.\"\"\"\n        try:\n            if field_name == \"mode\":\n                self.remove_non_default_keys(build_config)\n                build_config[\"tool\"][\"options\"] = []\n                if field_value == \"Stdio\":\n                    build_config[\"command\"][\"show\"] = True\n                    build_config[\"env\"][\"show\"] = True\n                    build_config[\"headers_input\"][\"show\"] = False\n                    build_config[\"sse_url\"][\"show\"] = False\n                elif field_value == \"SSE\":\n                    build_config[\"command\"][\"show\"] = False\n                    build_config[\"env\"][\"show\"] = False\n                    build_config[\"sse_url\"][\"show\"] = True\n                    build_config[\"sse_url\"][\"value\"] = \"MCP_SSE\"\n                    build_config[\"headers_input\"][\"show\"] = True\n                    return build_config\n            if field_name in (\"command\", \"sse_url\", \"mode\"):\n                try:\n                    await self.update_tools(\n                        mode=build_config[\"mode\"][\"value\"],\n                        command=build_config[\"command\"][\"value\"],\n                        url=build_config[\"sse_url\"][\"value\"],\n                        env=build_config[\"env\"][\"value\"],\n                        headers=build_config[\"headers_input\"][\"value\"],\n                    )\n                    if \"tool\" in build_config:\n                        build_config[\"tool\"][\"options\"] = self.tool_names\n                except Exception as e:\n                    build_config[\"tool\"][\"options\"] = []\n                    msg = f\"Failed to update tools: {e!s}\"\n                    raise ValueError(msg) from e\n                else:\n                    return build_config\n            elif field_name == \"tool\":\n                if len(self.tools) == 0:\n                    await self.update_tools(\n                        mode=build_config[\"mode\"][\"value\"],\n                        command=build_config[\"command\"][\"value\"],\n                        url=build_config[\"sse_url\"][\"value\"],\n                        env=build_config[\"env\"][\"value\"],\n                        headers=build_config[\"headers_input\"][\"value\"],\n                    )\n                if self.tool is None:\n                    return build_config\n                tool_obj = None\n                for tool in self.tools:\n                    if tool.name == self.tool:\n                        tool_obj = tool\n                        break\n                if tool_obj is None:\n                    msg = f\"Tool {self.tool} not found in available tools: {self.tools}\"\n                    logger.warning(msg)\n                    return build_config\n                self.remove_non_default_keys(build_config)\n                await self._update_tool_config(build_config, field_value)\n            elif field_name == \"tool_mode\":\n                build_config[\"tool\"][\"show\"] = not field_value\n                for key, value in list(build_config.items()):\n                    if key not in self.default_keys and isinstance(value, dict) and \"show\" in value:\n                        build_config[key][\"show\"] = not field_value\n\n        except Exception as e:\n            msg = f\"Error in update_build_config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return build_config\n\n    def get_inputs_for_all_tools(self, tools: list) -> dict:\n        \"\"\"Get input schemas for all tools.\"\"\"\n        inputs = {}\n        for tool in tools:\n            if not tool or not hasattr(tool, \"name\"):\n                continue\n            try:\n                flat_schema = flatten_schema(tool.inputSchema)\n                input_schema = create_input_schema_from_json_schema(flat_schema)\n                langflow_inputs = schema_to_langflow_inputs(input_schema)\n                inputs[tool.name] = langflow_inputs\n            except (AttributeError, ValueError, TypeError, KeyError) as e:\n                msg = f\"Error getting inputs for tool {getattr(tool, 'name', 'unknown')}: {e!s}\"\n                logger.exception(msg)\n                continue\n        return inputs\n\n    def remove_input_schema_from_build_config(\n        self, build_config: dict, tool_name: str, input_schema: dict[list[InputTypes], Any]\n    ):\n        \"\"\"Remove the input schema for the tool from the build config.\"\"\"\n        # Keep only schemas that don't belong to the current tool\n        input_schema = {k: v for k, v in input_schema.items() if k != tool_name}\n        # Remove all inputs from other tools\n        for value in input_schema.values():\n            for _input in value:\n                if _input.name in build_config:\n                    build_config.pop(_input.name)\n\n    def remove_non_default_keys(self, build_config: dict) -> None:\n        \"\"\"Remove non-default keys from the build config.\"\"\"\n        for key in list(build_config.keys()):\n            if key not in self.default_keys:\n                build_config.pop(key)\n\n    async def _update_tool_config(self, build_config: dict, tool_name: str) -> None:\n        \"\"\"Update tool configuration with proper error handling.\"\"\"\n        if not self.tools:\n            await self.update_tools(\n                mode=build_config[\"mode\"][\"value\"],\n                command=build_config[\"command\"][\"value\"],\n                url=build_config[\"sse_url\"][\"value\"],\n                env=build_config[\"env\"][\"value\"],\n                headers=build_config[\"headers_input\"][\"value\"],\n            )\n\n        if not tool_name:\n            return\n\n        tool_obj = next((tool for tool in self.tools if tool.name == tool_name), None)\n        if not tool_obj:\n            msg = f\"Tool {tool_name} not found in available tools: {self.tools}\"\n            logger.warning(msg)\n            return\n\n        try:\n            # Get all tool inputs and remove old ones\n            input_schema_for_all_tools = self.get_inputs_for_all_tools(self.tools)\n            self.remove_input_schema_from_build_config(build_config, tool_name, input_schema_for_all_tools)\n\n            # Get and validate new inputs\n            self.schema_inputs = await self._validate_schema_inputs(tool_obj)\n            if not self.schema_inputs:\n                msg = f\"No input parameters to configure for tool '{tool_name}'\"\n                logger.info(msg)\n                return\n\n            # Add new inputs to build config\n            for schema_input in self.schema_inputs:\n                if not schema_input or not hasattr(schema_input, \"name\"):\n                    msg = \"Invalid schema input detected, skipping\"\n                    logger.warning(msg)\n                    continue\n\n                try:\n                    name = schema_input.name\n                    input_dict = schema_input.to_dict()\n                    input_dict.setdefault(\"value\", None)\n                    input_dict.setdefault(\"required\", True)\n                    build_config[name] = input_dict\n                except (AttributeError, KeyError, TypeError) as e:\n                    msg = f\"Error processing schema input {schema_input}: {e!s}\"\n                    logger.exception(msg)\n                    continue\n        except ValueError as e:\n            msg = f\"Schema validation error for tool {tool_name}: {e!s}\"\n            logger.exception(msg)\n            self.schema_inputs = []\n            return\n        except (AttributeError, KeyError, TypeError) as e:\n            msg = f\"Error updating tool config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> Message:\n        \"\"\"Build output with improved error handling and validation.\"\"\"\n        try:\n            await self.update_tools()\n            if self.tool != \"\":\n                exec_tool = self._tool_cache[self.tool]\n                tool_args = self.get_inputs_for_all_tools(self.tools)[self.tool]\n                kwargs = {}\n                for arg in tool_args:\n                    value = getattr(self, arg.name, None)\n                    if value:\n                        kwargs[arg.name] = value\n\n                unflattened_kwargs = maybe_unflatten_dict(kwargs)\n\n                output = await exec_tool.coroutine(**unflattened_kwargs)\n\n                return Message(text=output.content[len(output.content) - 1].text)\n            return Message(text=\"You must select a tool\", error=True)\n        except Exception as e:\n            msg = f\"Error in build_output: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def update_tools(\n        self,\n        mode: str | None = None,\n        command: str | None = None,\n        url: str | None = None,\n        env: list[str] | None = None,\n        headers: dict[str, str] | None = None,\n    ) -> list[StructuredTool]:\n        \"\"\"Connect to the MCP server and update available tools with improved error handling.\"\"\"\n        try:\n            if mode is None:\n                mode = self.mode\n            if command is None:\n                command = self.command\n            if env is None:\n                env = self.env\n            if url is None:\n                url = self.sse_url\n            if headers is None:\n                headers = self.headers_input\n            headers = self._process_headers(headers)\n            await self._validate_connection_params(mode, command, url)\n\n            if mode == \"Stdio\":\n                if not self.stdio_client.session:\n                    self.tools = await self.stdio_client.connect_to_server(command, env)\n            elif mode == \"SSE\" and not self.sse_client.session:\n                try:\n                    self.tools = await self.sse_client.connect_to_server(url, headers)\n                except ValueError as e:\n                    # URL validation error\n                    logger.error(f\"SSE URL validation error: {e}\")\n                    msg = f\"Invalid SSE URL configuration: {e}. Please check your Langflow deployment URL and port.\"\n                    raise ValueError(msg) from e\n                except ConnectionError as e:\n                    # Connection failed after retries\n                    logger.error(f\"SSE connection error: {e}\")\n                    msg = (\n                        f\"Could not connect to Langflow SSE endpoint: {e}. \"\n                        \"Please verify:\\n\"\n                        \"1. Langflow server is running\\n\"\n                        \"2. The SSE URL matches your Langflow deployment port\\n\"\n                        \"3. There are no network issues preventing the connection\"\n                    )\n                    raise ValueError(msg) from e\n                except Exception as e:\n                    logger.error(f\"Unexpected SSE error: {e}\")\n                    msg = f\"Unexpected error connecting to SSE endpoint: {e}\"\n                    raise ValueError(msg) from e\n\n            if not self.tools:\n                logger.warning(\"No tools returned from server\")\n                return []\n\n            tool_list = []\n            for tool in self.tools:\n                if not tool or not hasattr(tool, \"name\"):\n                    logger.warning(\"Invalid tool object detected, skipping\")\n                    continue\n\n                try:\n                    args_schema = create_input_schema_from_json_schema(tool.inputSchema)\n                    if not args_schema:\n                        logger.warning(f\"Empty schema for tool '{tool.name}', skipping\")\n                        continue\n\n                    client = self.stdio_client if self.mode == \"Stdio\" else self.sse_client\n                    if not client or not client.session:\n                        msg = f\"Invalid client session for tool '{tool.name}'\"\n                        raise ValueError(msg)\n\n                    tool_obj = StructuredTool(\n                        name=tool.name,\n                        description=tool.description or \"\",\n                        args_schema=args_schema,\n                        func=create_tool_func(tool.name, args_schema, client.session),\n                        coroutine=create_tool_coroutine(tool.name, args_schema, client.session),\n                        tags=[tool.name],\n                        metadata={},\n                    )\n                    tool_list.append(tool_obj)\n                    self._tool_cache[tool.name] = tool_obj\n                except (AttributeError, ValueError, TypeError, KeyError) as e:\n                    msg = f\"Error creating tool {getattr(tool, 'name', 'unknown')}: {e}\"\n                    logger.exception(msg)\n                    continue\n\n            self.tool_names = [tool.name for tool in self.tools if hasattr(tool, \"name\")]\n\n        except ValueError as e:\n            # Re-raise validation errors with clear messages\n            raise ValueError(str(e)) from e\n        except Exception as e:\n            logger.exception(\"Error updating tools\")\n            msg = f\"Failed to update tools: {e!s}\"\n            raise ValueError(msg) from e\n        else:\n            return tool_list\n\n    async def _get_tools(self):\n        \"\"\"Get cached tools or update if necessary.\"\"\"\n        # if not self.tools:\n        if self.mode == \"SSE\" and self.sse_url is None:\n            msg = \"SSE URL is not set\"\n            raise ValueError(msg)\n        return await self.update_tools()\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "command": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "command", "value": "Notion MCP Command", "display_name": "MCP Command", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Command for MCP stdio connection", "refresh_button": true, "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "env": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "env", "value": ["NOTION_KEY=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"], "display_name": "Env", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Env vars to include in mcp stdio connection (i.e. DEBUG=true)", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "headers_input": {"tool_mode": false, "is_list": true, "list_add_label": "Add More", "table_schema": {"columns": [{"name": "key", "display_name": "Header", "sortable": true, "filterable": true, "formatter": "text", "type": "str", "description": "Header name", "default": "None", "disable_edit": false, "edit_mode": "popover", "hidden": false}, {"name": "value", "display_name": "Value", "sortable": true, "filterable": true, "formatter": "text", "type": "str", "description": "Header value", "default": "None", "disable_edit": false, "edit_mode": "popover", "hidden": false}]}, "trigger_text": "Open table", "trigger_icon": "Table", "table_icon": "Table", "trace_as_metadata": true, "required": false, "placeholder": "", "show": false, "name": "headers_input", "value": [], "display_name": "Headers", "advanced": true, "dynamic": false, "info": "Headers to include in the tool", "real_time_refresh": true, "title_case": false, "type": "table", "_input_type": "TableInput"}, "mode": {"tool_mode": false, "trace_as_metadata": true, "options": ["Stdio", "SSE"], "required": false, "placeholder": "", "show": true, "name": "mode", "value": "Stdio", "display_name": "Mode", "advanced": false, "dynamic": false, "info": "Select the connection mode", "real_time_refresh": true, "title_case": false, "type": "tab", "_input_type": "TabInput"}, "sse_url": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "sse_url", "value": "MCP_SSE", "display_name": "MCP SSE URL", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "URL for MCP SSE connection", "real_time_refresh": true, "refresh_button": true, "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "tool": {"tool_mode": false, "trace_as_metadata": true, "options": ["API-get-user", "API-get-users", "API-get-self", "API-post-database-query", "API-post-search", "API-get-block-children", "API-patch-block-children", "API-retrieve-a-block", "API-update-a-block", "API-delete-a-block", "API-retrieve-a-page", "API-patch-page", "API-post-page", "API-create-a-database", "API-update-a-database", "API-retrieve-a-database", "API-retrieve-a-page-property", "API-retrieve-a-comment", "API-create-a-comment"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": true, "placeholder": "", "show": false, "name": "tool", "value": "API-retrieve-a-page", "display_name": "Tool", "advanced": false, "dynamic": false, "info": "Select the tool to execute", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "tool_placeholder": {"tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "tool_placeholder", "value": "", "display_name": "Tool Placeholder", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Placeholder for the tool", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "page_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "page_id", "value": "", "display_name": "Page Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Identifier for a Notion page", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "filter_properties": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "filter_properties", "value": "", "display_name": "Filter Properties", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "A list of page property value IDs associated with the page. Use this param to limit the response to a specific page property value or values. To retrieve multiple properties, specify each page property ID. For example: `?filter_properties=iAk8&filter_properties=b7dh`.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools_metadata", "value": [{"name": "API-get-user", "description": "Retrieve a user\nError Responses:\n400: 400", "tags": ["API-get-user"], "status": true, "display_name": "API-get-user", "display_description": "Retrieve a user\nError Responses:\n400: 400", "readonly": false, "args": {"user_id": {"title": "User Id", "type": "string"}}}, {"name": "API-get-users", "description": "List all users\nError Responses:\n400: 400", "tags": ["API-get-users"], "status": true, "display_name": "API-get-users", "display_description": "List all users\nError Responses:\n400: 400", "readonly": false, "args": {"start_cursor": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.", "title": "Start Cursor"}, "page_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 100, "description": "The number of items from the full list desired in the response. Maximum: 100", "title": "Page Size"}}}, {"name": "API-get-self", "description": "Retrieve your token's bot user", "tags": ["API-get-self"], "status": true, "display_name": "API-get-self", "display_description": "Retrieve your token's bot user", "readonly": false, "args": {}}, {"name": "API-post-database-query", "description": "Query a database", "tags": ["API-post-database-query"], "status": true, "display_name": "API-post-database-query", "display_description": "Query a database", "readonly": false, "args": {"database_id": {"description": "Identifier for a Notion database.", "title": "Database Id", "type": "string"}, "filter_properties": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "A list of page property value IDs associated with the database. Use this param to limit the response to a specific page property value or values for pages that meet the `filter` criteria.", "title": "Filter Properties"}, "filter": {"anyOf": [{"$ref": "#/$defs/AnonModel0"}, {"type": "null"}], "default": null, "description": "When supplied, limits which pages are returned based on the [filter conditions](ref:post-database-query-filter)."}, "sorts": {"anyOf": [{"items": {"$ref": "#/$defs/AnonModel1"}, "type": "array"}, {"type": "null"}], "default": null, "description": "When supplied, orders the results based on the provided [sort criteria](ref:post-database-query-sort).", "title": "Sorts"}, "start_cursor": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "When supplied, returns a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.", "title": "Start Cursor"}, "page_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 100, "description": "The number of items from the full list desired in the response. Maximum: 100", "title": "Page Size"}, "archived": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": null, "title": "Archived"}, "in_trash": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": null, "title": "In Trash"}}}, {"name": "API-post-search", "description": "Search by title", "tags": ["API-post-search"], "status": true, "display_name": "API-post-search", "display_description": "Search by title", "readonly": false, "args": {"query": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The text that the API compares page and database titles against.", "title": "Query"}, "sort": {"anyOf": [{"$ref": "#/$defs/AnonModel0"}, {"type": "null"}], "default": null, "description": "A set of criteria, `direction` and `timestamp` keys, that orders the results. The **only** supported timestamp value is `\"last_edited_time\"`. Supported `direction` values are `\"ascending\"` and `\"descending\"`. If `sort` is not provided, then the most recently edited results are returned first."}, "filter": {"anyOf": [{"$ref": "#/$defs/AnonModel1"}, {"type": "null"}], "default": null, "description": "A set of criteria, `value` and `property` keys, that limits the results to either only pages or only databases. Possible `value` values are `\"page\"` or `\"database\"`. The only supported `property` value is `\"object\"`."}, "start_cursor": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A `cursor` value returned in a previous response that If supplied, limits the response to results starting after the `cursor`. If not supplied, then the first page of results is returned. Refer to [pagination](https://developers.notion.com/reference/intro#pagination) for more details.", "title": "Start Cursor"}, "page_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 100, "description": "The number of items from the full list to include in the response. Maximum: `100`.", "title": "Page Size"}}}, {"name": "API-get-block-children", "description": "Retrieve block children", "tags": ["API-get-block-children"], "status": true, "display_name": "API-get-block-children", "display_description": "Retrieve block children", "readonly": false, "args": {"block_id": {"description": "Identifier for a [block](ref:block)", "title": "Block Id", "type": "string"}, "start_cursor": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.", "title": "Start Cursor"}, "page_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 100, "description": "The number of items from the full list desired in the response. Maximum: 100", "title": "Page Size"}}}, {"name": "API-retrieve-a-block", "description": "Retrieve a block", "tags": ["API-retrieve-a-block"], "status": true, "display_name": "API-retrieve-a-block", "display_description": "Retrieve a block", "readonly": false, "args": {"block_id": {"description": "Identifier for a Notion block", "title": "Block Id", "type": "string"}}}, {"name": "API-update-a-block", "description": "Update a block", "tags": ["API-update-a-block"], "status": true, "display_name": "API-update-a-block", "display_description": "Update a block", "readonly": false, "args": {"block_id": {"description": "Identifier for a Notion block", "title": "Block Id", "type": "string"}, "type": {"anyOf": [{"$ref": "#/$defs/AnonModel0"}, {"type": "null"}], "default": null, "description": "The [block object `type`](ref:block#block-object-keys) value with the properties to be updated. Currently only `text` (for supported block types) and `checked` (for `to_do` blocks) fields can be updated."}, "archived": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": true, "description": "Set to true to archive (delete) a block. Set to false to un-archive (restore) a block.", "title": "Archived"}}}, {"name": "API-delete-a-block", "description": "Delete a block", "tags": ["API-delete-a-block"], "status": true, "display_name": "API-delete-a-block", "display_description": "Delete a block", "readonly": false, "args": {"block_id": {"description": "Identifier for a Notion block", "title": "Block Id", "type": "string"}}}, {"name": "API-retrieve-a-page", "description": "Retrieve a page", "tags": ["API-retrieve-a-page"], "status": true, "display_name": "API-retrieve-a-page", "display_description": "Retrieve a page", "readonly": false, "args": {"page_id": {"description": "Identifier for a Notion page", "title": "Page Id", "type": "string"}, "filter_properties": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A list of page property value IDs associated with the page. Use this param to limit the response to a specific page property value or values. To retrieve multiple properties, specify each page property ID. For example: `?filter_properties=iAk8&filter_properties=b7dh`.", "title": "Filter Properties"}}}, {"name": "API-post-page", "description": "Create a page", "tags": ["API-post-page"], "status": true, "display_name": "API-post-page", "display_description": "Create a page", "readonly": false, "args": {"parent": {"$ref": "#/$defs/AnonModel0"}, "properties": {"$ref": "#/$defs/langflow__base__mcp__util__AnonModel1__3"}, "children": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "The content to be rendered on the new page, represented as an array of [block objects](https://developers.notion.com/reference/block).", "title": "Children"}, "icon": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The icon of the new page. Either an [emoji object](https://developers.notion.com/reference/emoji-object) or an [external file object](https://developers.notion.com/reference/file-object)..", "title": "Icon"}, "cover": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The cover image of the new page, represented as a [file object](https://developers.notion.com/reference/file-object).", "title": "Cover"}}}, {"name": "API-retrieve-a-database", "description": "Retrieve a database", "tags": ["API-retrieve-a-database"], "status": true, "display_name": "API-retrieve-a-database", "display_description": "Retrieve a database", "readonly": false, "args": {"database_id": {"description": "An identifier for the Notion database.", "title": "Database Id", "type": "string"}}}, {"name": "API-retrieve-a-page-property", "description": "Retrieve a page property item", "tags": ["API-retrieve-a-page-property"], "status": true, "display_name": "API-retrieve-a-page-property", "display_description": "Retrieve a page property item", "readonly": false, "args": {"page_id": {"description": "Identifier for a Notion page", "title": "Page Id", "type": "string"}, "property_id": {"description": "Identifier for a page [property](https://developers.notion.com/reference/page#all-property-values)", "title": "Property Id", "type": "string"}, "page_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "description": "For paginated properties. The max number of property item objects on a page. The default size is 100", "title": "Page Size"}, "start_cursor": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "For paginated properties.", "title": "Start Cursor"}}}, {"name": "API-retrieve-a-comment", "description": "Retrieve comments", "tags": ["API-retrieve-a-comment"], "status": true, "display_name": "API-retrieve-a-comment", "display_description": "Retrieve comments", "readonly": false, "args": {"block_id": {"description": "Identifier for a Notion block or page", "title": "Block Id", "type": "string"}, "start_cursor": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.", "title": "Start Cursor"}, "page_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "description": "The number of items from the full list desired in the response. Maximum: 100", "title": "Page Size"}}}, {"name": "API-create-a-comment", "description": "Create comment", "tags": ["API-create-a-comment"], "status": true, "display_name": "API-create-a-comment", "display_description": "Create comment", "readonly": false, "args": {"parent": {"$ref": "#/$defs/AnonModel0", "description": "The page that contains the comment"}, "rich_text": {"items": {"$ref": "#/$defs/langflow__base__mcp__util__AnonModel1__2"}, "title": "Rich Text", "type": "array"}}}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}}, "description": "Connect to an MCP server to use its tools.", "icon": "Mcp", "base_classes": ["Message"], "display_name": "MCP Connection", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": false, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["mode", "command", "env", "sse_url", "headers_input", "tool", "tool_placeholder"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": true, "category": "tools", "key": "MCPTools", "score": 0.003932426697386162, "lf_version": "1.4.1"}, "showNode": true, "type": "MCPTools", "id": "MCPTools-0FwbH"}, "selected": false, "measured": {"width": 320, "height": 529}, "dragging": false}, {"id": "Agent-1cE1G", "type": "genericNode", "position": {"x": 1075.9269377593812, "y": -580.052676374283}, "data": {"description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "id": "Agent-1cE1G", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": null, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "pinned": false, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Anthropic"}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n", "input_types": []}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "get information from notion doc(s)"}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15, "input_types": []}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "n_messages": {"_input_type": "IntInput", "advanced": true, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100, "input_types": []}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending", "input_types": []}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User", "input_types": []}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "You are a helpful assistant that retrieves information from notion docs when someone asks about getting from notion docs"}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true, "input_types": []}, "max_tokens": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_tokens", "value": 4096, "display_name": "Max Tokens", "advanced": true, "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "title_case": false, "type": "int", "_input_type": "IntInput", "input_types": []}, "model_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["claude-3-7-sonnet-latest", "claude-3-5-sonnet-latest", "claude-3-5-haiku-latest", "claude-3-opus-latest", "claude-3-sonnet-20240229", "claude-3-haiku-20240307", "claude-3-7-sonnet-20250219", "claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022", "claude-3-5-sonnet-20240620", "claude-3-haiku-20240307", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-2.1", "claude-2.0"], "options_metadata": [], "combobox": true, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "model_name", "value": "claude-3-7-sonnet-latest", "display_name": "Model Name", "advanced": false, "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "real_time_refresh": false, "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput", "input_types": []}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Anthropic API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "Your Anthropic API key.", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "temperature": {"tool_mode": false, "min_label": "", "max_label": "", "min_label_icon": "", "max_label_icon": "", "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "range_spec": {"step_type": "float", "min": 0, "max": 1, "step": 0.01}, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.1, "display_name": "Temperature", "advanced": true, "dynamic": false, "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].", "title_case": false, "type": "slider", "_input_type": "SliderInput", "input_types": []}, "base_url": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "base_url", "value": "https://api.anthropic.com", "display_name": "Anthropic API URL", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tool_model_enabled": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tool_model_enabled", "value": false, "display_name": "Enable Tool Models", "advanced": true, "dynamic": false, "info": "Select if you want to use models that can work with tools. If yes, only those models will be shown.", "real_time_refresh": true, "title_case": false, "type": "bool", "_input_type": "BoolInput", "input_types": []}, "prefill": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "prefill", "value": "", "display_name": "Prefill", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Prefill text to guide the model's response.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools_metadata", "value": [{"name": "notion_assistant", "description": "A helpful assistant with access to your notion docs", "tags": ["Agent"], "status": true, "display_name": "message_response", "display_description": "Agent. message_response - Define the agent's instructions, then enter a task to complete using tools.", "readonly": false, "args": {"input_value": {"default": "", "description": "The input provided by the user for the agent to process.", "title": "Input Value", "type": "string"}, "order": {"default": "Ascending", "description": "Order of the messages.", "enum": ["Ascending", "Descending"], "title": "Order", "type": "string"}}}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}}, "tool_mode": true, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "selected": false, "measured": {"width": 320, "height": 622}, "dragging": false}], "edges": [{"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParseData", "id": "ParseData-nBP1u", "name": "text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "relevant_context", "id": "Prompt-X7BRY", "inputTypes": ["Message"], "type": "str"}}, "id": "reactflow__edge-ParseData-nBP1u{\u0153dataType\u0153:\u0153ParseData\u0153,\u0153id\u0153:\u0153ParseData-nBP1u\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-X7BRY{\u0153fieldName\u0153:\u0153relevant_context\u0153,\u0153id\u0153:\u0153Prompt-X7BRY\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParseData-nBP1u", "sourceHandle": "{\u0153dataType\u0153:\u0153ParseData\u0153,\u0153id\u0153:\u0153ParseData-nBP1u\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt-X7BRY", "targetHandle": "{\u0153fieldName\u0153:\u0153relevant_context\u0153,\u0153id\u0153:\u0153Prompt-X7BRY\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "Prompt", "id": "Prompt-X7BRY", "name": "prompt", "output_types": ["Message"]}, "targetHandle": {"fieldName": "system_prompt", "id": "Agent-MUIYx", "inputTypes": ["Message"], "type": "str"}}, "id": "reactflow__edge-Prompt-X7BRY{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-X7BRY\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-MUIYx{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-MUIYx\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "Prompt-X7BRY", "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-X7BRY\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Agent-MUIYx", "targetHandle": "{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-MUIYx\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "Agent", "id": "Agent-iCl6s", "name": "response", "output_types": ["Message"]}, "targetHandle": {"fieldName": "input_value", "id": "ChatOutput-CJqT6", "inputTypes": ["Data", "DataFrame", "Message"], "type": "other"}}, "id": "reactflow__edge-Agent-iCl6s{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-CJqT6{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-CJqT6\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "Agent-iCl6s", "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ChatOutput-CJqT6", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-CJqT6\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"source": "OpenAIEmbeddings-xjkDU", "sourceHandle": "{\u0153dataType\u0153:\u0153OpenAIEmbeddings\u0153,\u0153id\u0153:\u0153OpenAIEmbeddings-xjkDU\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}", "target": "AstraDB-s7MsN", "targetHandle": "{\u0153fieldName\u0153:\u0153embedding_model\u0153,\u0153id\u0153:\u0153AstraDB-s7MsN\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "embedding_model", "id": "AstraDB-s7MsN", "inputTypes": ["Embeddings"], "type": "other"}, "sourceHandle": {"dataType": "OpenAIEmbeddings", "id": "OpenAIEmbeddings-xjkDU", "name": "embeddings", "output_types": ["Embeddings"]}}, "id": "xy-edge__OpenAIEmbeddings-xjkDU{\u0153dataType\u0153:\u0153OpenAIEmbeddings\u0153,\u0153id\u0153:\u0153OpenAIEmbeddings-xjkDU\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-AstraDB-s7MsN{\u0153fieldName\u0153:\u0153embedding_model\u0153,\u0153id\u0153:\u0153AstraDB-s7MsN\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "AstraDB-s7MsN", "sourceHandle": "{\u0153dataType\u0153:\u0153AstraDB\u0153,\u0153id\u0153:\u0153AstraDB-s7MsN\u0153,\u0153name\u0153:\u0153search_results\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParseData-nBP1u", "targetHandle": "{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153ParseData-nBP1u\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "data", "id": "ParseData-nBP1u", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "AstraDB", "id": "AstraDB-s7MsN", "name": "search_results", "output_types": ["Data"]}}, "id": "xy-edge__AstraDB-s7MsN{\u0153dataType\u0153:\u0153AstraDB\u0153,\u0153id\u0153:\u0153AstraDB-s7MsN\u0153,\u0153name\u0153:\u0153search_results\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParseData-nBP1u{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153ParseData-nBP1u\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ComposioAPI-4bj9I", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-4bj9I\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-393q0", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-393q0\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-393q0", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioAPI", "id": "ComposioAPI-4bj9I", "name": "tools", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioAPI-4bj9I{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-4bj9I\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-393q0{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-393q0\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ComposioAPI-OWyfp", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-OWyfp\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-393q0", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-393q0\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-393q0", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioAPI", "id": "ComposioAPI-OWyfp", "name": "tools", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioAPI-OWyfp{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-OWyfp\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-393q0{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-393q0\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ComposioAPI-liqQA", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-liqQA\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-393q0", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-393q0\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-393q0", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioAPI", "id": "ComposioAPI-liqQA", "name": "tools", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioAPI-liqQA{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-liqQA\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-393q0{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-393q0\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Agent-393q0", "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-393q0\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-iCl6s", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-iCl6s", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "Agent", "id": "Agent-393q0", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__Agent-393q0{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-393q0\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-iCl6s{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Prompt-UAgpm", "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-UAgpm\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Agent-io5ES", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-io5ES\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "Agent-io5ES", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "Prompt", "id": "Prompt-UAgpm", "name": "prompt", "output_types": ["Message"]}}, "id": "xy-edge__Prompt-UAgpm{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-UAgpm\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-io5ES{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-io5ES\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ComposioAPI-HqgrR", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-HqgrR\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-AxoK2", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-AxoK2\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-AxoK2", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioAPI", "id": "ComposioAPI-HqgrR", "name": "tools", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioAPI-HqgrR{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-HqgrR\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-AxoK2{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-AxoK2\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ComposioAPI-V6lCe", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-V6lCe\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-Nj4XB", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-Nj4XB\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-Nj4XB", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioAPI", "id": "ComposioAPI-V6lCe", "name": "tools", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioAPI-V6lCe{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI-V6lCe\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-Nj4XB{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-Nj4XB\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ComposioAPI (vxCTF)-AhbjM", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI (vxCTF)-AhbjM\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-AxoK2", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-AxoK2\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-AxoK2", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioAPI", "id": "ComposioAPI (vxCTF)-AhbjM", "name": "tools", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioAPI (vxCTF)-AhbjM{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI (vxCTF)-AhbjM\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-AxoK2{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-AxoK2\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Agent-AxoK2", "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-AxoK2\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-iCl6s", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-iCl6s", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "Agent", "id": "Agent-AxoK2", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__Agent-AxoK2{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-AxoK2\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-iCl6s{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ComposioAPI (WWSrI)-YL4y5", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI (WWSrI)-YL4y5\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-io5ES", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-io5ES\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-io5ES", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioAPI", "id": "ComposioAPI (WWSrI)-YL4y5", "name": "tools", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioAPI (WWSrI)-YL4y5{\u0153dataType\u0153:\u0153ComposioAPI\u0153,\u0153id\u0153:\u0153ComposioAPI (WWSrI)-YL4y5\u0153,\u0153name\u0153:\u0153tools\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-io5ES{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-io5ES\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ChatInput-KOfOG", "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-KOfOG\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "JsonStringToData (pRRCC)-YM5Sx", "targetHandle": "{\u0153fieldName\u0153:\u0153json_string\u0153,\u0153id\u0153:\u0153JsonStringToData (pRRCC)-YM5Sx\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "json_string", "id": "JsonStringToData (pRRCC)-YM5Sx", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ChatInput", "id": "ChatInput-KOfOG", "name": "message", "output_types": ["Message"]}}, "id": "xy-edge__ChatInput-KOfOG{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-KOfOG\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-JsonStringToData (pRRCC)-YM5Sx{\u0153fieldName\u0153:\u0153json_string\u0153,\u0153id\u0153:\u0153JsonStringToData (pRRCC)-YM5Sx\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "JsonStringToData (pRRCC)-YM5Sx", "sourceHandle": "{\u0153dataType\u0153:\u0153JsonStringToData (pRRCC)\u0153,\u0153id\u0153:\u0153JsonStringToData (pRRCC)-YM5Sx\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent (OULbj)-0zyx7", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-0zyx7\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_data", "id": "ParserComponent (OULbj)-0zyx7", "inputTypes": ["DataFrame", "Data"], "type": "other"}, "sourceHandle": {"dataType": "JsonStringToData (pRRCC)", "id": "JsonStringToData (pRRCC)-YM5Sx", "name": "data", "output_types": ["Data"]}}, "id": "xy-edge__JsonStringToData (pRRCC)-YM5Sx{\u0153dataType\u0153:\u0153JsonStringToData (pRRCC)\u0153,\u0153id\u0153:\u0153JsonStringToData (pRRCC)-YM5Sx\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent (OULbj)-0zyx7{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-0zyx7\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ParserComponent (OULbj)-0zyx7", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent (OULbj)\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-0zyx7\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Agent-WVuiE", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-WVuiE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "Agent-WVuiE", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ParserComponent (OULbj)", "id": "ParserComponent (OULbj)-0zyx7", "name": "parsed_text", "output_types": ["Message"]}}, "id": "xy-edge__ParserComponent (OULbj)-0zyx7{\u0153dataType\u0153:\u0153ParserComponent (OULbj)\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-0zyx7\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-WVuiE{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-WVuiE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Agent-AxoK2", "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-AxoK2\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-WVuiE", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-WVuiE\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-WVuiE", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "Agent", "id": "Agent-AxoK2", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__Agent-AxoK2{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-AxoK2\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-WVuiE{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-WVuiE\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "animated": false, "className": "", "selected": false}, {"source": "Agent-WVuiE", "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-WVuiE\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt-ijdf5", "targetHandle": "{\u0153fieldName\u0153:\u0153calendar\u0153,\u0153id\u0153:\u0153Prompt-ijdf5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "calendar", "id": "Prompt-ijdf5", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "Agent", "id": "Agent-WVuiE", "name": "response", "output_types": ["Message"]}}, "id": "xy-edge__Agent-WVuiE{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-WVuiE\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-ijdf5{\u0153fieldName\u0153:\u0153calendar\u0153,\u0153id\u0153:\u0153Prompt-ijdf5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ParserComponent (OULbj)-0zyx7", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent (OULbj)\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-0zyx7\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt-ijdf5", "targetHandle": "{\u0153fieldName\u0153:\u0153original_message\u0153,\u0153id\u0153:\u0153Prompt-ijdf5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "original_message", "id": "Prompt-ijdf5", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ParserComponent (OULbj)", "id": "ParserComponent (OULbj)-0zyx7", "name": "parsed_text", "output_types": ["Message"]}}, "id": "xy-edge__ParserComponent (OULbj)-0zyx7{\u0153dataType\u0153:\u0153ParserComponent (OULbj)\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-0zyx7\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-ijdf5{\u0153fieldName\u0153:\u0153original_message\u0153,\u0153id\u0153:\u0153Prompt-ijdf5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Prompt-ijdf5", "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-ijdf5\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Agent-iCl6s", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "Agent-iCl6s", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "Prompt", "id": "Prompt-ijdf5", "name": "prompt", "output_types": ["Message"]}}, "id": "xy-edge__Prompt-ijdf5{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-ijdf5\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-iCl6s{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "JsonStringToData (pRRCC)-YM5Sx", "sourceHandle": "{\u0153dataType\u0153:\u0153JsonStringToData (pRRCC)\u0153,\u0153id\u0153:\u0153JsonStringToData (pRRCC)-YM5Sx\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent (OULbj)-rBn5X", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-rBn5X\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_data", "id": "ParserComponent (OULbj)-rBn5X", "inputTypes": ["DataFrame", "Data"], "type": "other"}, "sourceHandle": {"dataType": "JsonStringToData (pRRCC)", "id": "JsonStringToData (pRRCC)-YM5Sx", "name": "data", "output_types": ["Data"]}}, "id": "xy-edge__JsonStringToData (pRRCC)-YM5Sx{\u0153dataType\u0153:\u0153JsonStringToData (pRRCC)\u0153,\u0153id\u0153:\u0153JsonStringToData (pRRCC)-YM5Sx\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent (OULbj)-rBn5X{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-rBn5X\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "animated": false, "className": "", "selected": false}, {"source": "JsonStringToData (pRRCC)-YM5Sx", "sourceHandle": "{\u0153dataType\u0153:\u0153JsonStringToData (pRRCC)\u0153,\u0153id\u0153:\u0153JsonStringToData (pRRCC)-YM5Sx\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "FilterData-9nrl4", "targetHandle": "{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153FilterData-9nrl4\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "data", "id": "FilterData-9nrl4", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "JsonStringToData (pRRCC)", "id": "JsonStringToData (pRRCC)-YM5Sx", "name": "data", "output_types": ["Data"]}}, "id": "xy-edge__JsonStringToData (pRRCC)-YM5Sx{\u0153dataType\u0153:\u0153JsonStringToData (pRRCC)\u0153,\u0153id\u0153:\u0153JsonStringToData (pRRCC)-YM5Sx\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-FilterData-9nrl4{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153FilterData-9nrl4\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "FilterData-9nrl4", "sourceHandle": "{\u0153dataType\u0153:\u0153FilterData\u0153,\u0153id\u0153:\u0153FilterData-9nrl4\u0153,\u0153name\u0153:\u0153filtered_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "FilterData-Jccdc", "targetHandle": "{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153FilterData-Jccdc\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "data", "id": "FilterData-Jccdc", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "FilterData", "id": "FilterData-9nrl4", "name": "filtered_data", "output_types": ["Data"]}}, "id": "xy-edge__FilterData-9nrl4{\u0153dataType\u0153:\u0153FilterData\u0153,\u0153id\u0153:\u0153FilterData-9nrl4\u0153,\u0153name\u0153:\u0153filtered_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-FilterData-Jccdc{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153FilterData-Jccdc\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ParserComponent (OULbj)-rBn5X", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent (OULbj)\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-rBn5X\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "FilterData-Jccdc", "targetHandle": "{\u0153fieldName\u0153:\u0153filter_criteria\u0153,\u0153id\u0153:\u0153FilterData-Jccdc\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "filter_criteria", "id": "FilterData-Jccdc", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ParserComponent (OULbj)", "id": "ParserComponent (OULbj)-rBn5X", "name": "parsed_text", "output_types": ["Message"]}}, "id": "xy-edge__ParserComponent (OULbj)-rBn5X{\u0153dataType\u0153:\u0153ParserComponent (OULbj)\u0153,\u0153id\u0153:\u0153ParserComponent (OULbj)-rBn5X\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-FilterData-Jccdc{\u0153fieldName\u0153:\u0153filter_criteria\u0153,\u0153id\u0153:\u0153FilterData-Jccdc\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "FilterData-Jccdc", "sourceHandle": "{\u0153dataType\u0153:\u0153FilterData\u0153,\u0153id\u0153:\u0153FilterData-Jccdc\u0153,\u0153name\u0153:\u0153filtered_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent (PcN5J)-HfXAB", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (PcN5J)-HfXAB\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_data", "id": "ParserComponent (PcN5J)-HfXAB", "inputTypes": ["DataFrame", "Data"], "type": "other"}, "sourceHandle": {"dataType": "FilterData", "id": "FilterData-Jccdc", "name": "filtered_data", "output_types": ["Data"]}}, "id": "xy-edge__FilterData-Jccdc{\u0153dataType\u0153:\u0153FilterData\u0153,\u0153id\u0153:\u0153FilterData-Jccdc\u0153,\u0153name\u0153:\u0153filtered_data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent (PcN5J)-HfXAB{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (PcN5J)-HfXAB\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ParserComponent (PcN5J)-HfXAB", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent (PcN5J)\u0153,\u0153id\u0153:\u0153ParserComponent (PcN5J)-HfXAB\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Agent-iCl6s", "targetHandle": "{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "system_prompt", "id": "Agent-iCl6s", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ParserComponent (PcN5J)", "id": "ParserComponent (PcN5J)-HfXAB", "name": "parsed_text", "output_types": ["Message"]}}, "id": "xy-edge__ParserComponent (PcN5J)-HfXAB{\u0153dataType\u0153:\u0153ParserComponent (PcN5J)\u0153,\u0153id\u0153:\u0153ParserComponent (PcN5J)-HfXAB\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-iCl6s{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "MCPTools-0FwbH", "sourceHandle": "{\u0153dataType\u0153:\u0153MCPTools\u0153,\u0153id\u0153:\u0153MCPTools-0FwbH\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-1cE1G", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-1cE1G\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-1cE1G", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "MCPTools", "id": "MCPTools-0FwbH", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__MCPTools-0FwbH{\u0153dataType\u0153:\u0153MCPTools\u0153,\u0153id\u0153:\u0153MCPTools-0FwbH\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-1cE1G{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-1cE1G\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Agent-1cE1G", "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-1cE1G\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-iCl6s", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-iCl6s", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "Agent", "id": "Agent-1cE1G", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__Agent-1cE1G{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-1cE1G\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-iCl6s{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-iCl6s\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}], "viewport": {"x": 248.98354853212544, "y": 420.9762787578623, "zoom": 0.3262549973356045}}, "is_component": false, "updated_at": "2025-05-18T00:24:30+00:00", "webhook": false, "endpoint_name": "co-text-primary-agent-1", "tags": [], "locked": false, "mcp_enabled": true, "action_name": null, "action_description": null, "access_type": "PRIVATE", "id": "f88757ff-d27d-493f-8f61-6e6bc73bcce5", "user_id": "154bb2fa-5a61-447f-bdf9-a5b73f8d8516", "folder_id": "a8a36b90-719e-4e7f-b9ab-9208ffd9acff"}