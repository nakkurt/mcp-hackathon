{"name": "Entrypoint Orchestrator (quinn)", "description": "A simple but powerful starter agent.", "icon": null, "icon_bg_color": null, "gradient": null, "data": {"nodes": [{"data": {"id": "note-PNbI6", "node": {"description": "### \ud83d\udca1 Add your OpenAI API key here\ud83d\udc47", "display_name": "", "documentation": "", "template": {"backgroundColor": "transparent"}}, "type": "note"}, "id": "note-PNbI6", "measured": {"height": 324, "width": 324}, "position": {"x": 1648.6876745095624, "y": 253.8646618156497}, "selected": false, "type": "noteNode"}, {"data": {"id": "ChatInput-uXlLj", "node": {"base_classes": ["Message"], "beta": false, "category": "inputs", "conditional_paths": [], "custom_fields": {}, "description": "Get chat inputs from the Playground.", "display_name": "Chat Input", "documentation": "", "edited": false, "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "files", "background_color", "chat_icon", "text_color"], "frozen": false, "icon": "MessagesSquare", "key": "ChatInput", "legacy": false, "metadata": {}, "minimized": true, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Message", "method": "message_response", "name": "message", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__", "hidden": false}], "pinned": false, "score": 0.0020353564437605998, "template": {"_type": "Component", "background_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Background Color", "dynamic": false, "info": "The background color of the icon.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "background_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "chat_icon": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Icon", "dynamic": false, "info": "The icon of the message.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "chat_icon", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"}, "files": {"_input_type": "FileInput", "advanced": true, "display_name": "Files", "dynamic": false, "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "file_path": "", "info": "Files to be sent with the message.", "list": true, "list_add_label": "Add More", "name": "files", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "file", "value": ""}, "input_value": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Text", "dynamic": false, "info": "Message to be passed as input.", "input_types": [], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "[{\n\"user\": \"self\",\n\"group\": \"wifey\",\n\"message\": \"what meetings does quinn have coming up?\",\n\"config\": {\n  \"wifey\": {\n    \"id\": \"wifey\",\n    \"name\": \"Wifey\",\n    \"emoji\": \"\ud83e\udde1\",\n    \"systemPrompt\": \"You are a warm, supportive personal agent for my wife. You help manage our family calendar, keep track of important events, and provide thoughtful reminders. Your tone is caring and considerate. You know our family routines, and you're always looking out for ways to make life easier and more organized for us.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Our son Tommy's health insurance number: ABC55443322\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Health Tracker\"\n      },\n      {\n        \"content\": \"Alaska Airlines Mileage Plan #: 11223344\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Chore List\"\n      },\n      {\n        \"content\": \"Safe word: \\\"Marzipan\\\"\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Family Contacts\"\n      },\n      {\n        \"content\": \"Emergency chocolate stash: Bottom-left drawer, behind the quinoa\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Meal Planner\"\n      },\n      {\n        \"content\": \"Spotify playlist: \\\"Drive Home Vibes\\\"\",\n        \"mcp\": \"Gmail MCP\",\n        \"tool\": \"list_emails\",\n        \"resource\": \"Personal Inbox\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Health Tracker\",\n          \"Chore List\",\n          \"Meal Planner\"\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Family Calendar\",\n          \"Date Nights\"\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Personal Inbox\"\n        ]\n      },\n      {\n        \"name\": \"Google Contacts\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Contacts\"\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Server\"\n        ]\n      }\n    ]\n  \n  }\n}\n},\n{\n\"user\": \"self\",\n\"group\": \"wifey\",\n\"message\": \"what meetings does quinn have coming up?\",\n\"config\": {\n  \"wifey\": {\n    \"id\": \"wifey\",\n    \"name\": \"Wifey\",\n    \"emoji\": \"\ud83e\udde1\",\n    \"systemPrompt\": \"You are a warm, supportive personal agent for my wife. You help manage our family calendar, keep track of important events, and provide thoughtful reminders. Your tone is caring and considerate. You know our family routines, and you're always looking out for ways to make life easier and more organized for us.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Our son Tommy's health insurance number: ABC55443322\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Health Tracker\"\n      },\n      {\n        \"content\": \"Alaska Airlines Mileage Plan #: 11223344\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Chore List\"\n      },\n      {\n        \"content\": \"Safe word: \\\"Marzipan\\\"\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Family Contacts\"\n      },\n      {\n        \"content\": \"Emergency chocolate stash: Bottom-left drawer, behind the quinoa\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Meal Planner\"\n      },\n      {\n        \"content\": \"Spotify playlist: \\\"Drive Home Vibes\\\"\",\n        \"mcp\": \"Gmail MCP\",\n        \"tool\": \"list_emails\",\n        \"resource\": \"Personal Inbox\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Health Tracker\",\n          \"Chore List\",\n          \"Meal Planner\"\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Family Calendar\",\n          \"Date Nights\"\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Personal Inbox\"\n        ]\n      },\n      {\n        \"name\": \"Google Contacts\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Contacts\"\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Server\"\n        ]\n      }\n    ]\n  \n  }\n}\n},\n{\n\"user\": \"self\",\n\"group\": \"wifey\",\n\"message\": \"what meetings does quinn have coming up?\",\n\"config\": {\n  \"wifey\": {\n    \"id\": \"wifey\",\n    \"name\": \"Wifey\",\n    \"emoji\": \"\ud83e\udde1\",\n    \"systemPrompt\": \"You are a warm, supportive personal agent for my wife. You help manage our family calendar, keep track of important events, and provide thoughtful reminders. Your tone is caring and considerate. You know our family routines, and you're always looking out for ways to make life easier and more organized for us.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Our son Tommy's health insurance number: ABC55443322\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Health Tracker\"\n      },\n      {\n        \"content\": \"Alaska Airlines Mileage Plan #: 11223344\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Chore List\"\n      },\n      {\n        \"content\": \"Safe word: \\\"Marzipan\\\"\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Family Contacts\"\n      },\n      {\n        \"content\": \"Emergency chocolate stash: Bottom-left drawer, behind the quinoa\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Meal Planner\"\n      },\n      {\n        \"content\": \"Spotify playlist: \\\"Drive Home Vibes\\\"\",\n        \"mcp\": \"Gmail MCP\",\n        \"tool\": \"list_emails\",\n        \"resource\": \"Personal Inbox\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Health Tracker\",\n          \"Chore List\",\n          \"Meal Planner\"\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Family Calendar\",\n          \"Date Nights\"\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Personal Inbox\"\n        ]\n      },\n      {\n        \"name\": \"Google Contacts\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Contacts\"\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Server\"\n        ]\n      }\n    ]\n  \n  }\n}\n}\n]"}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Type of sender.", "name": "sender", "options": ["Machine", "User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "User"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Name of the sender.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "User"}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "should_store_message": {"_input_type": "BoolInput", "advanced": true, "display_name": "Store Messages", "dynamic": false, "info": "Store the message in the history.", "list": false, "list_add_label": "Add More", "name": "should_store_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "text_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Text Color", "dynamic": false, "info": "The text color of the name", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "text_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "ChatInput"}, "dragging": false, "id": "ChatInput-uXlLj", "measured": {"height": 230, "width": 320}, "position": {"x": -1548.104978316242, "y": 648.6639891398654}, "selected": false, "type": "genericNode"}, {"data": {"id": "ChatOutput-SJUHS", "node": {"base_classes": ["Message"], "beta": false, "category": "outputs", "conditional_paths": [], "custom_fields": {}, "description": "Display a chat message in the Playground.", "display_name": "Chat Output", "documentation": "", "edited": false, "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "data_template", "background_color", "chat_icon", "text_color", "clean_data"], "frozen": false, "icon": "MessagesSquare", "key": "ChatOutput", "legacy": false, "metadata": {}, "minimized": true, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Message", "method": "message_response", "name": "message", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 0.003169567463043492, "template": {"_type": "Component", "background_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Background Color", "dynamic": false, "info": "The background color of the icon.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "background_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "chat_icon": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Icon", "dynamic": false, "info": "The icon of the message.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "chat_icon", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "clean_data": {"_input_type": "BoolInput", "advanced": true, "display_name": "Basic Clean Data", "dynamic": false, "info": "Whether to clean the data", "list": false, "list_add_label": "Add More", "name": "clean_data", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"}, "data_template": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Data Template", "dynamic": false, "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "data_template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{text}"}, "input_value": {"_input_type": "HandleInput", "advanced": false, "display_name": "Text", "dynamic": false, "info": "Message to be passed as output.", "input_types": ["Data", "DataFrame", "Message"], "list": false, "list_add_label": "Add More", "name": "input_value", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Type of sender.", "name": "sender", "options": ["Machine", "User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Name of the sender.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "AI"}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "should_store_message": {"_input_type": "BoolInput", "advanced": true, "display_name": "Store Messages", "dynamic": false, "info": "Store the message in the history.", "list": false, "list_add_label": "Add More", "name": "should_store_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "text_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Text Color", "dynamic": false, "info": "The text color of the name", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "text_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "ChatOutput"}, "id": "ChatOutput-SJUHS", "measured": {"height": 192, "width": 320}, "position": {"x": 1434.7693095601408, "y": 2244.0433348941942}, "selected": false, "type": "genericNode", "dragging": false}, {"data": {"id": "Agent-unz9k", "node": {"base_classes": ["Message"], "beta": false, "category": "agents", "conditional_paths": [], "custom_fields": {}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "display_name": "Agent", "documentation": "", "edited": false, "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "memory", "sender", "sender_name", "n_messages", "session_id", "order", "template", "add_current_date_tool"], "frozen": false, "icon": "bot", "key": "Agent", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Response", "method": "message_response", "name": "response", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__", "hidden": false}], "pinned": false, "score": 1.1732828199964098e-19, "template": {"_type": "Component", "add_current_date_tool": {"_input_type": "BoolInput", "advanced": true, "display_name": "Current Date", "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "list": false, "list_add_label": "Add More", "name": "add_current_date_tool", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "agent_description": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Agent Description [Deprecated]", "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "agent_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "A helpful assistant with access to the following tools:"}, "agent_llm": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model Provider", "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "input_types": [], "name": "agent_llm", "options": ["Amazon Bedrock", "Anthropic", "Azure OpenAI", "Google Generative AI", "Groq", "NVIDIA", "OpenAI", "SambaNova", "Custom"], "options_metadata": [{"icon": "Amazon"}, {"icon": "Anthropic"}, {"icon": "Azure"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "NVIDIA"}, {"icon": "OpenAI"}, {"icon": "SambaNova"}, {"icon": "brain"}], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "OpenAI"}, "api_key": {"_input_type": "SecretStrInput", "advanced": false, "display_name": "OpenAI API Key", "dynamic": false, "info": "The OpenAI API Key to use for the OpenAI model.", "input_types": [], "load_from_db": true, "name": "api_key", "password": true, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "str", "value": null}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"}, "handle_parsing_errors": {"_input_type": "BoolInput", "advanced": true, "display_name": "Handle Parse Errors", "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "list": false, "list_add_label": "Add More", "name": "handle_parsing_errors", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "input_value": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input", "dynamic": false, "info": "The input provided by the user for the agent to process.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "json_mode": {"_input_type": "BoolInput", "advanced": true, "display_name": "JSON Mode", "dynamic": false, "info": "If True, it will output JSON regardless of passing a schema.", "list": false, "list_add_label": "Add More", "name": "json_mode", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": false}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 15}, "max_retries": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Retries", "dynamic": false, "info": "The maximum number of retries to make when generating.", "list": false, "list_add_label": "Add More", "name": "max_retries", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 5}, "max_tokens": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Tokens", "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "list": false, "list_add_label": "Add More", "name": "max_tokens", "placeholder": "", "range_spec": {"max": 128000, "min": 0, "step": 0.1, "step_type": "float"}, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": ""}, "memory": {"_input_type": "HandleInput", "advanced": true, "display_name": "External Memory", "dynamic": false, "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.", "input_types": ["Memory"], "list": false, "list_add_label": "Add More", "name": "memory", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "model_kwargs": {"_input_type": "DictInput", "advanced": true, "display_name": "Model Kwargs", "dynamic": false, "info": "Additional keyword arguments to pass to the model.", "list": false, "list_add_label": "Add More", "name": "model_kwargs", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "dict", "value": {}}, "model_name": {"_input_type": "DropdownInput", "advanced": false, "combobox": true, "dialog_inputs": {}, "display_name": "Model Name", "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "name": "model_name", "options": ["gpt-4o-mini", "gpt-4o", "gpt-4.1", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-4.5-preview", "gpt-4-turbo", "gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo", "o1"], "options_metadata": [], "placeholder": "", "real_time_refresh": false, "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "gpt-4.1"}, "n_messages": {"_input_type": "IntInput", "advanced": true, "display_name": "Number of Messages", "dynamic": false, "info": "Number of messages to retrieve.", "list": false, "list_add_label": "Add More", "name": "n_messages", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 100}, "openai_api_base": {"_input_type": "StrInput", "advanced": true, "display_name": "OpenAI API Base", "dynamic": false, "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "openai_api_base", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "order": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Order", "dynamic": false, "info": "Order of the messages.", "name": "order", "options": ["Ascending", "Descending"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "Ascending"}, "seed": {"_input_type": "IntInput", "advanced": true, "display_name": "Seed", "dynamic": false, "info": "The seed controls the reproducibility of the job.", "list": false, "list_add_label": "Add More", "name": "seed", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 1}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "info": "Filter by sender type.", "name": "sender", "options": ["Machine", "User", "Machine and User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine and User"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Filter by sender name.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Agent Instructions", "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "You are a high level orchestration agent that loops through executions of sub agents attempting to solve a problem or answer a question. \n\nOriginal question:\n\n{original_message}\n\n---\n\nCurrent state:\n\n{current_state}\n\n\nBased on this, if we are done, respond with the answer provided and end with 'DONE'. Otherwise expand the message with additional requirements for this iteration."}, "temperature": {"_input_type": "SliderInput", "advanced": true, "display_name": "Temperature", "dynamic": false, "info": "", "max_label": "", "max_label_icon": "", "min_label": "", "min_label_icon": "", "name": "temperature", "placeholder": "", "range_spec": {"max": 1, "min": 0, "step": 0.01, "step_type": "float"}, "required": false, "show": true, "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "title_case": false, "tool_mode": false, "type": "slider", "value": 0.1}, "template": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "Template", "dynamic": false, "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{sender_name}: {text}"}, "timeout": {"_input_type": "IntInput", "advanced": true, "display_name": "Timeout", "dynamic": false, "info": "The timeout for requests to OpenAI completion API.", "list": false, "list_add_label": "Add More", "name": "timeout", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 700}, "tools": {"_input_type": "HandleInput", "advanced": false, "display_name": "Tools", "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "input_types": ["Tool"], "list": true, "list_add_label": "Add More", "name": "tools", "placeholder": "", "required": false, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "verbose": {"_input_type": "BoolInput", "advanced": true, "display_name": "Verbose", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "verbose", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "Agent"}, "dragging": false, "id": "Agent-unz9k", "measured": {"height": 624, "width": 320}, "position": {"x": 697.2801362136601, "y": 172.8762854900685}, "selected": false, "type": "genericNode"}, {"id": "SubFlow (XiMq7)-q7BdI", "type": "genericNode", "position": {"x": 1316.468541280112, "y": 553.5482092826296}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from typing import Any\nimport uuid\n\nfrom loguru import logger\n\n# from langflow.base.flow_processing.utils import build_data_from_run_outputs\nfrom langflow.base.flow_processing.utils import build_data_from_result_data\nfrom langflow.custom import Component\nfrom langflow.graph.graph.base import Graph\nfrom langflow.graph.vertex.base import Vertex\nfrom langflow.helpers.flow import get_flow_inputs, run_flow\nfrom langflow.io import DropdownInput, Output, MessageTextInput\nfrom langflow.schema import Data, dotdict\n\n\nclass CustomSubFlowComponent(Component):\n    display_name = \"CUSTOM Sub Flow\"\n    description = \"Generates a Component from a Flow, with all of its inputs, and \"\n    name = \"SubFlow\"\n    beta: bool = False\n    icon = \"Workflow\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initialize the SubFlowComponent and set up placeholders for subgraph and inputs.\"\"\"\n        super().__init__(*args, **kwargs)\n        self._sub_graph = None\n        self._sub_inputs = []\n        logger.info(\"SubFlowComponent initialized: Ready to load subflows.\")\n\n    def get_flow_names(self) -> list[str]:\n        \"\"\"Returns a list of available flow names.\"\"\"\n        flow_data = self.list_flows()\n        flow_names = [flow_data.data[\"name\"] for flow_data in flow_data]\n        logger.info(f\"Found the following flow names: {flow_names}\")\n        return flow_names\n\n    def get_flow(self, flow_name: str) -> Data | None:\n        \"\"\"Retrieve a specific flow by name.\"\"\"\n        logger.info(f\"Attempting to retrieve flow with name: {flow_name}\")\n        flow_datas = self.list_flows()\n        for flow_data in flow_datas:\n            if flow_data.data[\"name\"] == flow_name:\n                logger.info(f\"Flow '{flow_name}' found. Returning flow data.\")\n                return flow_data\n        logger.warning(f\"Flow '{flow_name}' not found.\")\n        return None\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        \"\"\"Dynamically update the component build config based on the selected flow.\"\"\"\n        logger.info(f\"Updating build config for field '{field_name}' with value '{field_value}'.\")\n        if field_name == \"flow_name\":\n            build_config[\"flow_name\"][\"options\"] = self.get_flow_names()\n\n        # Remove any unknown keys\n        for key in list(build_config.keys()):\n            if key not in [x.name for x in self.inputs] + [\"code\", \"_type\", \"get_final_results_only\"]:\n                del build_config[key]\n\n        if field_value is not None and field_name == \"flow_name\":\n            try:\n                flow_data = self.get_flow(field_value)\n            except Exception:  # noqa: BLE001\n                logger.exception(f\"Error getting flow {field_value}\")\n            else:\n                if not flow_data:\n                    msg = f\"Flow {field_value} not found.\"\n                    logger.error(msg)\n                else:\n                    try:\n                        logger.info(f\"Building graph for flow '{field_value}'.\")\n                        graph = Graph.from_payload(\n                            flow_data.data[\"data\"],\n                            flow_id=str(flow_data.id),\n                            flow_name=str(field_value),\n                            user_id=str(self.user_id),\n                        )\n                        self._sub_graph = graph\n                        # Get all inputs from the graph\n                        inputs = get_flow_inputs(graph)\n                        self._sub_inputs = inputs\n                        logger.info(f\"Found {len(inputs)} input(s) in subflow '{field_value}'.\")\n                        # Add inputs to the build config\n                        build_config = self.add_inputs_to_build_config(inputs, build_config)\n                    except Exception:  # noqa: BLE001\n                        logger.exception(f\"Error building graph for flow {field_value}\")\n\n        return build_config\n\n    def add_inputs_to_build_config(self, inputs_vertex: list[Vertex], build_config: dotdict):\n        \"\"\"Add inputs from the subflow graph to the component build config.\"\"\"\n        logger.info(\"Adding inputs to the build config.\")\n        new_fields: list[dotdict] = []\n\n        for vertex in inputs_vertex:\n            new_vertex_inputs = []\n            field_template = vertex.data[\"node\"][\"template\"]\n            for inp in field_template:\n                if inp not in {\"code\", \"_type\"}:\n                    field_template[inp][\"display_name\"] = (\n                        vertex.display_name + \" - \" + field_template[inp][\"display_name\"]\n                    )\n                    field_template[inp][\"name\"] = vertex.id + \"|\" + inp\n                    new_vertex_inputs.append(field_template[inp])\n            new_fields += new_vertex_inputs\n\n        for field in new_fields:\n            build_config[field[\"name\"]] = field\n\n        logger.info(f\"Build config after adding subflow inputs: {build_config}\")\n        return build_config\n\n    inputs = [\n        DropdownInput(\n            name=\"flow_name\",\n            display_name=\"Flow Name\",\n            info=\"The name of the flow to run.\",\n            options=[],\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n    ]\n\n    outputs = [Output(name=\"flow_outputs\", display_name=\"Flow Outputs\", method=\"generate_results\")]\n\n    async def generate_results(self, *args, **kwargs) -> list[Data]:\n        \"\"\"Run the selected subflow with the provided input tweaks and return outputs.\"\"\"\n        logger.info(\"generate_results called: Preparing to run the subflow.\")\n        tweaks: dict = {}\n\n        # Build a dict of node-level tweaks from the component's stored attributes\n        for field in self._attributes:\n            if field != \"flow_name\" and \"|\" in field:\n                [node, name] = field.split(\"|\")\n                if node not in tweaks:\n                    tweaks[node] = {}\n                tweaks[node][name] = self._attributes[field]\n\n        if \"flow_name\" not in self._attributes or not self._attributes[\"flow_name\"]:\n            msg = \"Flow name is required.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        flow_name = self._attributes[\"flow_name\"]\n        logger.info(f\"Selected subflow: {flow_name}\")\n\n        try:\n            self._sub_graph.set_run_id(self.graph.run_id)\n            logger.info(f\"Subflow graph run_id set to {self.graph.run_id}\")\n        except Exception:  # noqa: BLE001\n            logger.opt(exception=True).warning(\"Failed to set run_id on the subflow graph.\")\n\n        inputs = [val for index, val in enumerate(self._sub_inputs) if val.name != \"flow_name\"]\n        logger.info(f\"Running flow '{flow_name}' with {len(inputs)} input(s). Tweaks: {tweaks}\")\n\n        run_outputs = await run_flow(\n            tweaks=tweaks,\n            flow_name=flow_name,\n            graph=self._sub_graph,\n            inputs=inputs,\n            user_id=str(self.user_id),\n            session_id=str(uuid.uuid4()),  # or your own session_id logic\n            output_type=\"all\",\n        )\n\n        data: list[Data] = []\n        if not run_outputs:\n            logger.warning(f\"No outputs returned from flow '{flow_name}'.\")\n            return data\n\n        run_output = run_outputs[0]\n        if run_output is not None:\n            for output in run_output.outputs:\n                if output:\n                    data.extend(build_data_from_result_data(output))\n\n        if data:\n            logger.info(f\"Flow '{flow_name}' executed successfully. Returning {len(data)} output(s).\")\n        else:\n            logger.info(f\"Flow '{flow_name}' returned no output data.\")\n        self.status = data[0] if data else []\n        return data\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "flow_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["Codebase File Finder", "Simplified Codebase File Finder", "Untitled document", "Anthropic Code Generator", "API Models Agent", "Error Log Code Fix Commit & Merge", "Error Log Generate Code Fix", "Github Repository RAG Generator", "Stack Trace Context Generator Agent", "Log Cleaning Agent", "Solution & Code Changes Generating Agent", "Problem Statement & Solution Strategy Agent", "Django File To Test", "Django Test Generator", "function_test_coverage", "sub_vector_store_query", "Basic Tests", "Filename to Full test suite", "Django Test Component Generator", "function_test_coverage (1)", "Single File Test Generator", "Import Stack Expansion Agent", "Ops Assistant (Github Ver)", "Cotext Orchestrator", "Cotext Orchestrator Quinn", "Entrypoint Orchestrator (quinn)"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "flow_name", "value": "Cotext Orchestrator Quinn", "display_name": "Flow Name", "advanced": false, "dynamic": false, "info": "The name of the flow to run.", "real_time_refresh": true, "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "ChatInput-KOfOG|background_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Chat Input - Background Color", "dynamic": false, "info": "The background color of the icon.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "ChatInput-KOfOG|background_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "ChatInput-KOfOG|chat_icon": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Chat Input - Icon", "dynamic": false, "info": "The icon of the message.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "ChatInput-KOfOG|chat_icon", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "ChatInput-KOfOG|files": {"_input_type": "FileInput", "advanced": true, "display_name": "Chat Input - Files", "dynamic": false, "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "file_path": "", "info": "Files to be sent with the message.", "list": true, "list_add_label": "Add More", "name": "ChatInput-KOfOG|files", "placeholder": "", "required": false, "show": true, "temp_file": true, "title_case": false, "trace_as_metadata": true, "type": "file", "value": ""}, "ChatInput-KOfOG|input_value": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Chat Input - Text", "dynamic": false, "info": "Message to be passed as input.", "input_types": [], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "ChatInput-KOfOG|input_value", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{\n\"user\": \"self\",\n\"group\": \"wifey\",\n\"message\": \"what meetings does quinn have coming up?\",\n\"config\": {\n  \"wifey\": {\n    \"id\": \"wifey\",\n    \"name\": \"Wifey\",\n    \"emoji\": \"\ud83e\udde1\",\n    \"systemPrompt\": \"You are a warm, supportive personal agent for my wife. You help manage our family calendar, keep track of important events, and provide thoughtful reminders. Your tone is caring and considerate. You know our family routines, and you're always looking out for ways to make life easier and more organized for us.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Our son Tommy's health insurance number: ABC55443322\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Health Tracker\"\n      },\n      {\n        \"content\": \"Alaska Airlines Mileage Plan #: 11223344\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Chore List\"\n      },\n      {\n        \"content\": \"Safe word: \\\"Marzipan\\\"\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Family Contacts\"\n      },\n      {\n        \"content\": \"Emergency chocolate stash: Bottom-left drawer, behind the quinoa\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Meal Planner\"\n      },\n      {\n        \"content\": \"Spotify playlist: \\\"Drive Home Vibes\\\"\",\n        \"mcp\": \"Gmail MCP\",\n        \"tool\": \"list_emails\",\n        \"resource\": \"Personal Inbox\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Health Tracker\",\n          \"Chore List\",\n          \"Meal Planner\"\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"access\": \"read-write\",\n        \"resources\": [\n          \"Family Calendar\",\n          \"Date Nights\"\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Personal Inbox\"\n        ]\n      },\n      {\n        \"name\": \"Google Contacts\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Contacts\"\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Family Server\"\n        ]\n      }\n    ]\n  },\n  \"friends\": {\n    \"id\": \"friends\",\n    \"name\": \"Friends\",\n    \"emoji\": \"\u2728\",\n    \"systemPrompt\": \"You are a casual, funny, and highly relatable agent for my friend group. You help coordinate hangouts, remember inside jokes, and keep track of our shared interests. Your tone is playful and informal. You're great at suggesting activities based on our past preferences and making sure everyone feels included.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Group vacation: July 18\u201324, Lake Tahoe\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Trip Planning\"\n      },\n      {\n        \"content\": \"Inside joke: 'James keeps forgetting the forks'\",\n        \"mcp\": \"Discord MCP\",\n        \"tool\": \"list_channels\",\n        \"resource\": \"Gaming Server\"\n      },\n      {\n        \"content\": \"Safe cocktail code: \\\"Grapefruit mode = send help\\\"\",\n        \"mcp\": \"Gmail MCP\",\n        \"tool\": \"list_emails\",\n        \"resource\": \"Friend Group\"\n      },\n      {\n        \"content\": \"Mario Kart night: Every other Friday\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Game Night Schedule\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"access\": \"write\",\n        \"resources\": [\n          \"Trip Planning\",\n          \"Game Night Schedule\"\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Friend Events\"\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Friend Group\"\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"access\": \"read\",\n        \"resources\": [\n          \"Gaming Server\",\n          \"Movie Club\"\n        ]\n      }\n    ]\n  },\n  \"colleagues\": {\n    \"id\": \"colleagues\",\n    \"name\": \"Colleagues\",\n    \"emoji\": \"\ud83d\udcbc\",\n    \"systemPrompt\": \"You are a professional, efficient personal agent for work-related matters. You help manage my professional calendar, keep track of important deadlines, and maintain a professional tone in all communications. You're knowledgeable about my work projects and can help me prepare for meetings and follow up on action items.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Office door code: 5523#\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Work Contacts\"\n      },\n      {\n        \"content\": \"IT support direct line: 555-123-4567\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"tool\": \"list_contacts\",\n        \"resource\": \"Work Contacts\"\n      },\n      {\n        \"content\": \"Conference room booking system password: MeetingPro2025\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Meeting Notes\"\n      },\n      {\n        \"content\": \"Team lunch preferences document: shared/docs/team-preferences.xlsx\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Project Tracker\"\n      },\n      {\n        \"content\": \"Quarterly OKR dashboard link: notion.so/work-okr\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Project Tracker\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"resources\": [\n          \"Project Tracker\",\n          \"Meeting Notes\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_notion_pages\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"create_notion_page\",\n            \"access\": \"write\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Google Calendar\",\n        \"mcp\": \"Google Calendar MCP\",\n        \"resources\": [\n          \"Work Calendar\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_calendar_events\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"create_calendar_event\",\n            \"access\": \"write\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Gmail\",\n        \"mcp\": \"Gmail MCP\",\n        \"resources\": [\n          \"Work Inbox\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_emails\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"send_email\",\n            \"access\": \"write\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Google Contacts\",\n        \"mcp\": \"Google Contacts MCP\",\n        \"resources\": [\n          \"Work Contacts\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_contacts\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"add_contact\",\n            \"access\": \"write\"\n          }\n        ]\n      }\n    ]\n  },\n  \"public\": {\n    \"id\": \"public\",\n    \"name\": \"Public\",\n    \"emoji\": \"\ud83c\udf10\",\n    \"systemPrompt\": \"You are a helpful, informative personal agent for public-facing interactions. You provide general information and assistance while maintaining a friendly, professional tone. You're careful not to share any private information and focus on being helpful with publicly available resources and knowledge.\",\n    \"privateInfo\": [\n      {\n        \"content\": \"Public website admin login: admin@example.com (password in password manager)\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Public Notes\"\n      },\n      {\n        \"content\": \"Community event calendar access: https://example.com/calendar\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Public Notes\"\n      },\n      {\n        \"content\": \"Social media posting schedule: Tuesdays and Thursdays at 10am\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Public Notes\"\n      },\n      {\n        \"content\": \"Preferred talking points: AI literacy, open-source collaboration, productivity tips\",\n        \"mcp\": \"Notion MCP\",\n        \"tool\": \"list_notion_pages\",\n        \"resource\": \"Public Notes\"\n      }\n    ],\n    \"mcpIntegrations\": [\n      {\n        \"name\": \"Notion\",\n        \"mcp\": \"Notion MCP\",\n        \"resources\": [\n          \"Public Notes\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_notion_pages\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"create_notion_page\",\n            \"access\": \"write\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Discord\",\n        \"mcp\": \"Discord MCP\",\n        \"resources\": [\n          \"Community Server\"\n        ],\n        \"tools\": [\n          {\n            \"name\": \"list_channels\",\n            \"access\": \"read\"\n          },\n          {\n            \"name\": \"send_message\",\n            \"access\": \"write\"\n          }\n        ]\n      }\n    ]\n  }\n}\n}"}, "ChatInput-KOfOG|sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Chat Input - Sender Type", "dynamic": false, "info": "Type of sender.", "name": "ChatInput-KOfOG|sender", "options": ["Machine", "User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "User"}, "ChatInput-KOfOG|sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Chat Input - Sender Name", "dynamic": false, "info": "Name of the sender.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "ChatInput-KOfOG|sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "User"}, "ChatInput-KOfOG|session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Chat Input - Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "ChatInput-KOfOG|session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "ChatInput-KOfOG|should_store_message": {"_input_type": "BoolInput", "advanced": true, "display_name": "Chat Input - Store Messages", "dynamic": false, "info": "Store the message in the history.", "list": false, "list_add_label": "Add More", "name": "ChatInput-KOfOG|should_store_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "ChatInput-KOfOG|text_color": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Chat Input - Text Color", "dynamic": false, "info": "The text color of the name", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "ChatInput-KOfOG|text_color", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "TextInput-0FgVB|input_value": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "TextInput-0FgVB|input_value", "value": "", "display_name": "Text Input - Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Text to be passed as input.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}}, "description": "Generates a Component from a Flow, with all of its inputs, and ", "icon": "Workflow", "base_classes": ["Data"], "display_name": "CUSTOM Sub Flow", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "flow_outputs", "hidden": false, "display_name": "Flow Outputs", "method": "generate_results", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["flow_name"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.3.4", "official": false}, "showNode": true, "type": "SubFlow (XiMq7)", "id": "SubFlow (XiMq7)-q7BdI"}, "selected": false, "measured": {"width": 320, "height": 415}, "dragging": false}, {"id": "ParserComponent (KsSMC)-Xp2cK", "type": "genericNode", "position": {"x": 1876.6622426308816, "y": 813.3409188338006}, "data": {"node": {"template": {"_type": "Component", "input_data": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_data", "value": "", "display_name": "Data or DataFrame", "advanced": false, "input_types": ["DataFrame", "Data"], "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "import json\nimport re\nfrom typing import Any, Dict\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\n# --------------------------- helper ---------------------------------- #\nTOKEN_RE = re.compile(r\"{([^{}]+)}\")  # finds {token} blocks\n\n\ndef _resolve(token: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"\n    Walk dot\u2011segments inside *ctx* and return the value as str.\n    Silently returns '' for missing segments.\n    Example: token=\"metadata.collection_name\"\n    \"\"\"\n    value: Any = ctx\n    for part in token.split(\".\"):\n        if isinstance(value, dict) and part in value:\n            value = value[part]\n        else:                       # missing link in the chain\n            return \"\"\n    # final leaf \u2192 stringify\n    if isinstance(value, (dict, list)):\n        return json.dumps(value)\n    return str(value)\n\n\ndef render(template: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"Replace {a.b.c} placeholders in *template* using *ctx*.\"\"\"\n    def repl(match: re.Match[str]) -> str:\n        token = match.group(1).strip()\n        return _resolve(token, ctx)\n\n    return TOKEN_RE.sub(repl, template)\n\n\n# --------------------- main component -------------------------------- #\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use curly\u2011bracket placeholders. \"\n                \"Dot\u2011notation lets you reach nested keys, \"\n                \"e.g. `{page_content}` or `{metadata.collection_name}`.\"\n            ),\n            value=\"Text: {page_content}\",\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    # ---------- existing _clean_args unchanged ---------- #\n    \n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    # ---------- main logic with new renderer ------------ #\n    def parse_combined_text(self) -> Message:\n        \"\"\"Render template for every row / single Data item.\"\"\"\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        try:\n            df, data = self._clean_args()\n\n            lines = []\n            if df is not None:\n                for _, row in df.iterrows():\n                    lines.append(render(self.pattern, row.to_dict()))\n            else:  # Data\n                lines.append(render(self.pattern, data.data))\n\n            combined = self.sep.join(lines)\n            self.status = combined\n            return Message(text=combined)\n        except Exception as e:  # pragma: no cover\n            self.log(f\"Parser error: {e}\")\n            return Message(text=\"\")\n            \n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "mode": {"tool_mode": false, "trace_as_metadata": true, "options": ["Parser", "Stringify"], "required": false, "placeholder": "", "show": true, "name": "mode", "value": "Stringify", "display_name": "Mode", "advanced": false, "dynamic": false, "info": "Convert into raw string instead of using a template.", "real_time_refresh": true, "title_case": false, "type": "tab", "_input_type": "TabInput"}, "pattern": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "pattern", "value": "{collection_name}", "display_name": "Template", "advanced": false, "input_types": ["Message"], "dynamic": true, "info": "Use curly\u2011bracket placeholders. Dot\u2011notation lets you reach nested keys, e.g. `{page_content}` or `{metadata.collection_name}`.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "sep": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sep", "value": "\n", "display_name": "Separator", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "String used to separate rows/items.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "clean_data": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "clean_data", "value": true, "display_name": "Clean Data", "advanced": true, "dynamic": false, "info": "Enable to clean the data by removing empty rows and lines in each cell of the DataFrame/ Data object.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.", "icon": "braces", "base_classes": ["Message"], "display_name": "Parser", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "parsed_text", "hidden": false, "display_name": "Parsed Text", "method": "parse_combined_text", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["mode", "pattern", "input_data", "sep"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.3.4", "official": false, "category": "saved_components", "key": "ParserComponent (KsSMC)", "score": 0.001}, "showNode": true, "type": "ParserComponent (KsSMC)", "id": "ParserComponent (KsSMC)-Xp2cK"}, "selected": false, "measured": {"width": 320, "height": 312}, "dragging": false}, {"id": "CustomLoopComponent (Sx3Rp)-NU8Cw", "type": "genericNode", "position": {"x": -418.19500724910597, "y": 826.7356162201844}, "data": {"node": {"template": {"_type": "Component", "input_data": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_data", "value": "", "display_name": "Data / DataFrame", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "loop_input": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "loop_input", "value": "", "display_name": "Loop Input", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from __future__ import annotations\nfrom typing import List, Sequence\nimport json\n\nfrom langflow.custom import Component\nfrom langflow.io import HandleInput, Output\nfrom langflow.schema import Data, DataFrame\n\n\nclass CustomLoopComponent(Component):\n    display_name = \"Custom I/O Loop\"\n    icon = \"infinity\"\n    description = (\n        \"Iterates over *input_data*. On each iteration it merges *loop_input* \"\n        \"into the previous item, emits the current item, and when finished \"\n        \"returns the whole updated list on *Done*.\"\n    )\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Inputs / Outputs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data / DataFrame\",\n            input_types=[\"Data\"],\n            required=True,\n        ),\n        HandleInput(\n            name=\"loop_input\",\n            display_name=\"Loop Input\",\n            input_types=[\"Data\"],\n            required=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"item\", display_name=\"Item\", method=\"item_output\", allows_loop=True),\n        Output(name=\"done\", display_name=\"Done\", method=\"done_output\"),\n    ]\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Helpers \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n    def _normalise_input(self) -> List[Data]:\n        \"\"\"Convert *anything* into list[Data].\"\"\"\n        raw = self.input_data\n\n        if isinstance(raw, list) and all(isinstance(x, Data) for x in raw):\n            return raw\n        if isinstance(raw, Data):\n            if isinstance(raw.data, list) and all(isinstance(x, Data) for x in raw.data):\n                return raw.data\n            return [raw]\n        if isinstance(raw, DataFrame):\n            return [Data(json=row.to_dict()) for _, row in raw.iterrows()]\n        if isinstance(raw, dict):\n            if {\"columns\", \"data\"}.issubset(raw):\n                df = DataFrame.from_dict(raw)\n                return [Data(json=row) for _, row in df.iterrows()]\n            return [Data(**raw)]\n        if isinstance(raw, str):\n            try:\n                obj = json.loads(raw)\n            except json.JSONDecodeError:\n                return [Data(text=raw)]\n            self.input_data = obj  # replace and recurse once\n            return self._normalise_input()\n        raise TypeError(f\"Unsupported input type {type(raw).__name__}\")\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Langflow life\u2011cycle \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n    def initialize_data(self) -> None:\n        if self.ctx.get(f\"{self._id}_inited\", False):\n            return\n        self.update_ctx(\n            {\n                f\"{self._id}_items\": self._normalise_input(),\n                f\"{self._id}_idx\": 0,\n                f\"{self._id}_inited\": True,\n            }\n        )\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Outputs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n    def item_output(self) -> Data:\n        self.initialize_data()\n        items: List[Data] = self.ctx[f\"{self._id}_items\"]\n        idx: int = self.ctx[f\"{self._id}_idx\"]\n\n        # Attach the incoming loop_input to the *previous* item (idx\u20111)\n        if idx > 0 and idx < len(items):\n            self._attach_loop_input(items[idx - 1])\n\n        # If we\u2019ve already sent every element, stop producing items\n        if idx > len(items):\n            self.stop(\"item\")\n            return Data(text='')  # Signal \u201cno more items\u201d\n\n        current = items[idx] if idx < len(items) else Data(text='')\n        self.update_ctx({f\"{self._id}_idx\": idx + 1})\n        return current\n\n    def done_output(self) -> list[Data]:\n        self.initialize_data()\n        items: List[Data] = self.ctx[f\"{self._id}_items\"]\n        idx: int = self.ctx[f\"{self._id}_idx\"]\n\n        # Finished when idx == len(items)\n        if idx - 1 == len(items):\n            # Attach the *final* loop_input (for last item)\n            if items:\n                self._attach_loop_input(items[-1])\n\n            self.stop(\"item\")\n            self.start(\"done\")\n            return items  # full, updated list\n\n        # Otherwise suppress Done\n        self.stop(\"done\")\n        return None\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Utility \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n    def _attach_loop_input(self, item: Data):\n        \"\"\"Put loop_input inside item.metadata['results'].\"\"\"\n        loop_val = self.loop_input\n        if not loop_val:\n            return\n\n        # guarantee list to extend\n        if not hasattr(item, 'results'):\n            item.results = []\n\n        if isinstance(loop_val, list):\n            item.results.extend(x.data for x in loop_val)\n        elif isinstance(loop_val, Data):\n            item.results.append(loop_val.data)\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}}, "description": "Iterates over *input_data*. On each iteration it merges *loop_input* into the previous item, emits the current item, and when finished returns the whole updated list on *Done*.", "icon": "infinity", "base_classes": ["Data"], "display_name": "Custom I/O Loop", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "item", "hidden": false, "display_name": "Item", "method": "item_output", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": true, "options": null, "tool_mode": true}, {"types": ["Data"], "selected": "Data", "name": "done", "hidden": false, "display_name": "Done", "method": "done_output", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["input_data", "loop_input"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1", "official": false}, "showNode": true, "type": "CustomLoopComponent (Sx3Rp)", "id": "CustomLoopComponent (Sx3Rp)-NU8Cw"}, "selected": false, "measured": {"width": 320, "height": 344}, "dragging": false}, {"id": "MessagetoData-T0aG6", "type": "genericNode", "position": {"x": 2653.1786239211015, "y": 1435.0675856069688}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.io import MessageInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass MessageToDataComponent(Component):\n    display_name = \"Message to Data\"\n    description = \"Convert a Message object to a Data object\"\n    icon = \"message-square-share\"\n    beta = True\n    name = \"MessagetoData\"\n\n    inputs = [\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The Message object to convert to a Data object\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"convert_message_to_data\"),\n    ]\n\n    def convert_message_to_data(self) -> Data:\n        if isinstance(self.message, Message):\n            # Convert Message to Data\n            return Data(data=self.message.data)\n\n        msg = \"Error converting Message to Data: Input must be a Message object\"\n        logger.opt(exception=True).debug(msg)\n        self.status = msg\n        return Data(data={\"error\": msg})\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "message": {"trace_as_input": true, "tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "message", "value": "", "display_name": "Message", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The Message object to convert to a Data object", "title_case": false, "type": "str", "_input_type": "MessageInput"}}, "description": "Convert a Message object to a Data object", "icon": "message-square-share", "base_classes": ["Data"], "display_name": "Message to Data", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "data", "display_name": "Data", "method": "convert_message_to_data", "value": "__UNDEFINED__", "cache": true, "allows_loop": false, "tool_mode": true, "hidden": false}], "field_order": ["message"], "beta": true, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false, "category": "processing", "key": "MessagetoData", "score": 0.008222426499470714}, "showNode": true, "type": "MessagetoData", "id": "MessagetoData-T0aG6"}, "selected": false, "measured": {"width": 320, "height": 230}, "dragging": false}, {"id": "Pass-qAuAP", "type": "genericNode", "position": {"x": 2378.917712235023, "y": 945.4797769792931}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.custom import Component\nfrom langflow.io import MessageInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass PassMessageComponent(Component):\n    display_name = \"Pass\"\n    description = \"Forwards the input message, unchanged.\"\n    name = \"Pass\"\n    icon = \"arrow-right\"\n\n    inputs = [\n        MessageInput(\n            name=\"input_message\",\n            display_name=\"Input Message\",\n            info=\"The message to be passed forward.\",\n            required=True,\n        ),\n        MessageInput(\n            name=\"ignored_message\",\n            display_name=\"Ignored Message\",\n            info=\"A second message to be ignored. Used as a workaround for continuity.\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output Message\", name=\"output_message\", method=\"pass_message\"),\n    ]\n\n    def pass_message(self) -> Message:\n        self.status = self.input_message\n        return self.input_message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "ignored_message": {"trace_as_input": true, "tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "ignored_message", "value": "", "display_name": "Ignored Message", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "A second message to be ignored. Used as a workaround for continuity.", "title_case": false, "type": "str", "_input_type": "MessageInput"}, "input_message": {"trace_as_input": true, "tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_message", "value": "", "display_name": "Input Message", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The message to be passed forward.", "title_case": false, "type": "str", "_input_type": "MessageInput"}}, "description": "Forwards the input message, unchanged.", "icon": "arrow-right", "base_classes": ["Message"], "display_name": "Pass", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "output_message", "display_name": "Output Message", "method": "pass_message", "value": "__UNDEFINED__", "cache": true, "allows_loop": false, "tool_mode": true, "hidden": false}], "field_order": ["input_message", "ignored_message"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false, "category": "logic", "key": "Pass", "score": 2.220446049250313e-16}, "showNode": true, "type": "Pass", "id": "Pass-qAuAP"}, "selected": false, "measured": {"width": 320, "height": 312}, "dragging": false}, {"id": "ParserComponent (B4V9B)-gcLZ5", "type": "genericNode", "position": {"x": 38.76249244285819, "y": 574.2624473952379}, "data": {"node": {"template": {"_type": "Component", "input_data": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_data", "value": "", "display_name": "Data or DataFrame", "advanced": false, "input_types": ["DataFrame", "Data"], "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "import json\nimport re\nfrom typing import Any, Dict\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\n# --------------------------- helper ---------------------------------- #\nTOKEN_RE = re.compile(r\"{([^{}]+)}\")  # finds {token} blocks\n\n\ndef _resolve(token: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"\n    Walk dot\u2011segments inside *ctx* and return the value as str.\n    Silently returns '' for missing segments.\n    Example: token=\"metadata.collection_name\"\n    \"\"\"\n    value: Any = ctx\n    for part in token.split(\".\"):\n        if isinstance(value, dict) and part in value:\n            value = value[part]\n        else:                       # missing link in the chain\n            return \"\"\n    # final leaf \u2192 stringify\n    if isinstance(value, (dict, list)):\n        return json.dumps(value)\n    return str(value)\n\n\ndef render(template: str, ctx: Dict[str, Any]) -> str:\n    \"\"\"Replace {a.b.c} placeholders in *template* using *ctx*.\"\"\"\n    def repl(match: re.Match[str]) -> str:\n        token = match.group(1).strip()\n        return _resolve(token, ctx)\n\n    return TOKEN_RE.sub(repl, template)\n\n\n# --------------------- main component -------------------------------- #\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use curly\u2011bracket placeholders. \"\n                \"Dot\u2011notation lets you reach nested keys, \"\n                \"e.g. `{page_content}` or `{metadata.collection_name}`.\"\n            ),\n            value=\"Text: {page_content}\",\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    # ---------- existing _clean_args unchanged ---------- #\n    \n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    # ---------- main logic with new renderer ------------ #\n    def parse_combined_text(self) -> Message:\n        \"\"\"Render template for every row / single Data item.\"\"\"\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        try:\n            df, data = self._clean_args()\n\n            lines = []\n            if df is not None:\n                for _, row in df.iterrows():\n                    lines.append(render(self.pattern, row.to_dict()))\n            else:  # Data\n                lines.append(render(self.pattern, data.data))\n\n            combined = self.sep.join(lines)\n            self.status = combined\n            return Message(text=combined)\n        except Exception as e:  # pragma: no cover\n            self.log(f\"Parser error: {e}\")\n            return Message(text=\"\")\n            \n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "mode": {"tool_mode": false, "trace_as_metadata": true, "options": ["Parser", "Stringify"], "required": false, "placeholder": "", "show": true, "name": "mode", "value": "Stringify", "display_name": "Mode", "advanced": false, "dynamic": false, "info": "Convert into raw string instead of using a template.", "real_time_refresh": true, "title_case": false, "type": "tab", "_input_type": "TabInput"}, "pattern": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "pattern", "value": "{collection_name}", "display_name": "Template", "advanced": false, "input_types": ["Message"], "dynamic": true, "info": "Use curly\u2011bracket placeholders. Dot\u2011notation lets you reach nested keys, e.g. `{page_content}` or `{metadata.collection_name}`.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "sep": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sep", "value": "\n", "display_name": "Separator", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "String used to separate rows/items.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "clean_data": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "clean_data", "value": true, "display_name": "Clean Data", "advanced": true, "dynamic": false, "info": "Enable to clean the data by removing empty rows and lines in each cell of the DataFrame/ Data object.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.", "icon": "braces", "base_classes": ["Message"], "display_name": "Parser", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "parsed_text", "hidden": false, "display_name": "Parsed Text", "method": "parse_combined_text", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["mode", "pattern", "input_data", "sep"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1", "official": false, "category": "saved_components", "key": "ParserComponent (B4V9B)", "score": 0.001}, "showNode": true, "type": "ParserComponent (B4V9B)", "id": "ParserComponent (B4V9B)-gcLZ5"}, "selected": false, "measured": {"width": 320, "height": 312}, "dragging": false}, {"id": "CustomComponent-2aQq6", "type": "genericNode", "position": {"x": -975.694169940821, "y": 641.3016788612277}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "\"\"\"\nJsonString \u279c Data\n-----------------\nA Langflow custom component that accepts a JSON **string** and returns\na single `Data` object whose `.json` field contains the parsed payload.\n\"\"\"\n\nimport json\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\n\n\nclass JsonStringToDataList(Component):\n    display_name = \"JSON String \u2192 DataList\"\n    description = (\n        \"Parses an input string that contains JSON and emits one Data object \"\n        \"with the parsed structure in its `.json` attribute.\"\n    )\n    icon = \"code\"\n    name = \"JsonStringToDataList\"\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 input \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    inputs = [\n        MessageTextInput(\n            name=\"json_string\",\n            display_name=\"JSON String\",\n            required=True,\n            info='Example: {\"foo\": 1, \"bar\": \"baz\"}',\n        )\n    ]\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    outputs = [\n        Output(\n            name=\"data\",\n            display_name=\"DataList\",\n            method=\"parse_json\",\n        )\n    ]\n\n    # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 core logic \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    def parse_json(self) -> list[Data]:\n        raw = self.json_string\n        if not isinstance(raw, str):\n            raise TypeError(\"json_string must be a str\")\n\n        try:\n            parsed = json.loads(raw)\n        except json.JSONDecodeError as e:\n            raise ValueError(f\"Invalid JSON: {e}\") from e\n\n        if isinstance(parsed, dict):\n            \n            return [Data(**parsed if parsed else {})]\n            \n        elif isinstance(parsed, list):\n            return [Data(**elem) for elem in parsed]\n        return [Data(text=\"None\")]\n            \n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "json_string": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "json_string", "value": "", "display_name": "JSON String", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Example: {\"foo\": 1, \"bar\": \"baz\"}", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Parses an input string that contains JSON and emits one Data object with the parsed structure in its `.json` attribute.", "icon": "code", "base_classes": ["Data"], "display_name": "JSON String \u2192 DataList", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "data", "hidden": false, "display_name": "DataList", "method": "parse_json", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "options": null, "tool_mode": true}], "field_order": ["json_string"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.4.1"}, "showNode": true, "type": "JsonStringToDataList", "id": "CustomComponent-2aQq6"}, "selected": false, "measured": {"width": 320, "height": 270}}], "edges": [{"source": "SubFlow (XiMq7)-q7BdI", "sourceHandle": "{\u0153dataType\u0153:\u0153SubFlow (XiMq7)\u0153,\u0153id\u0153:\u0153SubFlow (XiMq7)-q7BdI\u0153,\u0153name\u0153:\u0153flow_outputs\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent (KsSMC)-Xp2cK", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (KsSMC)-Xp2cK\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_data", "id": "ParserComponent (KsSMC)-Xp2cK", "inputTypes": ["DataFrame", "Data"], "type": "other"}, "sourceHandle": {"dataType": "SubFlow (XiMq7)", "id": "SubFlow (XiMq7)-q7BdI", "name": "flow_outputs", "output_types": ["Data"]}}, "id": "xy-edge__SubFlow (XiMq7)-q7BdI{\u0153dataType\u0153:\u0153SubFlow (XiMq7)\u0153,\u0153id\u0153:\u0153SubFlow (XiMq7)-q7BdI\u0153,\u0153name\u0153:\u0153flow_outputs\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent (KsSMC)-Xp2cK{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (KsSMC)-Xp2cK\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "CustomLoopComponent (Sx3Rp)-NU8Cw", "sourceHandle": "{\u0153dataType\u0153:\u0153CustomLoopComponent (Sx3Rp)\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153name\u0153:\u0153done\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ChatOutput-SJUHS", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-SJUHS\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "ChatOutput-SJUHS", "inputTypes": ["Data", "DataFrame", "Message"], "type": "other"}, "sourceHandle": {"dataType": "CustomLoopComponent (Sx3Rp)", "id": "CustomLoopComponent (Sx3Rp)-NU8Cw", "name": "done", "output_types": ["Data"]}}, "id": "xy-edge__CustomLoopComponent (Sx3Rp)-NU8Cw{\u0153dataType\u0153:\u0153CustomLoopComponent (Sx3Rp)\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153name\u0153:\u0153done\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ChatOutput-SJUHS{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-SJUHS\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "MessagetoData-T0aG6", "sourceHandle": "{\u0153dataType\u0153:\u0153MessagetoData\u0153,\u0153id\u0153:\u0153MessagetoData-T0aG6\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "CustomLoopComponent (Sx3Rp)-NU8Cw", "targetHandle": "{\u0153dataType\u0153:\u0153CustomLoopComponent (Sx3Rp)\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153name\u0153:\u0153item\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "data": {"targetHandle": {"dataType": "CustomLoopComponent (Sx3Rp)", "id": "CustomLoopComponent (Sx3Rp)-NU8Cw", "name": "item", "output_types": ["Data"]}, "sourceHandle": {"dataType": "MessagetoData", "id": "MessagetoData-T0aG6", "name": "data", "output_types": ["Data"]}}, "id": "xy-edge__MessagetoData-T0aG6{\u0153dataType\u0153:\u0153MessagetoData\u0153,\u0153id\u0153:\u0153MessagetoData-T0aG6\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-CustomLoopComponent (Sx3Rp)-NU8Cw{\u0153dataType\u0153:\u0153CustomLoopComponent (Sx3Rp)\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153name\u0153:\u0153item\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "selected": false, "animated": false, "className": ""}, {"source": "MessagetoData-T0aG6", "sourceHandle": "{\u0153dataType\u0153:\u0153MessagetoData\u0153,\u0153id\u0153:\u0153MessagetoData-T0aG6\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "CustomLoopComponent (Sx3Rp)-NU8Cw", "targetHandle": "{\u0153fieldName\u0153:\u0153loop_input\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "loop_input", "id": "CustomLoopComponent (Sx3Rp)-NU8Cw", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "MessagetoData", "id": "MessagetoData-T0aG6", "name": "data", "output_types": ["Data"]}}, "id": "xy-edge__MessagetoData-T0aG6{\u0153dataType\u0153:\u0153MessagetoData\u0153,\u0153id\u0153:\u0153MessagetoData-T0aG6\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-CustomLoopComponent (Sx3Rp)-NU8Cw{\u0153fieldName\u0153:\u0153loop_input\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Pass-qAuAP", "sourceHandle": "{\u0153dataType\u0153:\u0153Pass\u0153,\u0153id\u0153:\u0153Pass-qAuAP\u0153,\u0153name\u0153:\u0153output_message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "MessagetoData-T0aG6", "targetHandle": "{\u0153fieldName\u0153:\u0153message\u0153,\u0153id\u0153:\u0153MessagetoData-T0aG6\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "message", "id": "MessagetoData-T0aG6", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "Pass", "id": "Pass-qAuAP", "name": "output_message", "output_types": ["Message"]}}, "id": "xy-edge__Pass-qAuAP{\u0153dataType\u0153:\u0153Pass\u0153,\u0153id\u0153:\u0153Pass-qAuAP\u0153,\u0153name\u0153:\u0153output_message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-MessagetoData-T0aG6{\u0153fieldName\u0153:\u0153message\u0153,\u0153id\u0153:\u0153MessagetoData-T0aG6\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ParserComponent (KsSMC)-Xp2cK", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent (KsSMC)\u0153,\u0153id\u0153:\u0153ParserComponent (KsSMC)-Xp2cK\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Pass-qAuAP", "targetHandle": "{\u0153fieldName\u0153:\u0153input_message\u0153,\u0153id\u0153:\u0153Pass-qAuAP\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_message", "id": "Pass-qAuAP", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ParserComponent (KsSMC)", "id": "ParserComponent (KsSMC)-Xp2cK", "name": "parsed_text", "output_types": ["Message"]}}, "id": "xy-edge__ParserComponent (KsSMC)-Xp2cK{\u0153dataType\u0153:\u0153ParserComponent (KsSMC)\u0153,\u0153id\u0153:\u0153ParserComponent (KsSMC)-Xp2cK\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Pass-qAuAP{\u0153fieldName\u0153:\u0153input_message\u0153,\u0153id\u0153:\u0153Pass-qAuAP\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "CustomLoopComponent (Sx3Rp)-NU8Cw", "sourceHandle": "{\u0153dataType\u0153:\u0153CustomLoopComponent (Sx3Rp)\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153name\u0153:\u0153item\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent (B4V9B)-gcLZ5", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (B4V9B)-gcLZ5\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_data", "id": "ParserComponent (B4V9B)-gcLZ5", "inputTypes": ["DataFrame", "Data"], "type": "other"}, "sourceHandle": {"dataType": "CustomLoopComponent (Sx3Rp)", "id": "CustomLoopComponent (Sx3Rp)-NU8Cw", "name": "item", "output_types": ["Data"]}}, "id": "xy-edge__CustomLoopComponent (Sx3Rp)-NU8Cw{\u0153dataType\u0153:\u0153CustomLoopComponent (Sx3Rp)\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153name\u0153:\u0153item\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent (B4V9B)-gcLZ5{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent (B4V9B)-gcLZ5\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ParserComponent (B4V9B)-gcLZ5", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent (B4V9B)\u0153,\u0153id\u0153:\u0153ParserComponent (B4V9B)-gcLZ5\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Agent-unz9k", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-unz9k\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "Agent-unz9k", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ParserComponent (B4V9B)", "id": "ParserComponent (B4V9B)-gcLZ5", "name": "parsed_text", "output_types": ["Message"]}}, "id": "xy-edge__ParserComponent (B4V9B)-gcLZ5{\u0153dataType\u0153:\u0153ParserComponent (B4V9B)\u0153,\u0153id\u0153:\u0153ParserComponent (B4V9B)-gcLZ5\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-unz9k{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-unz9k\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ChatInput-uXlLj", "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-uXlLj\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-2aQq6", "targetHandle": "{\u0153fieldName\u0153:\u0153json_string\u0153,\u0153id\u0153:\u0153CustomComponent-2aQq6\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "json_string", "id": "CustomComponent-2aQq6", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ChatInput", "id": "ChatInput-uXlLj", "name": "message", "output_types": ["Message"]}}, "id": "xy-edge__ChatInput-uXlLj{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-uXlLj\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-2aQq6{\u0153fieldName\u0153:\u0153json_string\u0153,\u0153id\u0153:\u0153CustomComponent-2aQq6\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "CustomComponent-2aQq6", "sourceHandle": "{\u0153dataType\u0153:\u0153JsonStringToDataList\u0153,\u0153id\u0153:\u0153CustomComponent-2aQq6\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "CustomLoopComponent (Sx3Rp)-NU8Cw", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_data", "id": "CustomLoopComponent (Sx3Rp)-NU8Cw", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "JsonStringToDataList", "id": "CustomComponent-2aQq6", "name": "data", "output_types": ["Data"]}}, "id": "xy-edge__CustomComponent-2aQq6{\u0153dataType\u0153:\u0153JsonStringToDataList\u0153,\u0153id\u0153:\u0153CustomComponent-2aQq6\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-CustomLoopComponent (Sx3Rp)-NU8Cw{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153CustomLoopComponent (Sx3Rp)-NU8Cw\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ParserComponent (B4V9B)-gcLZ5", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent (B4V9B)\u0153,\u0153id\u0153:\u0153ParserComponent (B4V9B)-gcLZ5\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "SubFlow (XiMq7)-q7BdI", "targetHandle": "{\u0153fieldName\u0153:\u0153TextInput-0FgVB|input_value\u0153,\u0153id\u0153:\u0153SubFlow (XiMq7)-q7BdI\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "TextInput-0FgVB|input_value", "id": "SubFlow (XiMq7)-q7BdI", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ParserComponent (B4V9B)", "id": "ParserComponent (B4V9B)-gcLZ5", "name": "parsed_text", "output_types": ["Message"]}}, "id": "xy-edge__ParserComponent (B4V9B)-gcLZ5{\u0153dataType\u0153:\u0153ParserComponent (B4V9B)\u0153,\u0153id\u0153:\u0153ParserComponent (B4V9B)-gcLZ5\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-SubFlow (XiMq7)-q7BdI{\u0153fieldName\u0153:\u0153TextInput-0FgVB|input_value\u0153,\u0153id\u0153:\u0153SubFlow (XiMq7)-q7BdI\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}], "viewport": {"x": 518.6871515835842, "y": 76.2716472386764, "zoom": 0.28085572740058545}}, "is_component": false, "updated_at": "2025-05-18T00:09:40+00:00", "webhook": false, "endpoint_name": null, "tags": ["assistants", "agents"], "locked": false, "mcp_enabled": true, "action_name": null, "action_description": null, "access_type": "PRIVATE", "id": "693c3f55-d75f-45b2-a7f2-0a9898070841", "user_id": "154bb2fa-5a61-447f-bdf9-a5b73f8d8516", "folder_id": "a8a36b90-719e-4e7f-b9ab-9208ffd9acff"}